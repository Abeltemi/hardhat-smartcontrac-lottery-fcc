{"id":"5849defbd15859c8aaef36aff3d92eb9","_format":"hh-sol-build-info-1","solcVersion":"0.6.6","solcLongVersion":"0.6.6+commit.6c089d02","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.6/interfaces/BlockHashStoreInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\ninterface BlockHashStoreInterface {\n  function getBlockhash(uint256 number) external view returns (bytes32);\n}\n"},"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n  function approve(address spender, uint256 value) external returns (bool success);\n  function balanceOf(address owner) external view returns (uint256 balance);\n  function decimals() external view returns (uint8 decimalPlaces);\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n  function name() external view returns (string memory tokenName);\n  function symbol() external view returns (string memory tokenSymbol);\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n  function transfer(address to, uint256 value) external returns (bool success);\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"},"@chainlink/contracts/src/v0.6/vendor/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n *\n * This contract has been modified to remove the revokeOwnership function\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor () internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Returns true if the caller is the current owner.\n   */\n  function isOwner() public view returns (bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n"},"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathChainlink {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n"},"@chainlink/contracts/src/v0.6/VRF.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\n/** ****************************************************************************\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\n\n  * @dev Bibliographic references:\n\n  * @dev Goldberg, et al., \"Verifiable Random Functions (VRFs)\", Internet Draft\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\n\n  * @dev Papadopoulos, et al., \"Making NSEC5 Practical for DNSSEC\", Cryptology\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\n  * ****************************************************************************\n  * @dev USAGE\n\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\n  * ****************************************************************************\n  * @dev PURPOSE\n\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\n  * @dev Reggie, he gives back a value which is computed completely\n  * @dev deterministically from the seed and the secret key.\n\n  * @dev Reggie provides a proof by which Vera can verify that the output was\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\n  * @dev the output is computationally indistinguishable to her from a uniform\n  * @dev random sample from the output space.\n\n  * @dev The purpose of this contract is to perform that verification.\n  * ****************************************************************************\n  * @dev DESIGN NOTES\n\n  * @dev The VRF algorithm verified here satisfies the full unqiqueness, full\n  * @dev collision resistance, and full pseudorandomness security properties.\n  * @dev See \"SECURITY PROPERTIES\" below, and\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\n\n  * @dev An elliptic curve point is generally represented in the solidity code\n  * @dev as a uint256[2], corresponding to its affine coordinates in\n  * @dev GF(FIELD_SIZE).\n\n  * @dev For the sake of efficiency, this implementation deviates from the spec\n  * @dev in some minor ways:\n\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\n\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\n\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\n  * @dev   nonce updated until a valid x-ordinate is found.\n\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\n  * @dev   in the hash message, as recommended in step 5.B of the draft\n  * @dev   standard. They are unnecessary here because no variation in the\n  * @dev   cipher suite is allowed.\n\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\n  * @dev   points, not the compressed points as recommended in step 3.\n\n  * @dev - In the calculation of the challenge value \"c\", the \"u\" value (i.e.\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\n  * @dev   generator point, see steps 5 and 7 of\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\n  * @dev   keccak hash of the original u. This is because we only verify the\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\n  * ****************************************************************************\n  * @dev   SECURITY PROPERTIES\n\n  * @dev Here are the security properties for this VRF:\n\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\n  * @dev   the sense that the proof will pass verifyVRFProof.\n\n  * @dev Full collision resistance: It's cryptographically infeasible to find\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\n\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\n  * @dev   derived from a given seed, the outputs are computationally\n  * @dev   indistinguishable from randomness.\n\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\n  * @dev for these properties.\n\n  * @dev For secp256k1, the key validation described in section\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\n  * @dev representation of the public key used here (affine x- and y-ordinates\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\n  * @dev the point at infinity.\n  * ****************************************************************************\n  * @dev OTHER SECURITY CONSIDERATIONS\n  *\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\n  * @dev However, under the Random Oracle Model the probability of choosing a\n  * @dev point which forces n extra rounds in hashToCurve is 2⁻ⁿ. The base cost\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\n  * @dev try, in expectation, about 2¹²⁸ seeds, which is infeasible for any\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\n\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\n  * @dev this means it is infeasible for an adversary to prevent correct\n  * @dev operation of this contract by choosing an adverse seed.\n\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\n  * @dev hashToCurve.)\n\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\n  * @dev See notes in hashToCurve docstring.\n*/\ncontract VRF {\n\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\n  uint256 constant private GROUP_ORDER = // Number of points in Secp256k1\n    // solium-disable-next-line indentation\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n  // Prime characteristic of the galois field over which Secp256k1 is defined\n  uint256 constant private FIELD_SIZE =\n    // solium-disable-next-line indentation\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n  uint256 constant private WORD_LENGTH_BYTES = 0x20;\n\n  // (base^exponent) % FIELD_SIZE\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\n  function bigModExp(uint256 base, uint256 exponent)\n    internal view returns (uint256 exponentiation) {\n      uint256 callResult;\n      uint256[6] memory bigModExpContractInputs;\n      bigModExpContractInputs[0] = WORD_LENGTH_BYTES;  // Length of base\n      bigModExpContractInputs[1] = WORD_LENGTH_BYTES;  // Length of exponent\n      bigModExpContractInputs[2] = WORD_LENGTH_BYTES;  // Length of modulus\n      bigModExpContractInputs[3] = base;\n      bigModExpContractInputs[4] = exponent;\n      bigModExpContractInputs[5] = FIELD_SIZE;\n      uint256[1] memory output;\n      assembly { // solhint-disable-line no-inline-assembly\n      callResult := staticcall(\n        not(0),                   // Gas cost: no limit\n        0x05,                     // Bigmodexp contract address\n        bigModExpContractInputs,\n        0xc0,                     // Length of input segment: 6*0x20-bytes\n        output,\n        0x20                      // Length of output segment\n      )\n      }\n      if (callResult == 0) {revert(\"bigModExp failure!\");}\n      return output[0];\n    }\n\n  // Let q=FIELD_SIZE. q % 4 = 3, ∴ x≡r^2 mod q ⇒ x^SQRT_POWER≡±r mod q.  See\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\n  uint256 constant private SQRT_POWER = (FIELD_SIZE + 1) >> 2;\n\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\n  function squareRoot(uint256 x) internal view returns (uint256) {\n    return bigModExp(x, SQRT_POWER);\n  }\n\n  // The value of y^2 given that (x,y) is on secp256k1.\n  function ySquared(uint256 x) internal pure returns (uint256) {\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\n    return addmod(xCubed, 7, FIELD_SIZE);\n  }\n\n  // True iff p is on secp256k1\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\n  }\n\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\n    x_ = uint256(keccak256(b));\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\n    // string_to_point in the IETF draft\n    while (x_ >= FIELD_SIZE) {\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\n    }\n  }\n\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\n  // is always even, due to\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n  // step 5.C, which references arbitrary_string_to_point, defined in\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\n  // returning the point with given x ordinate, and even y ordinate.\n  function newCandidateSecp256k1Point(bytes memory b)\n    internal view returns (uint256[2] memory p) {\n      p[0] = fieldHash(b);\n      p[1] = squareRoot(ySquared(p[0]));\n      if (p[1] % 2 == 1) {\n        p[1] = FIELD_SIZE - p[1];\n      }\n    }\n\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\n  // vrf.go/hashToCurveHashPrefix\n  uint256 constant HASH_TO_CURVE_HASH_PREFIX = 1;\n\n  // Cryptographic hash function onto the curve.\n  //\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\n  // DESIGN NOTES above for slight differences.)\n  //\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\n  // \"Construction of Rational Points on Elliptic Curves over Finite Fields\"\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\n  // and suggested by\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\n  //\n  // This would greatly simplify the analysis in \"OTHER SECURITY CONSIDERATIONS\"\n  // https://www.pivotaltracker.com/story/show/171120900\n  function hashToCurve(uint256[2] memory pk, uint256 input)\n    internal view returns (uint256[2] memory rv) {\n      rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX,\n                                                       pk, input));\n      while (!isOnCurve(rv)) {\n        rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\n      }\n    }\n\n  /** *********************************************************************\n   * @notice Check that product==scalar*multiplicand\n   *\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\n   *\n   * @param multiplicand: secp256k1 point\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\n   * @param product: secp256k1 expected to be multiplier * multiplicand\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\n   */\n  function ecmulVerify(uint256[2] memory multiplicand, uint256 scalar,\n    uint256[2] memory product) internal pure returns(bool verifies)\n  {\n    require(scalar != 0); // Rules out an ecrecover failure case\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\n    // (x⁻¹ mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\n    // Explicit conversion to address takes bottom 160 bits\n    address expected = address(uint256(keccak256(abi.encodePacked(product))));\n    return (actual == expected);\n  }\n\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P¹(𝔽ₙ)\n  function projectiveSub(uint256 x1, uint256 z1, uint256 x2, uint256 z2)\n    internal pure returns(uint256 x3, uint256 z3) {\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n    }\n\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P¹(𝔽ₙ)\n  function projectiveMul(uint256 x1, uint256 z1, uint256 x2, uint256 z2)\n    internal pure returns(uint256 x3, uint256 z3) {\n      (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n    }\n\n  /** **************************************************************************\n      @notice Computes elliptic-curve sum, in projective co-ordinates\n\n      @dev Using projective coordinates avoids costly divisions\n\n      @dev To use this with p and q in affine coordinates, call\n      @dev projectiveECAdd(px, py, qx, qy). This will return\n      @dev the addition of (px, py, 1) and (qx, qy, 1), in the\n      @dev secp256k1 group.\n\n      @dev This can be used to calculate the z which is the inverse to zInv\n      @dev in isValidVRFOutput. But consider using a faster\n      @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\n\n      @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\n           coordinates of secp256k1 points. That is safe in this contract,\n           because this method is only used by linearCombination, which checks\n           points are on the curve via ecrecover.\n      **************************************************************************\n      @param px The first affine coordinate of the first summand\n      @param py The second affine coordinate of the first summand\n      @param qx The first affine coordinate of the second summand\n      @param qy The second affine coordinate of the second summand\n\n      (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\n      **************************************************************************\n      Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\n      on secp256k1, in P²(𝔽ₙ)\n      @return sx \n      @return sy\n      @return sz\n  */\n  function projectiveECAdd(uint256 px, uint256 py, uint256 qx, uint256 qy)\n    internal pure returns(uint256 sx, uint256 sy, uint256 sz) {\n      // See \"Group law for E/K : y^2 = x^3 + ax + b\", in section 3.1.2, p. 80,\n      // \"Guide to Elliptic Curve Cryptography\" by Hankerson, Menezes and Vanstone\n      // We take the equations there for (sx,sy), and homogenize them to\n      // projective coordinates. That way, no inverses are required, here, and we\n      // only need the one inverse in affineECAdd.\n\n      // We only need the \"point addition\" equations from Hankerson et al. Can\n      // skip the \"point doubling\" equations because p1 == p2 is cryptographically\n      // impossible, and require'd not to be the case in linearCombination.\n\n      // Add extra \"projective coordinate\" to the two points\n      (uint256 z1, uint256 z2) = (1, 1);\n\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\n\n      uint256 dx; // Accumulates denominator from sx calculation\n      // sx=((qy-py)/(qx-px))^2-px-qx\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\n\n      uint256 dy; // Accumulates denominator from sy calculation\n      // sy=((qy-py)/(qx-px))(px-sx)-py\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\n\n      if (dx != dy) { // Cross-multiply to put everything over a common denominator\n        sx = mulmod(sx, dy, FIELD_SIZE);\n        sy = mulmod(sy, dx, FIELD_SIZE);\n        sz = mulmod(dx, dy, FIELD_SIZE);\n      } else { // Already over a common denominator, use that for z ordinate\n        sz = dx;\n      }\n    }\n\n  // p1+p2, as affine points on secp256k1.\n  //\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\n  // It is computed off-chain to save gas.\n  //\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\n  // point doubling.\n  function affineECAdd(\n    uint256[2] memory p1, uint256[2] memory p2,\n    uint256 invZ) internal pure returns (uint256[2] memory) {\n    uint256 x;\n    uint256 y;\n    uint256 z;\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \"invZ must be inverse of z\");\n    // Clear the z ordinate of the projective representation by dividing through\n    // by it, to obtain the affine representation\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\n  }\n\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\n  // cryptographically high probability.)\n  function verifyLinearCombinationWithGenerator(\n    uint256 c, uint256[2] memory p, uint256 s, address lcWitness)\n    internal pure returns (bool) {\n      // Rule out ecrecover failure modes which return address 0.\n      require(lcWitness != address(0), \"bad witness\");\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n      // The point corresponding to the address returned by\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\n      // (p[0]⁻¹ mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\n      // See https://crypto.stackexchange.com/a/18106\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\n      return computed == lcWitness;\n    }\n\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\n  // requires cp1Witness != sp2Witness (which is fine for this application,\n  // since it is cryptographically impossible for them to be equal. In the\n  // (cryptographically impossible) case that a prover accidentally derives\n  // a proof with equal c*p1 and s*p2, they should retry with a different\n  // proof nonce.) Assumes that all points are on secp256k1\n  // (which is checked in verifyVRFProof below.)\n  function linearCombination(\n    uint256 c, uint256[2] memory p1, uint256[2] memory cp1Witness,\n    uint256 s, uint256[2] memory p2, uint256[2] memory sp2Witness,\n    uint256 zInv)\n    internal pure returns (uint256[2] memory) {\n      require((cp1Witness[0] - sp2Witness[0]) % FIELD_SIZE != 0,\n              \"points in sum must be distinct\");\n      require(ecmulVerify(p1, c, cp1Witness), \"First multiplication check failed\");\n      require(ecmulVerify(p2, s, sp2Witness), \"Second multiplication check failed\");\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\n    }\n\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\n  uint256 constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\n\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n  // The draft calls (in step 7, via the definition of string_to_int, in\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\n  // first hash without checking that it corresponds to a number less than the\n  // group order, which will lead to a slight bias in the sample.\n  //\n  // TODO(alx): We could save a bit of gas by following the standard here and\n  // using the compressed representation of the points, if we collated the y\n  // parities into a single bytes32.\n  // https://www.pivotaltracker.com/story/show/171120588\n  function scalarFromCurvePoints(\n    uint256[2] memory hash, uint256[2] memory pk, uint256[2] memory gamma,\n    address uWitness, uint256[2] memory v)\n    internal pure returns (uint256 s) {\n      return uint256(\n        keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX,\n                                   hash, pk, gamma, v, uWitness)));\n    }\n\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\n  // and seed. zInv must be the inverse of the third ordinate from\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\n  // section 5.3 of the IETF draft.\n  //\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\n  // (which I could make a uint256 without using any extra space.) Would save\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\n  function verifyVRFProof(\n    uint256[2] memory pk, uint256[2] memory gamma, uint256 c, uint256 s,\n    uint256 seed, address uWitness, uint256[2] memory cGammaWitness,\n    uint256[2] memory sHashWitness, uint256 zInv)\n    internal view {\n      require(isOnCurve(pk), \"public key is not on curve\");\n      require(isOnCurve(gamma), \"gamma is not on curve\");\n      require(isOnCurve(cGammaWitness), \"cGammaWitness is not on curve\");\n      require(isOnCurve(sHashWitness), \"sHashWitness is not on curve\");\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\n      // we use the address of u instead of u itself. Also, here we add the\n      // terms instead of taking the difference, and in the proof consruction in\n      // vrf.GenerateProof, we correspondingly take the difference instead of\n      // taking the sum as they do in step 7 of section 5.1.)\n      require(\n        verifyLinearCombinationWithGenerator(c, pk, s, uWitness),\n        \"addr(c*pk+s*g)≠_uWitness\"\n      );\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\n      uint256[2] memory hash = hashToCurve(pk, seed);\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\n      uint256[2] memory v = linearCombination(\n        c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\n      // Steps 7. and 8. of IETF draft section 5.3\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\n      require(c == derivedC, \"invalid proof\");\n    }\n\n  // Domain-separation tag for the hash used as the final VRF output.\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\n  uint256 constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\n\n  // Length of proof marshaled to bytes array. Shows layout of proof\n  uint public constant PROOF_LENGTH = 64 + // PublicKey (uncompressed format.)\n    64 + // Gamma\n    32 + // C\n    32 + // S\n    32 + // Seed\n    0 + // Dummy entry: The following elements are included for gas efficiency:\n    32 + // uWitness (gets padded to 256 bits, even though it's only 160)\n    64 + // cGammaWitness\n    64 + // sHashWitness\n    32; // zInv  (Leave Output out, because that can be efficiently calculated)\n\n  /* ***************************************************************************\n   * @notice Returns proof's output, if proof is valid. Otherwise reverts\n\n   * @param proof A binary-encoded proof, as output by vrf.Proof.MarshalForSolidityVerifier\n   *\n   * Throws if proof is invalid, otherwise:\n   * @return output i.e., the random output implied by the proof\n   * ***************************************************************************\n   * @dev See the calculation of PROOF_LENGTH for the binary layout of proof.\n   */\n  function randomValueFromVRFProof(bytes memory proof)\n    internal view returns (uint256 output) {\n      require(proof.length == PROOF_LENGTH, \"wrong proof length\");\n\n      uint256[2] memory pk; // parse proof contents into these variables\n      uint256[2] memory gamma;\n      // c, s and seed combined (prevents \"stack too deep\" compilation error)\n      uint256[3] memory cSSeed;\n      address uWitness;\n      uint256[2] memory cGammaWitness;\n      uint256[2] memory sHashWitness;\n      uint256 zInv;\n      (pk, gamma, cSSeed, uWitness, cGammaWitness, sHashWitness, zInv) = abi.decode(\n        proof, (uint256[2], uint256[2], uint256[3], address, uint256[2],\n                uint256[2], uint256));\n      verifyVRFProof(\n        pk,\n        gamma,\n        cSSeed[0], // c\n        cSSeed[1], // s\n        cSSeed[2], // seed\n        uWitness,\n        cGammaWitness,\n        sHashWitness,\n        zInv\n      );\n      output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, gamma)));\n    }\n}\n"},"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./vendor/SafeMathChainlink.sol\";\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n  using SafeMathChainlink for uint256;\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\n    internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee)\n    internal returns (bytes32 requestId)\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash].add(1);\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface immutable internal LINK;\n  address immutable private vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) public {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"},"@chainlink/contracts/src/v0.6/VRFCoordinator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\nimport \"./vendor/SafeMathChainlink.sol\";\n\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/BlockHashStoreInterface.sol\";\n\nimport \"./vendor/Ownable.sol\";\n\nimport \"./VRF.sol\";\nimport \"./VRFRequestIDBase.sol\";\nimport \"./VRFConsumerBase.sol\";\n\n/**\n * @title VRFCoordinator coordinates on-chain verifiable-randomness requests\n * @title with off-chain responses\n */\ncontract VRFCoordinator is VRF, VRFRequestIDBase, Ownable {\n\n  using SafeMathChainlink for uint256;\n\n  LinkTokenInterface internal LINK;\n  BlockHashStoreInterface internal blockHashStore;\n\n  constructor(address _link, address _blockHashStore) public {\n    LINK = LinkTokenInterface(_link);\n    blockHashStore = BlockHashStoreInterface(_blockHashStore);\n  }\n\n  struct Callback { // Tracks an ongoing request\n    address callbackContract; // Requesting contract, which will receive response\n    // Amount of LINK paid at request time. Total LINK = 1e9 * 1e18 < 2^96, so\n    // this representation is adequate, and saves a word of storage when this\n    // field follows the 160-bit callbackContract address.\n    uint96 randomnessFee;\n    // Commitment to seed passed to oracle by this contract, and the number of\n    // the block in which the request appeared. This is the keccak256 of the\n    // concatenation of those values. Storing this commitment saves a word of\n    // storage.\n    bytes32 seedAndBlockNum;\n  }\n\n  struct ServiceAgreement { // Tracks oracle commitments to VRF service\n    address vRFOracle; // Oracle committing to respond with VRF service\n    uint96 fee; // Minimum payment for oracle response. Total LINK=1e9*1e18<2^96\n    bytes32 jobID; // ID of corresponding chainlink job in oracle's DB\n  }\n\n  mapping(bytes32 /* (provingKey, seed) */ => Callback) public callbacks;\n  mapping(bytes32 /* provingKey */ => ServiceAgreement)\n    public serviceAgreements;\n  mapping(address /* oracle */ => uint256 /* LINK balance */)\n    public withdrawableTokens;\n  mapping(bytes32 /* provingKey */ => mapping(address /* consumer */ => uint256))\n    private nonces;\n\n  // The oracle only needs the jobID to look up the VRF, but specifying public\n  // key as well prevents a malicious oracle from inducing VRF outputs from\n  // another oracle by reusing the jobID.\n  event RandomnessRequest(\n    bytes32 keyHash,\n    uint256 seed,\n    bytes32 indexed jobID,\n    address sender,\n    uint256 fee,\n    bytes32 requestID);\n\n  event NewServiceAgreement(bytes32 keyHash, uint256 fee);\n\n  event RandomnessRequestFulfilled(bytes32 requestId, uint256 output);\n\n  /**\n   * @notice Commits calling address to serve randomness\n   * @param _fee minimum LINK payment required to serve randomness\n   * @param _oracle the address of the Chainlink node with the proving key and job\n   * @param _publicProvingKey public key used to prove randomness\n   * @param _jobID ID of the corresponding chainlink job in the oracle's db\n   */\n  function registerProvingKey(\n    uint256 _fee, address _oracle, uint256[2] calldata _publicProvingKey, bytes32 _jobID\n  )\n    external\n    onlyOwner()\n  {\n    bytes32 keyHash = hashOfKey(_publicProvingKey);\n    address oldVRFOracle = serviceAgreements[keyHash].vRFOracle;\n    require(oldVRFOracle == address(0), \"please register a new key\");\n    require(_oracle != address(0), \"_oracle must not be 0x0\");\n    serviceAgreements[keyHash].vRFOracle = _oracle;\n    serviceAgreements[keyHash].jobID = _jobID;\n    // Yes, this revert message doesn't fit in a word\n    require(_fee <= 1e9 ether,\n      \"you can't charge more than all the LINK in the world, greedy\");\n    serviceAgreements[keyHash].fee = uint96(_fee);\n    emit NewServiceAgreement(keyHash, _fee);\n  }\n\n  /**\n   * @notice Called by LINK.transferAndCall, on successful LINK transfer\n   *\n   * @dev To invoke this, use the requestRandomness method in VRFConsumerBase.\n   *\n   * @dev The VRFCoordinator will call back to the calling contract when the\n   * @dev oracle responds, on the method fulfillRandomness. See\n   * @dev VRFConsumerBase.fulfilRandomness for its signature. Your consuming\n   * @dev contract should inherit from VRFConsumerBase, and implement\n   * @dev fulfilRandomness.\n   *\n   * @param _sender address: who sent the LINK (must be a contract)\n   * @param _fee amount of LINK sent\n   * @param _data abi-encoded call to randomnessRequest\n   */\n  function onTokenTransfer(address _sender, uint256 _fee, bytes memory _data)\n    public\n    onlyLINK\n  {\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\n    randomnessRequest(keyHash, seed, _fee, _sender);\n  }\n\n  /**\n   * @notice creates the chainlink request for randomness\n   *\n   * @param _keyHash ID of the VRF public key against which to generate output\n   * @param _consumerSeed Input to the VRF, from which randomness is generated\n   * @param _feePaid Amount of LINK sent with request. Must exceed fee for key\n   * @param _sender Requesting contract; to be called back with VRF output\n   *\n   * @dev _consumerSeed is mixed with key hash, sender address and nonce to\n   * @dev obtain preSeed, which is passed to VRF oracle, which mixes it with the\n   * @dev hash of the block containing this request, to compute the final seed.\n   *\n   * @dev The requestId used to store the request data is constructed from the\n   * @dev preSeed and keyHash.\n   */\n  function randomnessRequest(\n    bytes32 _keyHash,\n    uint256 _consumerSeed,\n    uint256 _feePaid,\n    address _sender\n  )\n    internal\n    sufficientLINK(_feePaid, _keyHash)\n  {\n    uint256 nonce = nonces[_keyHash][_sender];\n    uint256 preSeed = makeVRFInputSeed(_keyHash, _consumerSeed, _sender, nonce);\n    bytes32 requestId = makeRequestId(_keyHash, preSeed);\n    // Cryptographically guaranteed by preSeed including an increasing nonce\n    assert(callbacks[requestId].callbackContract == address(0));\n    callbacks[requestId].callbackContract = _sender;\n    assert(_feePaid < 1e27); // Total LINK fits in uint96\n    callbacks[requestId].randomnessFee = uint96(_feePaid);\n    callbacks[requestId].seedAndBlockNum = keccak256(abi.encodePacked(\n      preSeed, block.number));\n    emit RandomnessRequest(_keyHash, preSeed, serviceAgreements[_keyHash].jobID,\n      _sender, _feePaid, requestId);\n    nonces[_keyHash][_sender] = nonces[_keyHash][_sender].add(1);\n  }\n\n  // Offsets into fulfillRandomnessRequest's _proof of various values\n  //\n  // Public key. Skips byte array's length prefix.\n  uint256 public constant PUBLIC_KEY_OFFSET = 0x20;\n  // Seed is 7th word in proof, plus word for length, (6+1)*0x20=0xe0\n  uint256 public constant PRESEED_OFFSET = 0xe0;\n\n  /**\n   * @notice Called by the chainlink node to fulfill requests\n   *\n   * @param _proof the proof of randomness. Actual random output built from this\n   *\n   * @dev The structure of _proof corresponds to vrf.MarshaledOnChainResponse,\n   * @dev in the node source code. I.e., it is a vrf.MarshaledProof with the\n   * @dev seed replaced by the preSeed, followed by the hash of the requesting\n   * @dev block.\n   */\n  function fulfillRandomnessRequest(bytes memory _proof) public {\n    (bytes32 currentKeyHash, Callback memory callback, bytes32 requestId,\n     uint256 randomness) = getRandomnessFromProof(_proof);\n\n    // Pay oracle\n    address oadd = serviceAgreements[currentKeyHash].vRFOracle;\n    withdrawableTokens[oadd] = withdrawableTokens[oadd].add(\n      callback.randomnessFee);\n\n    // Forget request. Must precede callback (prevents reentrancy)\n    delete callbacks[requestId];\n    callBackWithRandomness(requestId, randomness, callback.callbackContract);\n\n    emit RandomnessRequestFulfilled(requestId, randomness);\n  }\n\n  function callBackWithRandomness(bytes32 requestId, uint256 randomness,\n    address consumerContract) internal {\n    // Dummy variable; allows access to method selector in next line. See\n    // https://github.com/ethereum/solidity/issues/3506#issuecomment-553727797\n    VRFConsumerBase v;\n    bytes memory resp = abi.encodeWithSelector(\n      v.rawFulfillRandomness.selector, requestId, randomness);\n    // The bound b here comes from https://eips.ethereum.org/EIPS/eip-150. The\n    // actual gas available to the consuming contract will be b-floor(b/64).\n    // This is chosen to leave the consuming contract ~200k gas, after the cost\n    // of the call itself.\n    uint256 b = 206000;\n    require(gasleft() >= b, \"not enough gas for consumer\");\n    // A low-level call is necessary, here, because we don't want the consuming\n    // contract to be able to revert this execution, and thus deny the oracle\n    // payment for a valid randomness response. This also necessitates the above\n    // check on the gasleft, as otherwise there would be no indication if the\n    // callback method ran out of gas.\n    //\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success,) = consumerContract.call(resp);\n    // Avoid unused-local-variable warning. (success is only present to prevent\n    // a warning that the return value of consumerContract.call is unused.)\n    (success);\n  }\n\n  function getRandomnessFromProof(bytes memory _proof)\n    internal view returns (bytes32 currentKeyHash, Callback memory callback,\n      bytes32 requestId, uint256 randomness) {\n    // blockNum follows proof, which follows length word (only direct-number\n    // constants are allowed in assembly, so have to compute this in code)\n    uint256 BLOCKNUM_OFFSET = 0x20 + PROOF_LENGTH;\n    // _proof.length skips the initial length word, so not including the\n    // blocknum in this length check balances out.\n    require(_proof.length == BLOCKNUM_OFFSET, \"wrong proof length\");\n    uint256[2] memory publicKey;\n    uint256 preSeed;\n    uint256 blockNum;\n    assembly { // solhint-disable-line no-inline-assembly\n      publicKey := add(_proof, PUBLIC_KEY_OFFSET)\n      preSeed := mload(add(_proof, PRESEED_OFFSET))\n      blockNum := mload(add(_proof, BLOCKNUM_OFFSET))\n    }\n    currentKeyHash = hashOfKey(publicKey);\n    requestId = makeRequestId(currentKeyHash, preSeed);\n    callback = callbacks[requestId];\n    require(callback.callbackContract != address(0), \"no corresponding request\");\n    require(callback.seedAndBlockNum == keccak256(abi.encodePacked(preSeed,\n      blockNum)), \"wrong preSeed or block num\");\n\n    bytes32 blockHash = blockhash(blockNum);\n    if (blockHash == bytes32(0)) {\n      blockHash = blockHashStore.getBlockhash(blockNum);\n      require(blockHash != bytes32(0), \"please prove blockhash\");\n    }\n    // The seed actually used by the VRF machinery, mixing in the blockhash\n    uint256 actualSeed = uint256(keccak256(abi.encodePacked(preSeed, blockHash)));\n    // solhint-disable-next-line no-inline-assembly\n    assembly { // Construct the actual proof from the remains of _proof\n      mstore(add(_proof, PRESEED_OFFSET), actualSeed)\n      mstore(_proof, PROOF_LENGTH)\n    }\n    randomness = VRF.randomValueFromVRFProof(_proof); // Reverts on failure\n  }\n\n  /**\n   * @dev Allows the oracle operator to withdraw their LINK\n   * @param _recipient is the address the funds will be sent to\n   * @param _amount is the amount of LINK transferred from the Coordinator contract\n   */\n  function withdraw(address _recipient, uint256 _amount)\n    external\n    hasAvailableFunds(_amount)\n  {\n    withdrawableTokens[msg.sender] = withdrawableTokens[msg.sender].sub(_amount);\n    assert(LINK.transfer(_recipient, _amount));\n  }\n\n  /**\n   * @notice Returns the serviceAgreements key associated with this public key\n   * @param _publicKey the key to return the address for\n   */\n  function hashOfKey(uint256[2] memory _publicKey) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_publicKey));\n  }\n\n  /**\n   * @dev Reverts if amount is not at least what was agreed upon in the service agreement\n   * @param _feePaid The payment for the request\n   * @param _keyHash The key which the request is for\n   */\n  modifier sufficientLINK(uint256 _feePaid, bytes32 _keyHash) {\n    require(_feePaid >= serviceAgreements[_keyHash].fee, \"Below agreed payment\");\n    _;\n  }\n\n/**\n   * @dev Reverts if not sent from the LINK token\n   */\n  modifier onlyLINK() {\n    require(msg.sender == address(LINK), \"Must use LINK token\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if amount requested is greater than withdrawable balance\n   * @param _amount The given amount to compare to `withdrawableTokens`\n   */\n  modifier hasAvailableFunds(uint256 _amount) {\n    require(withdrawableTokens[msg.sender] >= _amount, \"can't withdraw more than balance\");\n    _;\n  }\n\n}\n"},"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\n    address _requester, uint256 _nonce)\n    internal pure returns (uint256)\n  {\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"},"contracts/test/VrfCoordinatorV2Mock.sol":{"content":"// SPDX-Licence-Identifier: MIT\n\npragma solidity >= 0.6.0 < 0.9.0;\n\nimport \"@chainlink/contracts/src/v0.6/VRFCoordinator.sol\";"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.6/VRF.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.6/VRF.sol","exportedSymbols":{"VRF":[1144]},"id":1145,"nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.6",".6"],"nodeType":"PragmaDirective","src":"32:22:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"56:7112:0","text":"****************************************************************************\n@notice Verification of verifiable-random-function (VRF) proofs, following\n@notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n@notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\n@dev Bibliographic references:\n@dev Goldberg, et al., \"Verifiable Random Functions (VRFs)\", Internet Draft\n@dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\n@dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\n@dev Papadopoulos, et al., \"Making NSEC5 Practical for DNSSEC\", Cryptology\n@dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\n****************************************************************************\n@dev USAGE\n@dev The main entry point is randomValueFromVRFProof. See its docstring.\n****************************************************************************\n@dev PURPOSE\n@dev Reggie the Random Oracle (not his real job) wants to provide randomness\n@dev to Vera the verifier in such a way that Vera can be sure he's not\n@dev making his output up to suit himself. Reggie provides Vera a public key\n@dev to which he knows the secret key. Each time Vera provides a seed to\n@dev Reggie, he gives back a value which is computed completely\n@dev deterministically from the seed and the secret key.\n@dev Reggie provides a proof by which Vera can verify that the output was\n@dev correctly computed once Reggie tells it to her, but without that proof,\n@dev the output is computationally indistinguishable to her from a uniform\n@dev random sample from the output space.\n@dev The purpose of this contract is to perform that verification.\n****************************************************************************\n@dev DESIGN NOTES\n@dev The VRF algorithm verified here satisfies the full unqiqueness, full\n@dev collision resistance, and full pseudorandomness security properties.\n@dev See \"SECURITY PROPERTIES\" below, and\n@dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\n@dev An elliptic curve point is generally represented in the solidity code\n@dev as a uint256[2], corresponding to its affine coordinates in\n@dev GF(FIELD_SIZE).\n@dev For the sake of efficiency, this implementation deviates from the spec\n@dev in some minor ways:\n@dev - Keccak hash rather than the SHA256 hash recommended in\n@dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n@dev   Keccak costs much less gas on the EVM, and provides similar security.\n@dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\n@dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n@dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\n@dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\n@dev   the EVM, this is slightly more efficient than the recommendation in\n@dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n@dev   step 5, to concatenate with a nonce then hash, and rehash with the\n@dev   nonce updated until a valid x-ordinate is found.\n@dev - hashToCurve does not include a cipher version string or the byte 0x1\n@dev   in the hash message, as recommended in step 5.B of the draft\n@dev   standard. They are unnecessary here because no variation in the\n@dev   cipher suite is allowed.\n@dev - Similarly, the hash input in scalarFromCurvePoints does not include a\n@dev   commitment to the cipher suite, either, which differs from step 2 of\n@dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n@dev   . Also, the hash input is the concatenation of the uncompressed\n@dev   points, not the compressed points as recommended in step 3.\n@dev - In the calculation of the challenge value \"c\", the \"u\" value (i.e.\n@dev   the value computed by Reggie as the nonce times the secp256k1\n@dev   generator point, see steps 5 and 7 of\n@dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n@dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\n@dev   keccak hash of the original u. This is because we only verify the\n@dev   calculation of u up to its address, by abusing ECRECOVER.\n****************************************************************************\n@dev   SECURITY PROPERTIES\n@dev Here are the security properties for this VRF:\n@dev Full uniqueness: For any seed and valid VRF public key, there is\n@dev   exactly one VRF output which can be proved to come from that seed, in\n@dev   the sense that the proof will pass verifyVRFProof.\n@dev Full collision resistance: It's cryptographically infeasible to find\n@dev   two seeds with same VRF output from a fixed, valid VRF key\n@dev Full pseudorandomness: Absent the proofs that the VRF outputs are\n@dev   derived from a given seed, the outputs are computationally\n@dev   indistinguishable from randomness.\n@dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\n@dev for these properties.\n@dev For secp256k1, the key validation described in section\n@dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\n@dev is unnecessary, because secp256k1 has cofactor 1, and the\n@dev representation of the public key used here (affine x- and y-ordinates\n@dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\n@dev the point at infinity.\n****************************************************************************\n@dev OTHER SECURITY CONSIDERATIONS\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\n@dev of work in hashToCurve, by requiring extra rounds of hashing and\n@dev checking whether that's yielded the x ordinate of a secp256k1 point.\n@dev However, under the Random Oracle Model the probability of choosing a\n@dev point which forces n extra rounds in hashToCurve is 2⁻ⁿ. The base cost\n@dev for calling hashToCurve is about 25,000 gas, and each round of checking\n@dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\n@dev which hashToCurve would cost more than 2,017,000 gas, one would have to\n@dev try, in expectation, about 2¹²⁸ seeds, which is infeasible for any\n@dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\n@dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\n@dev this means it is infeasible for an adversary to prevent correct\n@dev operation of this contract by choosing an adverse seed.\n@dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\n@dev hashToCurve.)\n@dev It may be possible to make a secure constant-time hashToCurve function.\n@dev See notes in hashToCurve docstring."},"fullyImplemented":true,"id":1144,"linearizedBaseContracts":[1144],"name":"VRF","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5,"mutability":"constant","name":"GROUP_ORDER","nodeType":"VariableDeclaration","overrides":null,"scope":1144,"src":"7266:186:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3,"name":"uint256","nodeType":"ElementaryTypeName","src":"7266:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"307846464646464646464646464646464646464646464646464646464646464646454241414544434536414634384130334242464432354538434430333634313431","id":4,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7386:66:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195423570985008687907852837564279074904382605163141518161494337_by_1","typeString":"int_const 1157...(70 digits omitted)...4337"},"value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"},"visibility":"private"},{"constant":true,"id":8,"mutability":"constant","name":"FIELD_SIZE","nodeType":"VariableDeclaration","overrides":null,"scope":1144,"src":"7534:152:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6,"name":"uint256","nodeType":"ElementaryTypeName","src":"7534:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"307846464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646454646464646433246","id":7,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7620:66:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195423570985008687907853269984665640564039457584007908834671663_by_1","typeString":"int_const 1157...(70 digits omitted)...1663"},"value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"},"visibility":"private"},{"constant":true,"id":11,"mutability":"constant","name":"WORD_LENGTH_BYTES","nodeType":"VariableDeclaration","overrides":null,"scope":1144,"src":"7690:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9,"name":"uint256","nodeType":"ElementaryTypeName","src":"7690:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"30783230","id":10,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7735:4:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"private"},{"body":{"id":87,"nodeType":"Block","src":"7961:970:0","statements":[{"assignments":[21],"declarations":[{"constant":false,"id":21,"mutability":"mutable","name":"callResult","nodeType":"VariableDeclaration","overrides":null,"scope":87,"src":"7969:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"7969:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":22,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"7969:18:0"},{"assignments":[28],"declarations":[{"constant":false,"id":28,"mutability":"mutable","name":"bigModExpContractInputs","nodeType":"VariableDeclaration","overrides":null,"scope":87,"src":"7995:41:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6]"},"typeName":{"baseType":{"id":26,"name":"uint256","nodeType":"ElementaryTypeName","src":"7995:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":27,"length":{"argumentTypes":null,"hexValue":"36","id":25,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8003:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"nodeType":"ArrayTypeName","src":"7995:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_storage_ptr","typeString":"uint256[6]"}},"value":null,"visibility":"internal"}],"id":29,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"7995:41:0"},{"expression":{"argumentTypes":null,"id":34,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":30,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"8044:23:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":32,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":31,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8068:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8044:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":33,"name":"WORD_LENGTH_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"8073:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8044:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":35,"nodeType":"ExpressionStatement","src":"8044:46:0"},{"expression":{"argumentTypes":null,"id":40,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":36,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"8117:23:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":38,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":37,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8141:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8117:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":39,"name":"WORD_LENGTH_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"8146:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8117:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":41,"nodeType":"ExpressionStatement","src":"8117:46:0"},{"expression":{"argumentTypes":null,"id":46,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":42,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"8194:23:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":44,"indexExpression":{"argumentTypes":null,"hexValue":"32","id":43,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8218:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8194:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":45,"name":"WORD_LENGTH_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"8223:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8194:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":47,"nodeType":"ExpressionStatement","src":"8194:46:0"},{"expression":{"argumentTypes":null,"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":48,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"8270:23:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":50,"indexExpression":{"argumentTypes":null,"hexValue":"33","id":49,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8294:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8270:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":51,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"8299:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8270:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":53,"nodeType":"ExpressionStatement","src":"8270:33:0"},{"expression":{"argumentTypes":null,"id":58,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":54,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"8311:23:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":56,"indexExpression":{"argumentTypes":null,"hexValue":"34","id":55,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8335:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8311:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":57,"name":"exponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"8340:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8311:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":59,"nodeType":"ExpressionStatement","src":"8311:37:0"},{"expression":{"argumentTypes":null,"id":64,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":60,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"8356:23:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":62,"indexExpression":{"argumentTypes":null,"hexValue":"35","id":61,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8380:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8356:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":63,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"8385:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8356:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":65,"nodeType":"ExpressionStatement","src":"8356:39:0"},{"assignments":[71],"declarations":[{"constant":false,"id":71,"mutability":"mutable","name":"output","nodeType":"VariableDeclaration","overrides":null,"scope":87,"src":"8403:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$1_memory_ptr","typeString":"uint256[1]"},"typeName":{"baseType":{"id":69,"name":"uint256","nodeType":"ElementaryTypeName","src":"8403:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":70,"length":{"argumentTypes":null,"hexValue":"31","id":68,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8411:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"ArrayTypeName","src":"8403:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$1_storage_ptr","typeString":"uint256[1]"}},"value":null,"visibility":"internal"}],"id":72,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"8403:24:0"},{"AST":{"nodeType":"YulBlock","src":"8444:398:0","statements":[{"nodeType":"YulAssignment","src":"8495:339:0","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8533:1:0","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8529:3:0"},"nodeType":"YulFunctionCall","src":"8529:6:0"},{"kind":"number","nodeType":"YulLiteral","src":"8585:4:0","type":"","value":"0x05"},{"name":"bigModExpContractInputs","nodeType":"YulIdentifier","src":"8649:23:0"},{"kind":"number","nodeType":"YulLiteral","src":"8682:4:0","type":"","value":"0xc0"},{"name":"output","nodeType":"YulIdentifier","src":"8757:6:0"},{"kind":"number","nodeType":"YulLiteral","src":"8773:4:0","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"8509:10:0"},"nodeType":"YulFunctionCall","src":"8509:325:0"},"variableNames":[{"name":"callResult","nodeType":"YulIdentifier","src":"8495:10:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":28,"isOffset":false,"isSlot":false,"src":"8649:23:0","valueSize":1},{"declaration":21,"isOffset":false,"isSlot":false,"src":"8495:10:0","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"8757:6:0","valueSize":1}],"id":73,"nodeType":"InlineAssembly","src":"8435:407:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":74,"name":"callResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8853:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":75,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8867:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8853:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":82,"nodeType":"IfStatement","src":"8849:52:0","trueBody":{"id":81,"nodeType":"Block","src":"8870:31:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"6269674d6f64457870206661696c75726521","id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8878:20:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_4bd695d9be776d24ba6aaa6ea48a189f388adfd8a5e6a1df7bd6471290ea4e5f","typeString":"literal_string \"bigModExp failure!\""},"value":"bigModExp failure!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4bd695d9be776d24ba6aaa6ea48a189f388adfd8a5e6a1df7bd6471290ea4e5f","typeString":"literal_string \"bigModExp failure!\""}],"id":77,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8871:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8871:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"8871:28:0"}]}},{"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":83,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"8915:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$1_memory_ptr","typeString":"uint256[1] memory"}},"id":85,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":84,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8922:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8915:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19,"id":86,"nodeType":"Return","src":"8908:16:0"}]},"documentation":null,"id":88,"implemented":true,"kind":"function","modifiers":[],"name":"bigModExp","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":88,"src":"7878:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12,"name":"uint256","nodeType":"ElementaryTypeName","src":"7878:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":15,"mutability":"mutable","name":"exponent","nodeType":"VariableDeclaration","overrides":null,"scope":88,"src":"7892:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"7892:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7877:32:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"exponentiation","nodeType":"VariableDeclaration","overrides":null,"scope":88,"src":"7937:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"7937:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7936:24:0"},"scope":1144,"src":"7859:1072:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":true,"id":96,"mutability":"constant","name":"SQRT_POWER","nodeType":"VariableDeclaration","overrides":null,"scope":1144,"src":"9106:59:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":89,"name":"uint256","nodeType":"ElementaryTypeName","src":"9106:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":90,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"9145:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"31","id":91,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9158:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9145:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":93,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9144:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"argumentTypes":null,"hexValue":"32","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9164:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9144:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":108,"nodeType":"Block","src":"9293:42:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":104,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"9316:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":105,"name":"SQRT_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"9319:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":103,"name":"bigModExp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"9306:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9306:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":102,"id":107,"nodeType":"Return","src":"9299:31:0"}]},"documentation":null,"id":109,"implemented":true,"kind":"function","modifiers":[],"name":"squareRoot","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","overrides":null,"scope":109,"src":"9250:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":97,"name":"uint256","nodeType":"ElementaryTypeName","src":"9250:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9249:11:0"},"returnParameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":109,"src":"9284:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":100,"name":"uint256","nodeType":"ElementaryTypeName","src":"9284:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9283:9:0"},"scope":1144,"src":"9230:105:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":134,"nodeType":"Block","src":"9456:198:0","statements":[{"assignments":[117],"declarations":[{"constant":false,"id":117,"mutability":"mutable","name":"xCubed","nodeType":"VariableDeclaration","overrides":null,"scope":134,"src":"9543:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":116,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":127,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":119,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"9567:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":121,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"9577:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":122,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"9580:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":123,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"9583:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":120,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"9570:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9570:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":125,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"9596:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":118,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"9560:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9560:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:64:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":129,"name":"xCubed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"9627:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"37","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9635:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"argumentTypes":null,"id":131,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"9638:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":128,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"9620:6:0","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9620:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":115,"id":133,"nodeType":"Return","src":"9613:36:0"}]},"documentation":null,"id":135,"implemented":true,"kind":"function","modifiers":[],"name":"ySquared","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","overrides":null,"scope":135,"src":"9413:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":110,"name":"uint256","nodeType":"ElementaryTypeName","src":"9413:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9412:11:0"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":135,"src":"9447:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":113,"name":"uint256","nodeType":"ElementaryTypeName","src":"9447:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9446:9:0"},"scope":1144,"src":"9395:259:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":160,"nodeType":"Block","src":"9759:66:0","statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":145,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"9781:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":147,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9783:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9781:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":144,"name":"ySquared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":135,"src":"9772:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9772:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":150,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"9797:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":152,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9799:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9797:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":153,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"9803:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":155,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9805:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9803:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":156,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"9809:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":149,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"9790:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9790:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9772:48:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":143,"id":159,"nodeType":"Return","src":"9765:55:0"}]},"documentation":null,"id":161,"implemented":true,"kind":"function","modifiers":[],"name":"isOnCurve","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"p","nodeType":"VariableDeclaration","overrides":null,"scope":161,"src":"9709:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"9709:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":138,"length":{"argumentTypes":null,"hexValue":"32","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9717:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"9709:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"src":"9708:21:0"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":142,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":161,"src":"9753:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":141,"name":"bool","nodeType":"ElementaryTypeName","src":"9753:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"9752:6:0"},"scope":1144,"src":"9690:135:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":194,"nodeType":"Block","src":"9950:324:0","statements":[{"expression":{"argumentTypes":null,"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":168,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"9956:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":172,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"9979:1:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":171,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9969:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9969:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9961:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9961:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":176,"nodeType":"ExpressionStatement","src":"9956:26:0"},{"body":{"id":192,"nodeType":"Block","src":"10210:60:0","statements":[{"expression":{"argumentTypes":null,"id":190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":180,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"10218:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":186,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"10258:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":184,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10241:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10241:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10241:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":183,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10231:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10231:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10223:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"10223:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10223:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10218:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":191,"nodeType":"ExpressionStatement","src":"10218:45:0"}]},"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":177,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"10192:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":178,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"10198:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10192:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":193,"nodeType":"WhileStatement","src":"10185:85:0"}]},"documentation":null,"id":195,"implemented":true,"kind":"function","modifiers":[],"name":"fieldHash","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":195,"src":"9899:14:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":162,"name":"bytes","nodeType":"ElementaryTypeName","src":"9899:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"9898:16:0"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"x_","nodeType":"VariableDeclaration","overrides":null,"scope":195,"src":"9938:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint256","nodeType":"ElementaryTypeName","src":"9938:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9937:12:0"},"scope":1144,"src":"9880:394:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":243,"nodeType":"Block","src":"10788:144:0","statements":[{"expression":{"argumentTypes":null,"id":210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":204,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"10796:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":206,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10798:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10796:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":208,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"10813:1:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":207,"name":"fieldHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"10803:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256)"}},"id":209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10803:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10796:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":211,"nodeType":"ExpressionStatement","src":"10796:19:0"},{"expression":{"argumentTypes":null,"id":222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":212,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"10823:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":214,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10825:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10823:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":217,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"10850:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":219,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10852:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10850:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":216,"name":"ySquared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":135,"src":"10841:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10841:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":215,"name":"squareRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"10830:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10830:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10823:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":223,"nodeType":"ExpressionStatement","src":"10823:33:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":224,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"10868:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":226,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10870:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10868:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"hexValue":"32","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10875:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10868:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"31","id":229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10880:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10868:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":242,"nodeType":"IfStatement","src":"10864:62:0","trueBody":{"id":241,"nodeType":"Block","src":"10883:43:0","statements":[{"expression":{"argumentTypes":null,"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":231,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"10893:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":233,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10895:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10893:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":234,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"10900:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":235,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"10913:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":237,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10915:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10913:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10900:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10893:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":240,"nodeType":"ExpressionStatement","src":"10893:24:0"}]}}]},"documentation":null,"id":244,"implemented":true,"kind":"function","modifiers":[],"name":"newCandidateSecp256k1Point","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":197,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":244,"src":"10724:14:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":196,"name":"bytes","nodeType":"ElementaryTypeName","src":"10724:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"10723:16:0"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"p","nodeType":"VariableDeclaration","overrides":null,"scope":244,"src":"10767:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"10767:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":201,"length":{"argumentTypes":null,"hexValue":"32","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10775:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"10767:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"src":"10766:21:0"},"scope":1144,"src":"10688:244:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":true,"id":247,"mutability":"constant","name":"HASH_TO_CURVE_HASH_PREFIX","nodeType":"VariableDeclaration","overrides":null,"scope":1144,"src":"11045:46:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":245,"name":"uint256","nodeType":"ElementaryTypeName","src":"11045:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"31","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"body":{"id":288,"nodeType":"Block","src":"11971:262:0","statements":[{"expression":{"argumentTypes":null,"id":269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":260,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"11979:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":264,"name":"HASH_TO_CURVE_HASH_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"12028:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":265,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"12110:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":266,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"12114:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":262,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"12011:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12011:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12011:109:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":261,"name":"newCandidateSecp256k1Point","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"11984:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (bytes memory) view returns (uint256[2] memory)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11984:137:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"src":"11979:142:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":270,"nodeType":"ExpressionStatement","src":"11979:142:0"},{"body":{"id":286,"nodeType":"Block","src":"12152:75:0","statements":[{"expression":{"argumentTypes":null,"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":275,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"12162:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":279,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"12211:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":281,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12214:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12211:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":277,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"12194:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12194:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12194:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":276,"name":"newCandidateSecp256k1Point","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"12167:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (bytes memory) view returns (uint256[2] memory)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12167:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"src":"12162:56:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":285,"nodeType":"ExpressionStatement","src":"12162:56:0"}]},"condition":{"argumentTypes":null,"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12136:14:0","subExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":272,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"12147:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":271,"name":"isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"12137:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12137:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":287,"nodeType":"WhileStatement","src":"12129:98:0"}]},"documentation":null,"id":289,"implemented":true,"kind":"function","modifiers":[],"name":"hashToCurve","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"pk","nodeType":"VariableDeclaration","overrides":null,"scope":289,"src":"11885:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"11885:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":250,"length":{"argumentTypes":null,"hexValue":"32","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11893:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"11885:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"input","nodeType":"VariableDeclaration","overrides":null,"scope":289,"src":"11907:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":252,"name":"uint256","nodeType":"ElementaryTypeName","src":"11907:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11884:37:0"},"returnParameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":258,"mutability":"mutable","name":"rv","nodeType":"VariableDeclaration","overrides":null,"scope":289,"src":"11949:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":255,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":257,"length":{"argumentTypes":null,"hexValue":"32","id":256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"11949:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"src":"11948:22:0"},"scope":1144,"src":"11864:369:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":376,"nodeType":"Block","src":"12864:839:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":306,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"12878:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12888:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12878:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":305,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12870:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12870:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":310,"nodeType":"ExpressionStatement","src":"12870:20:0"},{"assignments":[312],"declarations":[{"constant":false,"id":312,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","overrides":null,"scope":376,"src":"12935:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":311,"name":"uint256","nodeType":"ElementaryTypeName","src":"12935:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":316,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":313,"name":"multiplicand","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"12947:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":315,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12960:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12947:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12935:27:0"},{"assignments":[318],"declarations":[{"constant":false,"id":318,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":376,"src":"12998:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":317,"name":"uint8","nodeType":"ElementaryTypeName","src":"12998:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"id":329,"initialValue":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":319,"name":"multiplicand","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"13008:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":321,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13021:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13008:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"hexValue":"32","id":322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13026:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13008:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13031:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13008:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"hexValue":"3238","id":327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13040:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13008:34:0","trueExpression":{"argumentTypes":null,"hexValue":"3237","id":326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13035:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"12998:44:0"},{"assignments":[331],"declarations":[{"constant":false,"id":331,"mutability":"mutable","name":"scalarTimesX","nodeType":"VariableDeclaration","overrides":null,"scope":376,"src":"13391:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13391:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":340,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":335,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"13429:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":336,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"13437:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":337,"name":"GROUP_ORDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"13440:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":334,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"13422:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13422:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":333,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13414:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":332,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13414:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13414:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"13391:62:0"},{"assignments":[342],"declarations":[{"constant":false,"id":342,"mutability":"mutable","name":"actual","nodeType":"VariableDeclaration","overrides":null,"scope":376,"src":"13459:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":341,"name":"address","nodeType":"ElementaryTypeName","src":"13459:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":355,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13494:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13486:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13486:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13486:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":348,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"13498:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":351,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"13509:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13501:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13501:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13501:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":353,"name":"scalarTimesX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"13513:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":343,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"13476:9:0","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13476:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13459:67:0"},{"assignments":[357],"declarations":[{"constant":false,"id":357,"mutability":"mutable","name":"expected","nodeType":"VariableDeclaration","overrides":null,"scope":376,"src":"13592:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":356,"name":"address","nodeType":"ElementaryTypeName","src":"13592:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":370,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":365,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"13654:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"argumentTypes":null,"id":363,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"13637:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"13637:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13637:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":362,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"13627:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13627:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13619:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":360,"name":"uint256","nodeType":"ElementaryTypeName","src":"13619:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13619:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13611:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":358,"name":"address","nodeType":"ElementaryTypeName","src":"13611:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13611:54:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"13592:73:0"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":371,"name":"actual","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"13679:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":372,"name":"expected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"13689:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13679:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":374,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13678:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":304,"id":375,"nodeType":"Return","src":"13671:27:0"}]},"documentation":{"id":290,"nodeType":"StructuredDocumentation","src":"12237:485:0","text":"*********************************************************************\n@notice Check that product==scalar*multiplicand\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\n   * @param multiplicand: secp256k1 point\n@param scalar: non-zero GF(GROUP_ORDER) scalar\n@param product: secp256k1 expected to be multiplier * multiplicand\n@return verifies true iff product==scalar*multiplicand, with cryptographically high probability"},"id":377,"implemented":true,"kind":"function","modifiers":[],"name":"ecmulVerify","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"multiplicand","nodeType":"VariableDeclaration","overrides":null,"scope":377,"src":"12746:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":291,"name":"uint256","nodeType":"ElementaryTypeName","src":"12746:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":293,"length":{"argumentTypes":null,"hexValue":"32","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12754:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"12746:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"scalar","nodeType":"VariableDeclaration","overrides":null,"scope":377,"src":"12778:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"12778:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":300,"mutability":"mutable","name":"product","nodeType":"VariableDeclaration","overrides":null,"scope":377,"src":"12798:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":299,"length":{"argumentTypes":null,"hexValue":"32","id":298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12806:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"12798:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"src":"12745:79:0"},"returnParameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"mutability":"mutable","name":"verifies","nodeType":"VariableDeclaration","overrides":null,"scope":377,"src":"12847:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":302,"name":"bool","nodeType":"ElementaryTypeName","src":"12847:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"12846:15:0"},"scope":1144,"src":"12725:978:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":426,"nodeType":"Block","src":"13914:197:0","statements":[{"assignments":[393],"declarations":[{"constant":false,"id":393,"mutability":"mutable","name":"num1","nodeType":"VariableDeclaration","overrides":null,"scope":426,"src":"13922:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":392,"name":"uint256","nodeType":"ElementaryTypeName","src":"13922:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":399,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":395,"name":"z2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"13944:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":396,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"13948:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":397,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"13952:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":394,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"13937:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13937:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13922:41:0"},{"assignments":[401],"declarations":[{"constant":false,"id":401,"mutability":"mutable","name":"num2","nodeType":"VariableDeclaration","overrides":null,"scope":426,"src":"13971:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":400,"name":"uint256","nodeType":"ElementaryTypeName","src":"13971:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":409,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":403,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"13993:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":404,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"14006:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13993:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":406,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"14010:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":407,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"14014:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":402,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"13986:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13986:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13971:54:0"},{"expression":{"argumentTypes":null,"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":410,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"14034:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":411,"name":"z3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"14038:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":412,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14033:8:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":414,"name":"num1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"14052:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":415,"name":"num2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"14058:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":416,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"14064:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":413,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"14045:6:0","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14045:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":419,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"14084:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":420,"name":"z2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"14088:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":421,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"14092:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":418,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"14077:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14077:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":423,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14044:60:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"14033:71:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":425,"nodeType":"ExpressionStatement","src":"14033:71:0"}]},"documentation":null,"id":427,"implemented":true,"kind":"function","modifiers":[],"name":"projectiveSub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"x1","nodeType":"VariableDeclaration","overrides":null,"scope":427,"src":"13816:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":378,"name":"uint256","nodeType":"ElementaryTypeName","src":"13816:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"z1","nodeType":"VariableDeclaration","overrides":null,"scope":427,"src":"13828:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":380,"name":"uint256","nodeType":"ElementaryTypeName","src":"13828:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"x2","nodeType":"VariableDeclaration","overrides":null,"scope":427,"src":"13840:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":382,"name":"uint256","nodeType":"ElementaryTypeName","src":"13840:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"z2","nodeType":"VariableDeclaration","overrides":null,"scope":427,"src":"13852:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":384,"name":"uint256","nodeType":"ElementaryTypeName","src":"13852:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"13815:48:0"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"x3","nodeType":"VariableDeclaration","overrides":null,"scope":427,"src":"13890:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":387,"name":"uint256","nodeType":"ElementaryTypeName","src":"13890:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"z3","nodeType":"VariableDeclaration","overrides":null,"scope":427,"src":"13902:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":389,"name":"uint256","nodeType":"ElementaryTypeName","src":"13902:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"13889:24:0"},"scope":1144,"src":"13793:318:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":458,"nodeType":"Block","src":"14318:82:0","statements":[{"expression":{"argumentTypes":null,"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":442,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"14327:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":443,"name":"z3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"14331:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":444,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14326:8:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":446,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"14345:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":447,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"14349:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":448,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"14353:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":445,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"14338:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14338:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":451,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"14373:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":452,"name":"z2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"14377:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":453,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"14381:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":450,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"14366:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14366:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":455,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14337:56:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"14326:67:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"14326:67:0"}]},"documentation":null,"id":459,"implemented":true,"kind":"function","modifiers":[],"name":"projectiveMul","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"x1","nodeType":"VariableDeclaration","overrides":null,"scope":459,"src":"14220:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"14220:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":431,"mutability":"mutable","name":"z1","nodeType":"VariableDeclaration","overrides":null,"scope":459,"src":"14232:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":430,"name":"uint256","nodeType":"ElementaryTypeName","src":"14232:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"x2","nodeType":"VariableDeclaration","overrides":null,"scope":459,"src":"14244:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"14244:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":435,"mutability":"mutable","name":"z2","nodeType":"VariableDeclaration","overrides":null,"scope":459,"src":"14256:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":434,"name":"uint256","nodeType":"ElementaryTypeName","src":"14256:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"14219:48:0"},"returnParameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"x3","nodeType":"VariableDeclaration","overrides":null,"scope":459,"src":"14294:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":437,"name":"uint256","nodeType":"ElementaryTypeName","src":"14294:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"z3","nodeType":"VariableDeclaration","overrides":null,"scope":459,"src":"14306:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":439,"name":"uint256","nodeType":"ElementaryTypeName","src":"14306:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"14293:24:0"},"scope":1144,"src":"14197:203:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":611,"nodeType":"Block","src":"16136:1861:0","statements":[{"assignments":[478,480],"declarations":[{"constant":false,"id":478,"mutability":"mutable","name":"z1","nodeType":"VariableDeclaration","overrides":null,"scope":611,"src":"16815:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":477,"name":"uint256","nodeType":"ElementaryTypeName","src":"16815:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"z2","nodeType":"VariableDeclaration","overrides":null,"scope":611,"src":"16827:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"16827:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":484,"initialValue":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"31","id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16842:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"argumentTypes":null,"hexValue":"31","id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16845:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"id":483,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"16841:6:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_1_by_1_$_t_rational_1_by_1_$","typeString":"tuple(int_const 1,int_const 1)"}},"nodeType":"VariableDeclarationStatement","src":"16814:33:0"},{"assignments":[486],"declarations":[{"constant":false,"id":486,"mutability":"mutable","name":"lx","nodeType":"VariableDeclaration","overrides":null,"scope":611,"src":"16924:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":485,"name":"uint256","nodeType":"ElementaryTypeName","src":"16924:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":494,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":488,"name":"qy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"16944:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":489,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"16948:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":490,"name":"py","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"16961:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16948:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":492,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"16965:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":487,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"16937:6:0","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16937:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16924:52:0"},{"assignments":[496],"declarations":[{"constant":false,"id":496,"mutability":"mutable","name":"lz","nodeType":"VariableDeclaration","overrides":null,"scope":611,"src":"16984:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":495,"name":"uint256","nodeType":"ElementaryTypeName","src":"16984:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":504,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":498,"name":"qx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"17004:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":499,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"17008:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":500,"name":"px","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"17021:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17008:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":502,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"17025:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":497,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"16997:6:0","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16997:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16984:52:0"},{"assignments":[506],"declarations":[{"constant":false,"id":506,"mutability":"mutable","name":"dx","nodeType":"VariableDeclaration","overrides":null,"scope":611,"src":"17045:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":505,"name":"uint256","nodeType":"ElementaryTypeName","src":"17045:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":507,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"17045:10:0"},{"expression":{"argumentTypes":null,"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":508,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"17149:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":509,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17153:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":510,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17148:8:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":512,"name":"lx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"17173:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":513,"name":"lz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"17177:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":514,"name":"lx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"17181:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":515,"name":"lz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"17185:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":511,"name":"projectiveMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"17159:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17159:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"17148:40:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":518,"nodeType":"ExpressionStatement","src":"17148:40:0"},{"expression":{"argumentTypes":null,"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":519,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"17220:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":520,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17224:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":521,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17219:8:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":523,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"17244:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":524,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17248:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":525,"name":"px","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"17252:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":526,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"17256:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":522,"name":"projectiveSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"17230:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17230:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"17219:40:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":529,"nodeType":"ExpressionStatement","src":"17219:40:0"},{"expression":{"argumentTypes":null,"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":530,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"17294:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":531,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17298:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":532,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17293:8:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":534,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"17318:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":535,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17322:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":536,"name":"qx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"17326:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":537,"name":"z2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"17330:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":533,"name":"projectiveSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"17304:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17304:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"17293:40:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":540,"nodeType":"ExpressionStatement","src":"17293:40:0"},{"assignments":[542],"declarations":[{"constant":false,"id":542,"mutability":"mutable","name":"dy","nodeType":"VariableDeclaration","overrides":null,"scope":611,"src":"17371:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":541,"name":"uint256","nodeType":"ElementaryTypeName","src":"17371:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":543,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"17371:10:0"},{"expression":{"argumentTypes":null,"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":544,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"17477:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":545,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"17481:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":546,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17476:8:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":548,"name":"px","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"17501:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":549,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"17505:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":550,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"17509:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":551,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17513:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":547,"name":"projectiveSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"17487:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17487:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"17476:40:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":554,"nodeType":"ExpressionStatement","src":"17476:40:0"},{"expression":{"argumentTypes":null,"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":555,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"17534:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":556,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"17538:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":557,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17533:8:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":559,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"17558:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":560,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"17562:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":561,"name":"lx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"17566:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":562,"name":"lz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"17570:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":558,"name":"projectiveMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"17544:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17544:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"17533:40:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":565,"nodeType":"ExpressionStatement","src":"17533:40:0"},{"expression":{"argumentTypes":null,"id":575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":566,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"17610:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":567,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"17614:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":568,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17609:8:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":570,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"17634:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":571,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"17638:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":572,"name":"py","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"17642:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":573,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"17646:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":569,"name":"projectiveSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"17620:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17620:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"17609:40:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":576,"nodeType":"ExpressionStatement","src":"17609:40:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":577,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17693:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":578,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"17699:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17693:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":609,"nodeType":"Block","src":"17903:88:0","statements":[{"expression":{"argumentTypes":null,"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":605,"name":"sz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"17975:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":606,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17980:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17975:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":608,"nodeType":"ExpressionStatement","src":"17975:7:0"}]},"id":610,"nodeType":"IfStatement","src":"17689:302:0","trueBody":{"id":604,"nodeType":"Block","src":"17703:194:0","statements":[{"expression":{"argumentTypes":null,"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":580,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"17775:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":582,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"17787:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":583,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"17791:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":584,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"17795:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":581,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"17780:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17780:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17775:31:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":587,"nodeType":"ExpressionStatement","src":"17775:31:0"},{"expression":{"argumentTypes":null,"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":588,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"17816:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":590,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"17828:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":591,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17832:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":592,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"17836:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":589,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"17821:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17821:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17816:31:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":595,"nodeType":"ExpressionStatement","src":"17816:31:0"},{"expression":{"argumentTypes":null,"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":596,"name":"sz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"17857:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":598,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"17869:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":599,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"17873:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":600,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"17877:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":597,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"17862:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17862:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17857:31:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":603,"nodeType":"ExpressionStatement","src":"17857:31:0"}]}}]},"documentation":{"id":460,"nodeType":"StructuredDocumentation","src":"14404:1594:0","text":"**************************************************************************\n@notice Computes elliptic-curve sum, in projective co-ordinates\n@dev Using projective coordinates avoids costly divisions\n@dev To use this with p and q in affine coordinates, call\n@dev projectiveECAdd(px, py, qx, qy). This will return\n@dev the addition of (px, py, 1) and (qx, qy, 1), in the\n@dev secp256k1 group.\n@dev This can be used to calculate the z which is the inverse to zInv\n@dev in isValidVRFOutput. But consider using a faster\n@dev re-implementation such as ProjectiveECAdd in the golang vrf package.\n@dev This function assumes [px,py,1],[qx,qy,1] are valid projective\ncoordinates of secp256k1 points. That is safe in this contract,\nbecause this method is only used by linearCombination, which checks\npoints are on the curve via ecrecover.**************************************************************************\n@param px The first affine coordinate of the first summand\n@param py The second affine coordinate of the first summand\n@param qx The first affine coordinate of the second summand\n@param qy The second affine coordinate of the second summand\n(px,py) and (qx,qy) must be distinct, valid secp256k1 points.**************************************************************************\nReturn values are projective coordinates of [px,py,1]+[qx,qy,1] as points\non secp256k1, in P²(𝔽ₙ)\n@return sx \n@return sy\n@return sz"},"id":612,"implemented":true,"kind":"function","modifiers":[],"name":"projectiveECAdd","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"px","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"16026:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":461,"name":"uint256","nodeType":"ElementaryTypeName","src":"16026:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"py","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"16038:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"16038:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"qx","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"16050:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":465,"name":"uint256","nodeType":"ElementaryTypeName","src":"16050:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":468,"mutability":"mutable","name":"qy","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"16062:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":467,"name":"uint256","nodeType":"ElementaryTypeName","src":"16062:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"16025:48:0"},"returnParameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"sx","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"16100:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":470,"name":"uint256","nodeType":"ElementaryTypeName","src":"16100:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"sy","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"16112:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":472,"name":"uint256","nodeType":"ElementaryTypeName","src":"16112:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"sz","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"16124:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"16124:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"16099:36:0"},"scope":1144,"src":"16001:1996:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":681,"nodeType":"Block","src":"18396:389:0","statements":[{"assignments":[630],"declarations":[{"constant":false,"id":630,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","overrides":null,"scope":681,"src":"18402:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":629,"name":"uint256","nodeType":"ElementaryTypeName","src":"18402:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":631,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"18402:9:0"},{"assignments":[633],"declarations":[{"constant":false,"id":633,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","overrides":null,"scope":681,"src":"18417:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":632,"name":"uint256","nodeType":"ElementaryTypeName","src":"18417:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":634,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"18417:9:0"},{"assignments":[636],"declarations":[{"constant":false,"id":636,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","overrides":null,"scope":681,"src":"18432:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"18432:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":637,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"18432:9:0"},{"expression":{"argumentTypes":null,"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":638,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"18448:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":639,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"18451:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":640,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"18454:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":641,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"18447:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":643,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"18475:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":645,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18478:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18475:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":646,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"18482:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":648,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18485:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18482:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":649,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"18489:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":651,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18492:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18489:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":652,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"18496:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":654,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18499:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18496:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":642,"name":"projectiveECAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"18459:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256,uint256)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18459:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"src":"18447:55:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":657,"nodeType":"ExpressionStatement","src":"18447:55:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":660,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"18523:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":661,"name":"invZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"18526:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":662,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"18532:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":659,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"18516:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18516:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"31","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18547:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18516:32:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"696e765a206d75737420626520696e7665727365206f66207a","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18550:27:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_95046d93d9b2e6ba778cd180e8c682e7d907547386cb54bf80bca322c50144ca","typeString":"literal_string \"invZ must be inverse of z\""},"value":"invZ must be inverse of z"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_95046d93d9b2e6ba778cd180e8c682e7d907547386cb54bf80bca322c50144ca","typeString":"literal_string \"invZ must be inverse of z\""}],"id":658,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18508:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18508:70:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":668,"nodeType":"ExpressionStatement","src":"18508:70:0"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":670,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"18730:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":671,"name":"invZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"18733:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":672,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"18739:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":669,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"18723:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18723:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":675,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"18759:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":676,"name":"invZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"18762:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":677,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"18768:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":674,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"18752:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18752:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":679,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18722:58:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"functionReturnParameters":628,"id":680,"nodeType":"Return","src":"18715:65:0"}]},"documentation":null,"id":682,"implemented":true,"kind":"function","modifiers":[],"name":"affineECAdd","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"p1","nodeType":"VariableDeclaration","overrides":null,"scope":682,"src":"18292:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":613,"name":"uint256","nodeType":"ElementaryTypeName","src":"18292:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":615,"length":{"argumentTypes":null,"hexValue":"32","id":614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18300:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"18292:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"p2","nodeType":"VariableDeclaration","overrides":null,"scope":682,"src":"18314:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":617,"name":"uint256","nodeType":"ElementaryTypeName","src":"18314:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":619,"length":{"argumentTypes":null,"hexValue":"32","id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18322:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"18314:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":622,"mutability":"mutable","name":"invZ","nodeType":"VariableDeclaration","overrides":null,"scope":682,"src":"18340:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"18340:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"18286:67:0"},"returnParameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":682,"src":"18377:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":624,"name":"uint256","nodeType":"ElementaryTypeName","src":"18377:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":626,"length":{"argumentTypes":null,"hexValue":"32","id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18385:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"18377:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"src":"18376:19:0"},"scope":1144,"src":"18266:519:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":767,"nodeType":"Block","src":"19050:898:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":698,"name":"lcWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"19132:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19153:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19145:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"19145:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19145:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"19132:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"626164207769746e657373","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19157:13:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_7fcbfa9df9f83be5218dd62480bcb5cdae56a970e549b88ff2403f5fcded9211","typeString":"literal_string \"bad witness\""},"value":"bad witness"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7fcbfa9df9f83be5218dd62480bcb5cdae56a970e549b88ff2403f5fcded9211","typeString":"literal_string \"bad witness\""}],"id":697,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19124:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19124:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":706,"nodeType":"ExpressionStatement","src":"19124:47:0"},{"assignments":[708],"declarations":[{"constant":false,"id":708,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":767,"src":"19179:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":707,"name":"uint8","nodeType":"ElementaryTypeName","src":"19179:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"id":720,"initialValue":{"argumentTypes":null,"condition":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":709,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"19190:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":711,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19192:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19190:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"hexValue":"32","id":712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19197:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"19190:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19202:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19190:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":716,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19189:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"hexValue":"3238","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19212:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19189:25:0","trueExpression":{"argumentTypes":null,"hexValue":"3237","id":717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19207:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"19179:35:0"},{"assignments":[722],"declarations":[{"constant":false,"id":722,"mutability":"mutable","name":"pseudoHash","nodeType":"VariableDeclaration","overrides":null,"scope":767,"src":"19251:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19251:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":735,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":725,"name":"GROUP_ORDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"19280:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":727,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"19301:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":729,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19303:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19301:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":730,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"19307:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":731,"name":"GROUP_ORDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"19310:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":726,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"19294:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19294:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19280:42:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19272:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":723,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19272:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19272:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19251:72:0"},{"assignments":[737],"declarations":[{"constant":false,"id":737,"mutability":"mutable","name":"pseudoSignature","nodeType":"VariableDeclaration","overrides":null,"scope":767,"src":"19342:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19342:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":748,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":741,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"19383:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":742,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"19386:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":744,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19388:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19386:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":745,"name":"GROUP_ORDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"19392:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":740,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"19376:6:0","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19376:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19368:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":738,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19368:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19368:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19342:63:0"},{"assignments":[750],"declarations":[{"constant":false,"id":750,"mutability":"mutable","name":"computed","nodeType":"VariableDeclaration","overrides":null,"scope":767,"src":"19830:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":749,"name":"address","nodeType":"ElementaryTypeName","src":"19830:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":762,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":752,"name":"pseudoHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"19859:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":753,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"19871:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":756,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"19882:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":758,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19884:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19882:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19874:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19874:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19874:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":760,"name":"pseudoSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"19889:15:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":751,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"19849:9:0","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19849:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"19830:75:0"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":763,"name":"computed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"19920:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":764,"name":"lcWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"19932:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19920:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":696,"id":766,"nodeType":"Return","src":"19913:28:0"}]},"documentation":null,"id":768,"implemented":true,"kind":"function","modifiers":[],"name":"verifyLinearCombinationWithGenerator","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":768,"src":"18955:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":683,"name":"uint256","nodeType":"ElementaryTypeName","src":"18955:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":688,"mutability":"mutable","name":"p","nodeType":"VariableDeclaration","overrides":null,"scope":768,"src":"18966:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"18966:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":687,"length":{"argumentTypes":null,"hexValue":"32","id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18974:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"18966:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","overrides":null,"scope":768,"src":"18987:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":689,"name":"uint256","nodeType":"ElementaryTypeName","src":"18987:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"lcWitness","nodeType":"VariableDeclaration","overrides":null,"scope":768,"src":"18998:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"18998:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"18949:67:0"},"returnParameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":695,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":768,"src":"19044:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":694,"name":"bool","nodeType":"ElementaryTypeName","src":"19044:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"19043:6:0"},"scope":1144,"src":"18904:1044:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":837,"nodeType":"Block","src":"20657:346:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":798,"name":"cp1Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"20674:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":800,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20685:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20674:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":801,"name":"sp2Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"20690:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":803,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20701:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20690:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20674:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":805,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20673:31:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"id":806,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"20707:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20673:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20721:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20673:49:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"706f696e747320696e2073756d206d7573742062652064697374696e6374","id":810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20738:32:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_2ce93c410880bb13bca91831655ee36bc7ab052e7c8cb24dd914165b1030eeca","typeString":"literal_string \"points in sum must be distinct\""},"value":"points in sum must be distinct"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ce93c410880bb13bca91831655ee36bc7ab052e7c8cb24dd914165b1030eeca","typeString":"literal_string \"points in sum must be distinct\""}],"id":797,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20665:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20665:106:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":812,"nodeType":"ExpressionStatement","src":"20665:106:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":815,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"20799:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":816,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"20803:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":817,"name":"cp1Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"20806:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":814,"name":"ecmulVerify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"20787:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory,uint256,uint256[2] memory) pure returns (bool)"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20787:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4669727374206d756c7469706c69636174696f6e20636865636b206661696c6564","id":819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20819:35:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_40e788544e29554c975084a69228c0b0b4a1c9c1f6404406ec2b6d9b86d179a9","typeString":"literal_string \"First multiplication check failed\""},"value":"First multiplication check failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_40e788544e29554c975084a69228c0b0b4a1c9c1f6404406ec2b6d9b86d179a9","typeString":"literal_string \"First multiplication check failed\""}],"id":813,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20779:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20779:76:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":821,"nodeType":"ExpressionStatement","src":"20779:76:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":824,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"20883:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":825,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"20887:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":826,"name":"sp2Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"20890:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":823,"name":"ecmulVerify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"20871:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory,uint256,uint256[2] memory) pure returns (bool)"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20871:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5365636f6e64206d756c7469706c69636174696f6e20636865636b206661696c6564","id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20903:36:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_4bae64ba22ed7fbb776e6032297d511b182dfd08020c93d70fec3cfcc33a5267","typeString":"literal_string \"Second multiplication check failed\""},"value":"Second multiplication check failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4bae64ba22ed7fbb776e6032297d511b182dfd08020c93d70fec3cfcc33a5267","typeString":"literal_string \"Second multiplication check failed\""}],"id":822,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20863:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20863:77:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":830,"nodeType":"ExpressionStatement","src":"20863:77:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":832,"name":"cp1Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"20967:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":833,"name":"sp2Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"20979:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":834,"name":"zInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"20991:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":831,"name":"affineECAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"20955:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (uint256[2] memory,uint256[2] memory,uint256) pure returns (uint256[2] memory)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20955:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"functionReturnParameters":796,"id":836,"nodeType":"Return","src":"20948:48:0"}]},"documentation":null,"id":838,"implemented":true,"kind":"function","modifiers":[],"name":"linearCombination","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":838,"src":"20463:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"20463:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"p1","nodeType":"VariableDeclaration","overrides":null,"scope":838,"src":"20474:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"20474:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":773,"length":{"argumentTypes":null,"hexValue":"32","id":772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20482:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"20474:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":778,"mutability":"mutable","name":"cp1Witness","nodeType":"VariableDeclaration","overrides":null,"scope":838,"src":"20496:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"20496:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":777,"length":{"argumentTypes":null,"hexValue":"32","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20504:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"20496:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","overrides":null,"scope":838,"src":"20530:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"20530:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"p2","nodeType":"VariableDeclaration","overrides":null,"scope":838,"src":"20541:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":781,"name":"uint256","nodeType":"ElementaryTypeName","src":"20541:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":783,"length":{"argumentTypes":null,"hexValue":"32","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20549:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"20541:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":788,"mutability":"mutable","name":"sp2Witness","nodeType":"VariableDeclaration","overrides":null,"scope":838,"src":"20563:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"20563:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":787,"length":{"argumentTypes":null,"hexValue":"32","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20571:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"20563:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":790,"mutability":"mutable","name":"zInv","nodeType":"VariableDeclaration","overrides":null,"scope":838,"src":"20597:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":789,"name":"uint256","nodeType":"ElementaryTypeName","src":"20597:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"20457:153:0"},"returnParameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":838,"src":"20638:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":792,"name":"uint256","nodeType":"ElementaryTypeName","src":"20638:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":794,"length":{"argumentTypes":null,"hexValue":"32","id":793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20646:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"20638:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"src":"20637:19:0"},"scope":1144,"src":"20431:572:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":841,"mutability":"constant","name":"SCALAR_FROM_CURVE_POINTS_HASH_PREFIX","nodeType":"VariableDeclaration","overrides":null,"scope":1144,"src":"21135:57:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"21135:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"32","id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21191:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"body":{"id":879,"nodeType":"Block","src":"22098:170:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":869,"name":"SCALAR_FROM_CURVE_POINTS_HASH_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"22157:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":870,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"22230:4:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":871,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"22236:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":872,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"22240:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":873,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"22247:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":874,"name":"uWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"22250:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":867,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"22140:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"22140:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22140:119:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":866,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"22130:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22130:130:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22113:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"22113:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22113:148:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":863,"id":878,"nodeType":"Return","src":"22106:155:0"}]},"documentation":null,"id":880,"implemented":true,"kind":"function","modifiers":[],"name":"scalarFromCurvePoints","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":845,"mutability":"mutable","name":"hash","nodeType":"VariableDeclaration","overrides":null,"scope":880,"src":"21946:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":842,"name":"uint256","nodeType":"ElementaryTypeName","src":"21946:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":844,"length":{"argumentTypes":null,"hexValue":"32","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21954:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"21946:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":849,"mutability":"mutable","name":"pk","nodeType":"VariableDeclaration","overrides":null,"scope":880,"src":"21970:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"21970:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":848,"length":{"argumentTypes":null,"hexValue":"32","id":847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21978:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"21970:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"gamma","nodeType":"VariableDeclaration","overrides":null,"scope":880,"src":"21992:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":850,"name":"uint256","nodeType":"ElementaryTypeName","src":"21992:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":852,"length":{"argumentTypes":null,"hexValue":"32","id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22000:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"21992:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"uWitness","nodeType":"VariableDeclaration","overrides":null,"scope":880,"src":"22021:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":854,"name":"address","nodeType":"ElementaryTypeName","src":"22021:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":880,"src":"22039:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"22039:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":858,"length":{"argumentTypes":null,"hexValue":"32","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22047:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"22039:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"src":"21940:119:0"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","overrides":null,"scope":880,"src":"22087:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"22087:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"22086:11:0"},"scope":1144,"src":"21910:358:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":991,"nodeType":"Block","src":"23086:1286:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":911,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"23112:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":910,"name":"isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"23102:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23102:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"7075626c6963206b6579206973206e6f74206f6e206375727665","id":913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23117:28:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ae4825d6ed8aab0513e68c27d2710aa68bcf110761c187d047951a5ec2580d8c","typeString":"literal_string \"public key is not on curve\""},"value":"public key is not on curve"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae4825d6ed8aab0513e68c27d2710aa68bcf110761c187d047951a5ec2580d8c","typeString":"literal_string \"public key is not on curve\""}],"id":909,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23094:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23094:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":915,"nodeType":"ExpressionStatement","src":"23094:52:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":918,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"23172:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":917,"name":"isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"23162:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23162:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"67616d6d61206973206e6f74206f6e206375727665","id":920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23180:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c6038a70864418dbffbd772a49c391c3536f6b633b3f2ccbcd6a6e15dbadd34c","typeString":"literal_string \"gamma is not on curve\""},"value":"gamma is not on curve"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6038a70864418dbffbd772a49c391c3536f6b633b3f2ccbcd6a6e15dbadd34c","typeString":"literal_string \"gamma is not on curve\""}],"id":916,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23154:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":922,"nodeType":"ExpressionStatement","src":"23154:50:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":925,"name":"cGammaWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"23230:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":924,"name":"isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"23220:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23220:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6347616d6d615769746e657373206973206e6f74206f6e206375727665","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23246:31:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9f90959a5b25997fe56cdafc2f72d300e298468f5ac5e847db7890be22108d2b","typeString":"literal_string \"cGammaWitness is not on curve\""},"value":"cGammaWitness is not on curve"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9f90959a5b25997fe56cdafc2f72d300e298468f5ac5e847db7890be22108d2b","typeString":"literal_string \"cGammaWitness is not on curve\""}],"id":923,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23212:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23212:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":929,"nodeType":"ExpressionStatement","src":"23212:66:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":932,"name":"sHashWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"23304:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":931,"name":"isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"23294:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23294:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"73486173685769746e657373206973206e6f74206f6e206375727665","id":934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23319:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ff425c3ce65530e49c0c35a5fdd7a61b00545f1fcc6482c28903cdcf48ac624f","typeString":"literal_string \"sHashWitness is not on curve\""},"value":"sHashWitness is not on curve"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ff425c3ce65530e49c0c35a5fdd7a61b00545f1fcc6482c28903cdcf48ac624f","typeString":"literal_string \"sHashWitness is not on curve\""}],"id":930,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23286:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23286:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":936,"nodeType":"ExpressionStatement","src":"23286:64:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":939,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"23789:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":940,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"23792:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":941,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"23796:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":942,"name":"uWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"23799:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":938,"name":"verifyLinearCombinationWithGenerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"23752:36:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_address_$returns$_t_bool_$","typeString":"function (uint256,uint256[2] memory,uint256,address) pure returns (bool)"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23752:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6164647228632a706b2b732a6729e289a05f755769746e657373","id":944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23818:28:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_0f7ac8cec68afc47fd4e44d8cd3aa5d9522e42bf75327b41295f78f22758e02d","typeString":"literal_string \"addr(c*pk+s*g)≠_uWitness\""},"value":"addr(c*pk+s*g)≠_uWitness"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0f7ac8cec68afc47fd4e44d8cd3aa5d9522e42bf75327b41295f78f22758e02d","typeString":"literal_string \"addr(c*pk+s*g)≠_uWitness\""}],"id":937,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23735:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23735:119:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":946,"nodeType":"ExpressionStatement","src":"23735:119:0"},{"assignments":[952],"declarations":[{"constant":false,"id":952,"mutability":"mutable","name":"hash","nodeType":"VariableDeclaration","overrides":null,"scope":991,"src":"23949:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"23949:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":951,"length":{"argumentTypes":null,"hexValue":"32","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23957:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"23949:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"id":957,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":954,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"23986:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":955,"name":"seed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"23990:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":953,"name":"hashToCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"23974:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (uint256[2] memory,uint256) view returns (uint256[2] memory)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23974:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"nodeType":"VariableDeclarationStatement","src":"23949:46:0"},{"assignments":[963],"declarations":[{"constant":false,"id":963,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":991,"src":"24087:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":961,"name":"uint256","nodeType":"ElementaryTypeName","src":"24087:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":962,"length":{"argumentTypes":null,"hexValue":"32","id":960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24095:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"24087:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"id":973,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":965,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"24136:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":966,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"24139:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":967,"name":"cGammaWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"24146:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":968,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"24161:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":969,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"24164:4:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":970,"name":"sHashWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"24170:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":971,"name":"zInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"24184:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":964,"name":"linearCombination","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"24109:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (uint256,uint256[2] memory,uint256[2] memory,uint256,uint256[2] memory,uint256[2] memory,uint256) pure returns (uint256[2] memory)"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24109:80:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"nodeType":"VariableDeclarationStatement","src":"24087:102:0"},{"assignments":[975],"declarations":[{"constant":false,"id":975,"mutability":"mutable","name":"derivedC","nodeType":"VariableDeclaration","overrides":null,"scope":991,"src":"24248:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":974,"name":"uint256","nodeType":"ElementaryTypeName","src":"24248:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":983,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":977,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"24289:4:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":978,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"24295:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":979,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"24299:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":980,"name":"uWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"24306:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":981,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"24316:1:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":976,"name":"scalarFromCurvePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"24267:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_address_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[2] memory,uint256[2] memory,uint256[2] memory,address,uint256[2] memory) pure returns (uint256)"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24267:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24248:70:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":985,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"24334:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":986,"name":"derivedC","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"24339:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24334:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"696e76616c69642070726f6f66","id":988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24349:15:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_cfa179d50ad7851ac140a84fb212f48699dbd00170b3afe087b0d09f632d1624","typeString":"literal_string \"invalid proof\""},"value":"invalid proof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cfa179d50ad7851ac140a84fb212f48699dbd00170b3afe087b0d09f632d1624","typeString":"literal_string \"invalid proof\""}],"id":984,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24326:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24326:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":990,"nodeType":"ExpressionStatement","src":"24326:39:0"}]},"documentation":null,"id":992,"implemented":true,"kind":"function","modifiers":[],"name":"verifyVRFProof","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":884,"mutability":"mutable","name":"pk","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"22880:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":881,"name":"uint256","nodeType":"ElementaryTypeName","src":"22880:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":883,"length":{"argumentTypes":null,"hexValue":"32","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22888:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"22880:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":888,"mutability":"mutable","name":"gamma","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"22902:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"22902:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":887,"length":{"argumentTypes":null,"hexValue":"32","id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22910:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"22902:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":890,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"22927:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":889,"name":"uint256","nodeType":"ElementaryTypeName","src":"22927:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":892,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"22938:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":891,"name":"uint256","nodeType":"ElementaryTypeName","src":"22938:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"seed","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"22953:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":893,"name":"uint256","nodeType":"ElementaryTypeName","src":"22953:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"uWitness","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"22967:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":895,"name":"address","nodeType":"ElementaryTypeName","src":"22967:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":900,"mutability":"mutable","name":"cGammaWitness","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"22985:31:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":897,"name":"uint256","nodeType":"ElementaryTypeName","src":"22985:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":899,"length":{"argumentTypes":null,"hexValue":"32","id":898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22993:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"22985:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":904,"mutability":"mutable","name":"sHashWitness","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"23022:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":901,"name":"uint256","nodeType":"ElementaryTypeName","src":"23022:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":903,"length":{"argumentTypes":null,"hexValue":"32","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23030:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"23022:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":906,"mutability":"mutable","name":"zInv","nodeType":"VariableDeclaration","overrides":null,"scope":992,"src":"23054:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"23054:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"22874:193:0"},"returnParameters":{"id":908,"nodeType":"ParameterList","parameters":[],"src":"23086:0:0"},"scope":1144,"src":"22851:1521:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":true,"id":995,"mutability":"constant","name":"VRF_RANDOM_OUTPUT_HASH_PREFIX","nodeType":"VariableDeclaration","overrides":null,"scope":1144,"src":"24502:50:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":993,"name":"uint256","nodeType":"ElementaryTypeName","src":"24502:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"33","id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24551:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"functionSelector":"e911439c","id":1016,"mutability":"constant","name":"PROOF_LENGTH","nodeType":"VariableDeclaration","overrides":null,"scope":1144,"src":"24626:351:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":996,"name":"uint","nodeType":"ElementaryTypeName","src":"24626:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_416_by_1","typeString":"int_const 416"},"id":1015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_384_by_1","typeString":"int_const 384"},"id":1013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_320_by_1","typeString":"int_const 320"},"id":1011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":1009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"id":1007,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"id":1005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"id":1003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"id":1001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"id":999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"hexValue":"3634","id":997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24662:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"3634","id":998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24707:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"24662:47:0","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24725:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"24662:65:0","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24739:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"24662:79:0","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":1004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24753:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"24662:93:0","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24770:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24662:109:0","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":1008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24850:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"24662:190:0","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"3634","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24924:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"24662:264:0","typeDescriptions":{"typeIdentifier":"t_rational_320_by_1","typeString":"int_const 320"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"3634","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24950:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"24662:290:0","typeDescriptions":{"typeIdentifier":"t_rational_384_by_1","typeString":"int_const 384"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24975:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"24662:315:0","typeDescriptions":{"typeIdentifier":"t_rational_416_by_1","typeString":"int_const 416"}},"visibility":"public"},{"body":{"id":1142,"nodeType":"Block","src":"25677:901:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1024,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"25693:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"25693:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":1026,"name":"PROOF_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"25709:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25693:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"77726f6e672070726f6f66206c656e677468","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25723:20:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_869e73f748a03d1463bb7b47e41dc9f2989934ca6019d0a0e3b068f9645d9228","typeString":"literal_string \"wrong proof length\""},"value":"wrong proof length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_869e73f748a03d1463bb7b47e41dc9f2989934ca6019d0a0e3b068f9645d9228","typeString":"literal_string \"wrong proof length\""}],"id":1023,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25685:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25685:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1030,"nodeType":"ExpressionStatement","src":"25685:59:0"},{"assignments":[1036],"declarations":[{"constant":false,"id":1036,"mutability":"mutable","name":"pk","nodeType":"VariableDeclaration","overrides":null,"scope":1142,"src":"25753:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"25753:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1035,"length":{"argumentTypes":null,"hexValue":"32","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25761:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"25753:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"id":1037,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"25753:20:0"},{"assignments":[1043],"declarations":[{"constant":false,"id":1043,"mutability":"mutable","name":"gamma","nodeType":"VariableDeclaration","overrides":null,"scope":1142,"src":"25826:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1041,"name":"uint256","nodeType":"ElementaryTypeName","src":"25826:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1042,"length":{"argumentTypes":null,"hexValue":"32","id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25834:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"25826:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"id":1044,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"25826:23:0"},{"assignments":[1050],"declarations":[{"constant":false,"id":1050,"mutability":"mutable","name":"cSSeed","nodeType":"VariableDeclaration","overrides":null,"scope":1142,"src":"25935:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":1048,"name":"uint256","nodeType":"ElementaryTypeName","src":"25935:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1049,"length":{"argumentTypes":null,"hexValue":"33","id":1047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25943:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"25935:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"value":null,"visibility":"internal"}],"id":1051,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"25935:24:0"},{"assignments":[1053],"declarations":[{"constant":false,"id":1053,"mutability":"mutable","name":"uWitness","nodeType":"VariableDeclaration","overrides":null,"scope":1142,"src":"25967:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1052,"name":"address","nodeType":"ElementaryTypeName","src":"25967:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":1054,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"25967:16:0"},{"assignments":[1060],"declarations":[{"constant":false,"id":1060,"mutability":"mutable","name":"cGammaWitness","nodeType":"VariableDeclaration","overrides":null,"scope":1142,"src":"25991:31:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"25991:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1059,"length":{"argumentTypes":null,"hexValue":"32","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25999:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"25991:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"id":1061,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"25991:31:0"},{"assignments":[1067],"declarations":[{"constant":false,"id":1067,"mutability":"mutable","name":"sHashWitness","nodeType":"VariableDeclaration","overrides":null,"scope":1142,"src":"26030:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1065,"name":"uint256","nodeType":"ElementaryTypeName","src":"26030:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1066,"length":{"argumentTypes":null,"hexValue":"32","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26038:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"26030:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"id":1068,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"26030:30:0"},{"assignments":[1070],"declarations":[{"constant":false,"id":1070,"mutability":"mutable","name":"zInv","nodeType":"VariableDeclaration","overrides":null,"scope":1142,"src":"26068:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"26068:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1071,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"26068:12:0"},{"expression":{"argumentTypes":null,"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1072,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"26089:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":1073,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"26093:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":1074,"name":"cSSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"26100:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},{"argumentTypes":null,"id":1075,"name":"uWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"26108:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1076,"name":"cGammaWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"26118:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":1077,"name":"sHashWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"26133:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":1078,"name":"zInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"26147:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1079,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"26088:64:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$3_memory_ptr_$_t_address_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$","typeString":"tuple(uint256[2] memory,uint256[2] memory,uint256[3] memory,address,uint256[2] memory,uint256[2] memory,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1082,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"26175:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26183:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"26183:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1086,"indexExpression":{"argumentTypes":null,"hexValue":"32","id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26191:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"26183:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"type(uint256[2] memory)"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26195:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1087,"name":"uint256","nodeType":"ElementaryTypeName","src":"26195:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1090,"indexExpression":{"argumentTypes":null,"hexValue":"32","id":1089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26203:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"26195:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"type(uint256[2] memory)"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26207:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1091,"name":"uint256","nodeType":"ElementaryTypeName","src":"26207:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1094,"indexExpression":{"argumentTypes":null,"hexValue":"33","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26215:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"26207:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$3_memory_ptr_$","typeString":"type(uint256[3] memory)"}},{"argumentTypes":null,"id":1096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26219:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1095,"name":"address","nodeType":"ElementaryTypeName","src":"26219:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26228:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1097,"name":"uint256","nodeType":"ElementaryTypeName","src":"26228:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1100,"indexExpression":{"argumentTypes":null,"hexValue":"32","id":1099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26236:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"26228:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"type(uint256[2] memory)"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26256:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"26256:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1104,"indexExpression":{"argumentTypes":null,"hexValue":"32","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26264:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"26256:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"type(uint256[2] memory)"}},{"argumentTypes":null,"id":1106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26268:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1105,"name":"uint256","nodeType":"ElementaryTypeName","src":"26268:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":1107,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"26182:94:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$_t_type$_t_array$_t_uint256_$3_memory_ptr_$_$_t_type$_t_address_$_$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(uint256[2] memory),type(uint256[2] memory),type(uint256[3] memory),type(address),type(uint256[2] memory),type(uint256[2] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$_t_type$_t_array$_t_uint256_$3_memory_ptr_$_$_t_type$_t_address_$_$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(uint256[2] memory),type(uint256[2] memory),type(uint256[3] memory),type(address),type(uint256[2] memory),type(uint256[2] memory),type(uint256))"}],"expression":{"argumentTypes":null,"id":1080,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"26155:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"26155:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26155:122:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$3_memory_ptr_$_t_address_payable_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$","typeString":"tuple(uint256[2] memory,uint256[2] memory,uint256[3] memory,address payable,uint256[2] memory,uint256[2] memory,uint256)"}},"src":"26088:189:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1110,"nodeType":"ExpressionStatement","src":"26088:189:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1112,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"26309:2:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":1113,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"26321:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1114,"name":"cSSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"26336:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":1116,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26343:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26336:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1117,"name":"cSSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"26360:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":1119,"indexExpression":{"argumentTypes":null,"hexValue":"31","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26367:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26360:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1120,"name":"cSSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"26384:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":1122,"indexExpression":{"argumentTypes":null,"hexValue":"32","id":1121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26391:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26384:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1123,"name":"uWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"26411:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1124,"name":"cGammaWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"26429:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":1125,"name":"sHashWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"26452:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"argumentTypes":null,"id":1126,"name":"zInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"26474:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1111,"name":"verifyVRFProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"26285:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint256[2] memory,uint256[2] memory,uint256,uint256,uint256,address,uint256[2] memory,uint256[2] memory,uint256) view"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26285:201:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1128,"nodeType":"ExpressionStatement","src":"26285:201:0"},{"expression":{"argumentTypes":null,"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1129,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"26494:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1135,"name":"VRF_RANDOM_OUTPUT_HASH_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"26532:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1136,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"26563:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"argumentTypes":null,"id":1133,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"26521:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"26521:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26521:48:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1132,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"26511:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26511:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26503:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1130,"name":"uint256","nodeType":"ElementaryTypeName","src":"26503:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26503:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26494:77:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1141,"nodeType":"ExpressionStatement","src":"26494:77:0"}]},"documentation":null,"id":1143,"implemented":true,"kind":"function","modifiers":[],"name":"randomValueFromVRFProof","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1018,"mutability":"mutable","name":"proof","nodeType":"VariableDeclaration","overrides":null,"scope":1143,"src":"25614:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1017,"name":"bytes","nodeType":"ElementaryTypeName","src":"25614:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"25613:20:0"},"returnParameters":{"id":1022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"output","nodeType":"VariableDeclaration","overrides":null,"scope":1143,"src":"25661:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1020,"name":"uint256","nodeType":"ElementaryTypeName","src":"25661:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"25660:16:0"},"scope":1144,"src":"25581:997:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1145,"src":"7169:19411:0"}],"src":"32:26549:0"},"id":0},"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol","exportedSymbols":{"VRFConsumerBase":[1268]},"id":1269,"nodeType":"SourceUnit","nodes":[{"id":1146,"literals":["solidity","^","0.6",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol","file":"./vendor/SafeMathChainlink.sol","id":1147,"nodeType":"ImportDirective","scope":1269,"sourceUnit":2351,"src":"57:40:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol","file":"./interfaces/LinkTokenInterface.sol","id":1148,"nodeType":"ImportDirective","scope":1269,"sourceUnit":2111,"src":"99:45:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol","file":"./VRFRequestIDBase.sol","id":1149,"nodeType":"ImportDirective","scope":1269,"sourceUnit":2006,"src":"146:32:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":1151,"name":"VRFRequestIDBase","nodeType":"UserDefinedTypeName","referencedDeclaration":2005,"src":"5439:16:1","typeDescriptions":{"typeIdentifier":"t_contract$_VRFRequestIDBase_$2005","typeString":"contract VRFRequestIDBase"}},"id":1152,"nodeType":"InheritanceSpecifier","src":"5439:16:1"}],"contractDependencies":[2005],"contractKind":"contract","documentation":{"id":1150,"nodeType":"StructuredDocumentation","src":"180:5221:1","text":"****************************************************************************\n@notice Interface for contracts using VRF randomness\n*****************************************************************************\n@dev PURPOSE\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n@dev to Vera the verifier in such a way that Vera can be sure he's not\n@dev making his output up to suit himself. Reggie provides Vera a public key\n@dev to which he knows the secret key. Each time Vera provides a seed to\n@dev Reggie, he gives back a value which is computed completely\n@dev deterministically from the seed and the secret key.\n * @dev Reggie provides a proof by which Vera can verify that the output was\n@dev correctly computed once Reggie tells it to her, but without that proof,\n@dev the output is indistinguishable to her from a uniform random sample\n@dev from the output space.\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n@dev to talk to Vera the verifier about the work Reggie is doing, to provide\n@dev simple access to a verifiable source of randomness.\n*****************************************************************************\n@dev USAGE\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n@dev initialize VRFConsumerBase's attributes in their constructor as\n@dev shown:\n * @dev   contract VRFConsumer {\n@dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n@dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n@dev         <initialization with other arguments goes here>\n@dev       }\n@dev   }\n * @dev The oracle will have given you an ID for the VRF keypair they have\n@dev committed to (let's call it keyHash), and have told you the minimum LINK\n@dev price for VRF service. Make sure your contract has sufficient LINK, and\n@dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n@dev want to generate randomness from.\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n@dev to your request, it will call your contract's fulfillRandomness method.\n * @dev The randomness argument to fulfillRandomness is the actual random value\n@dev generated from your seed.\n * @dev The requestId argument is generated from the keyHash and the seed by\n@dev makeRequestId(keyHash, seed). If your contract could have concurrent\n@dev requests open, you can use the requestId to track which seed is\n@dev associated with which randomness. See VRFRequestIDBase.sol for more\n@dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n@dev if your contract could have multiple requests in flight simultaneously.)\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n@dev differ. (Which is critical to making unpredictable randomness! See the\n@dev next section.)\n * *****************************************************************************\n@dev SECURITY CONSIDERATIONS\n * @dev A method with the ability to call your fulfillRandomness method directly\n@dev could spoof a VRF response with any random value, so it's critical that\n@dev it cannot be directly called by anything other than this base contract\n@dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n * @dev For your users to trust that your contract's random behavior is free\n@dev from malicious interference, it's best if you can write it so that all\n@dev behaviors implied by a VRF response are executed *during* your\n@dev fulfillRandomness method. If your contract must store the response (or\n@dev anything derived from it) and use it later, you must ensure that any\n@dev user-significant behavior which depends on that stored value cannot be\n@dev manipulated by a subsequent VRF request.\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n@dev over the order in which VRF responses appear on the blockchain, so if\n@dev your contract could have multiple VRF requests in flight simultaneously,\n@dev you must ensure that the order in which the VRF responses arrive cannot\n@dev be used to manipulate your contract's user-significant behavior.\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n@dev block in which the request is made, user-provided seeds have no impact\n@dev on its economic security properties. They are only included for API\n@dev compatability with previous versions of this contract.\n * @dev Since the block hash of the block which contains the requestRandomness\n@dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n@dev miner could, in principle, fork the blockchain to evict the block\n@dev containing the request, forcing the request to be included in a\n@dev different block with a different hash, and therefore a different input\n@dev to the VRF. However, such an attack would incur a substantial economic\n@dev cost. This cost scales with the number of blocks the VRF oracle waits\n@dev until it calls responds to a request."},"fullyImplemented":false,"id":1268,"linearizedBaseContracts":[1268,2005],"name":"VRFConsumerBase","nodeType":"ContractDefinition","nodes":[{"id":1155,"libraryName":{"contractScope":null,"id":1153,"name":"SafeMathChainlink","nodeType":"UserDefinedTypeName","referencedDeclaration":2350,"src":"5467:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMathChainlink_$2350","typeString":"library SafeMathChainlink"}},"nodeType":"UsingForDirective","src":"5461:36:1","typeName":{"id":1154,"name":"uint256","nodeType":"ElementaryTypeName","src":"5489:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"body":null,"documentation":{"id":1156,"nodeType":"StructuredDocumentation","src":"5501:641:1","text":"@notice fulfillRandomness handles the VRF response. Your contract must\n@notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n@notice principles to keep in mind when implementing your fulfillRandomness\n@notice method.\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n@dev signature, and will call it once it has verified the proof\n@dev associated with the randomness. (It is triggered via a call to\n@dev rawFulfillRandomness, below.)\n   * @param requestId The Id initially returned by requestRandomness\n@param randomness the VRF output"},"id":1163,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomness","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"requestId","nodeType":"VariableDeclaration","overrides":null,"scope":1163,"src":"6172:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1157,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6172:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1160,"mutability":"mutable","name":"randomness","nodeType":"VariableDeclaration","overrides":null,"scope":1163,"src":"6191:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1159,"name":"uint256","nodeType":"ElementaryTypeName","src":"6191:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6171:39:1"},"returnParameters":{"id":1162,"nodeType":"ParameterList","parameters":[],"src":"6231:0:1"},"scope":1268,"src":"6145:87:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":true,"id":1166,"mutability":"constant","name":"USER_SEED_PLACEHOLDER","nodeType":"VariableDeclaration","overrides":null,"scope":1268,"src":"6627:50:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1164,"name":"uint256","nodeType":"ElementaryTypeName","src":"6627:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"30","id":1165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6676:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"body":{"id":1218,"nodeType":"Block","src":"7921:928:1","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1179,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"7948:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1180,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"7964:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1183,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"7981:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1184,"name":"USER_SEED_PLACEHOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"7991:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1181,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7970:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"7970:10:1","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7970:43:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"id":1176,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"7927:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":2098,"src":"7927:20:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7927:87:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1187,"nodeType":"ExpressionStatement","src":"7927:87:1"},{"assignments":[1189],"declarations":[{"constant":false,"id":1189,"mutability":"mutable","name":"vRFSeed","nodeType":"VariableDeclaration","overrides":null,"scope":1218,"src":"8245:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1188,"name":"uint256","nodeType":"ElementaryTypeName","src":"8245:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1201,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1191,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"8281:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1192,"name":"USER_SEED_PLACEHOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"8291:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1195,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8322:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$1268","typeString":"contract VRFConsumerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_VRFConsumerBase_$1268","typeString":"contract VRFConsumerBase"}],"id":1194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8314:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1193,"name":"address","nodeType":"ElementaryTypeName","src":"8314:7:1","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8314:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1197,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"8329:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1199,"indexExpression":{"argumentTypes":null,"id":1198,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"8336:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8329:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1190,"name":"makeVRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"8264:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes32,uint256,address,uint256) pure returns (uint256)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8264:82:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8245:101:1"},{"expression":{"argumentTypes":null,"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1202,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"8757:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1204,"indexExpression":{"argumentTypes":null,"id":1203,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"8764:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8757:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"31","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8797:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1205,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"8776:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1207,"indexExpression":{"argumentTypes":null,"id":1206,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"8783:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8776:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":2240,"src":"8776:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8776:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8757:42:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1212,"nodeType":"ExpressionStatement","src":"8757:42:1"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1214,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"8826:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1215,"name":"vRFSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"8836:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1213,"name":"makeRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"8812:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes32,uint256) pure returns (bytes32)"}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8812:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1175,"id":1217,"nodeType":"Return","src":"8805:39:1"}]},"documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"6682:1134:1","text":"@notice requestRandomness initiates a request for VRF output given _seed\n   * @dev The fulfillRandomness method receives the output, once it's provided\n@dev by the Oracle, and verified by the vrfCoordinator.\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n@dev the _fee must exceed the fee specified during registration of the\n@dev _keyHash.\n   * @dev The _seed parameter is vestigial, and is kept only for API\n@dev compatibility with older versions. It can't *hurt* to mix in some of\n@dev your own randomness, here, but it's not necessary because the VRF\n@dev oracle will mix the hash of the block containing your request into the\n@dev VRF seed it ultimately uses.\n   * @param _keyHash ID of public key against which randomness is generated\n@param _fee The amount of LINK to send with the request\n   * @return requestId unique ID for this request\n   * @dev The returned requestId can be used to distinguish responses to\n@dev concurrent requests. It is passed as the first argument to\n@dev fulfillRandomness."},"id":1219,"implemented":true,"kind":"function","modifiers":[],"name":"requestRandomness","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"_keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1219,"src":"7846:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7846:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"_fee","nodeType":"VariableDeclaration","overrides":null,"scope":1219,"src":"7864:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"7864:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7845:32:1"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"requestId","nodeType":"VariableDeclaration","overrides":null,"scope":1219,"src":"7900:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1173,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7900:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"7899:19:1"},"scope":1268,"src":"7819:1030:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":1221,"mutability":"immutable","name":"LINK","nodeType":"VariableDeclaration","overrides":null,"scope":1268,"src":"8853:42:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"},"typeName":{"contractScope":null,"id":1220,"name":"LinkTokenInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":2110,"src":"8853:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"value":null,"visibility":"internal"},{"constant":false,"id":1223,"mutability":"immutable","name":"vrfCoordinator","nodeType":"VariableDeclaration","overrides":null,"scope":1268,"src":"8899:40:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1222,"name":"address","nodeType":"ElementaryTypeName","src":"8899:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"private"},{"constant":false,"id":1227,"mutability":"mutable","name":"nonces","nodeType":"VariableDeclaration","overrides":null,"scope":1268,"src":"9079:68:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":1226,"keyType":{"id":1224,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9087:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"9079:53:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"9112:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"value":null,"visibility":"private"},{"body":{"id":1245,"nodeType":"Block","src":"9400:81:1","statements":[{"expression":{"argumentTypes":null,"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1235,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"9406:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1236,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"9423:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9406:32:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1238,"nodeType":"ExpressionStatement","src":"9406:32:1"},{"expression":{"argumentTypes":null,"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1239,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"9444:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1241,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"9470:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1240,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"9451:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$2110_$","typeString":"type(contract LinkTokenInterface)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9451:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"src":"9444:32:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"id":1244,"nodeType":"ExpressionStatement","src":"9444:32:1"}]},"documentation":{"id":1228,"nodeType":"StructuredDocumentation","src":"9152:186:1","text":"@param _vrfCoordinator address of VRFCoordinator contract\n@param _link address of LINK token contract\n   * @dev https://docs.chain.link/docs/link-token-contracts"},"id":1246,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1230,"mutability":"mutable","name":"_vrfCoordinator","nodeType":"VariableDeclaration","overrides":null,"scope":1246,"src":"9353:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"9353:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"_link","nodeType":"VariableDeclaration","overrides":null,"scope":1246,"src":"9378:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1231,"name":"address","nodeType":"ElementaryTypeName","src":"9378:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"9352:40:1"},"returnParameters":{"id":1234,"nodeType":"ParameterList","parameters":[],"src":"9400:0:1"},"scope":1268,"src":"9341:140:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1266,"nodeType":"Block","src":"9754:129:1","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1254,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9768:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9768:10:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":1256,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"9782:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9768:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c","id":1258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9798:33:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445","typeString":"literal_string \"Only VRFCoordinator can fulfill\""},"value":"Only VRFCoordinator can fulfill"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445","typeString":"literal_string \"Only VRFCoordinator can fulfill\""}],"id":1253,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9760:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9760:72:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1260,"nodeType":"ExpressionStatement","src":"9760:72:1"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1262,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"9856:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1263,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"9867:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1261,"name":"fulfillRandomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"9838:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9838:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1265,"nodeType":"ExpressionStatement","src":"9838:40:1"}]},"documentation":null,"functionSelector":"94985ddd","id":1267,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomness","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"requestId","nodeType":"VariableDeclaration","overrides":null,"scope":1267,"src":"9706:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1247,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9706:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"randomness","nodeType":"VariableDeclaration","overrides":null,"scope":1267,"src":"9725:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1249,"name":"uint256","nodeType":"ElementaryTypeName","src":"9725:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9705:39:1"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[],"src":"9754:0:1"},"scope":1268,"src":"9676:207:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1269,"src":"5402:4483:1"}],"src":"32:9854:1"},"id":1},"@chainlink/contracts/src/v0.6/VRFCoordinator.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol","exportedSymbols":{"VRFCoordinator":[1955]},"id":1956,"nodeType":"SourceUnit","nodes":[{"id":1270,"literals":["solidity","0.6",".6"],"nodeType":"PragmaDirective","src":"32:22:2"},{"absolutePath":"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol","file":"./vendor/SafeMathChainlink.sol","id":1271,"nodeType":"ImportDirective","scope":1956,"sourceUnit":2351,"src":"56:40:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol","file":"./interfaces/LinkTokenInterface.sol","id":1272,"nodeType":"ImportDirective","scope":1956,"sourceUnit":2111,"src":"98:45:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.6/interfaces/BlockHashStoreInterface.sol","file":"./interfaces/BlockHashStoreInterface.sol","id":1273,"nodeType":"ImportDirective","scope":1956,"sourceUnit":2016,"src":"144:50:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.6/vendor/Ownable.sol","file":"./vendor/Ownable.sol","id":1274,"nodeType":"ImportDirective","scope":1956,"sourceUnit":2212,"src":"196:30:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.6/VRF.sol","file":"./VRF.sol","id":1275,"nodeType":"ImportDirective","scope":1956,"sourceUnit":1145,"src":"228:19:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol","file":"./VRFRequestIDBase.sol","id":1276,"nodeType":"ImportDirective","scope":1956,"sourceUnit":2006,"src":"248:32:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol","file":"./VRFConsumerBase.sol","id":1277,"nodeType":"ImportDirective","scope":1956,"sourceUnit":1269,"src":"281:31:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":1279,"name":"VRF","nodeType":"UserDefinedTypeName","referencedDeclaration":1144,"src":"461:3:2","typeDescriptions":{"typeIdentifier":"t_contract$_VRF_$1144","typeString":"contract VRF"}},"id":1280,"nodeType":"InheritanceSpecifier","src":"461:3:2"},{"arguments":null,"baseName":{"contractScope":null,"id":1281,"name":"VRFRequestIDBase","nodeType":"UserDefinedTypeName","referencedDeclaration":2005,"src":"466:16:2","typeDescriptions":{"typeIdentifier":"t_contract$_VRFRequestIDBase_$2005","typeString":"contract VRFRequestIDBase"}},"id":1282,"nodeType":"InheritanceSpecifier","src":"466:16:2"},{"arguments":null,"baseName":{"contractScope":null,"id":1283,"name":"Ownable","nodeType":"UserDefinedTypeName","referencedDeclaration":2211,"src":"484:7:2","typeDescriptions":{"typeIdentifier":"t_contract$_Ownable_$2211","typeString":"contract Ownable"}},"id":1284,"nodeType":"InheritanceSpecifier","src":"484:7:2"}],"contractDependencies":[1144,2005,2211],"contractKind":"contract","documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"314:119:2","text":"@title VRFCoordinator coordinates on-chain verifiable-randomness requests\n@title with off-chain responses"},"fullyImplemented":true,"id":1955,"linearizedBaseContracts":[1955,2211,2005,1144],"name":"VRFCoordinator","nodeType":"ContractDefinition","nodes":[{"id":1287,"libraryName":{"contractScope":null,"id":1285,"name":"SafeMathChainlink","nodeType":"UserDefinedTypeName","referencedDeclaration":2350,"src":"503:17:2","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMathChainlink_$2350","typeString":"library SafeMathChainlink"}},"nodeType":"UsingForDirective","src":"497:36:2","typeName":{"id":1286,"name":"uint256","nodeType":"ElementaryTypeName","src":"525:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1289,"mutability":"mutable","name":"LINK","nodeType":"VariableDeclaration","overrides":null,"scope":1955,"src":"537:32:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"},"typeName":{"contractScope":null,"id":1288,"name":"LinkTokenInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":2110,"src":"537:18:2","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"value":null,"visibility":"internal"},{"constant":false,"id":1291,"mutability":"mutable","name":"blockHashStore","nodeType":"VariableDeclaration","overrides":null,"scope":1955,"src":"573:47:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_BlockHashStoreInterface_$2015","typeString":"contract BlockHashStoreInterface"},"typeName":{"contractScope":null,"id":1290,"name":"BlockHashStoreInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":2015,"src":"573:23:2","typeDescriptions":{"typeIdentifier":"t_contract$_BlockHashStoreInterface_$2015","typeString":"contract BlockHashStoreInterface"}},"value":null,"visibility":"internal"},{"body":{"id":1310,"nodeType":"Block","src":"684:106:2","statements":[{"expression":{"argumentTypes":null,"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1298,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"690:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1300,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"716:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1299,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"697:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$2110_$","typeString":"type(contract LinkTokenInterface)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"697:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"src":"690:32:2","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"id":1303,"nodeType":"ExpressionStatement","src":"690:32:2"},{"expression":{"argumentTypes":null,"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1304,"name":"blockHashStore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"728:14:2","typeDescriptions":{"typeIdentifier":"t_contract$_BlockHashStoreInterface_$2015","typeString":"contract BlockHashStoreInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1306,"name":"_blockHashStore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"769:15:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1305,"name":"BlockHashStoreInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"745:23:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BlockHashStoreInterface_$2015_$","typeString":"type(contract BlockHashStoreInterface)"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"745:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_BlockHashStoreInterface_$2015","typeString":"contract BlockHashStoreInterface"}},"src":"728:57:2","typeDescriptions":{"typeIdentifier":"t_contract$_BlockHashStoreInterface_$2015","typeString":"contract BlockHashStoreInterface"}},"id":1309,"nodeType":"ExpressionStatement","src":"728:57:2"}]},"documentation":null,"id":1311,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1293,"mutability":"mutable","name":"_link","nodeType":"VariableDeclaration","overrides":null,"scope":1311,"src":"637:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"637:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"_blockHashStore","nodeType":"VariableDeclaration","overrides":null,"scope":1311,"src":"652:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1294,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"636:40:2"},"returnParameters":{"id":1297,"nodeType":"ParameterList","parameters":[],"src":"684:0:2"},"scope":1955,"src":"625:165:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"canonicalName":"VRFCoordinator.Callback","id":1318,"members":[{"constant":false,"id":1313,"mutability":"mutable","name":"callbackContract","nodeType":"VariableDeclaration","overrides":null,"scope":1318,"src":"845:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"845:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"randomnessFee","nodeType":"VariableDeclaration","overrides":null,"scope":1318,"src":"1143:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1314,"name":"uint96","nodeType":"ElementaryTypeName","src":"1143:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"value":null,"visibility":"internal"},{"constant":false,"id":1317,"mutability":"mutable","name":"seedAndBlockNum","nodeType":"VariableDeclaration","overrides":null,"scope":1318,"src":"1419:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1419:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"name":"Callback","nodeType":"StructDefinition","scope":1955,"src":"794:653:2","visibility":"public"},{"canonicalName":"VRFCoordinator.ServiceAgreement","id":1325,"members":[{"constant":false,"id":1320,"mutability":"mutable","name":"vRFOracle","nodeType":"VariableDeclaration","overrides":null,"scope":1325,"src":"1525:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1319,"name":"address","nodeType":"ElementaryTypeName","src":"1525:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","overrides":null,"scope":1325,"src":"1597:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1321,"name":"uint96","nodeType":"ElementaryTypeName","src":"1597:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"value":null,"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"jobID","nodeType":"VariableDeclaration","overrides":null,"scope":1325,"src":"1678:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1678:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"name":"ServiceAgreement","nodeType":"StructDefinition","scope":1955,"src":"1451:297:2","visibility":"public"},{"constant":false,"functionSelector":"21f36509","id":1329,"mutability":"mutable","name":"callbacks","nodeType":"VariableDeclaration","overrides":null,"scope":1955,"src":"1752:70:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Callback_$1318_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.Callback)"},"typeName":{"id":1328,"keyType":{"id":1326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1760:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1752:53:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Callback_$1318_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.Callback)"},"valueType":{"contractScope":null,"id":1327,"name":"Callback","nodeType":"UserDefinedTypeName","referencedDeclaration":1318,"src":"1796:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage_ptr","typeString":"struct VRFCoordinator.Callback"}}},"value":null,"visibility":"public"},{"constant":false,"functionSelector":"75d35070","id":1333,"mutability":"mutable","name":"serviceAgreements","nodeType":"VariableDeclaration","overrides":null,"scope":1955,"src":"1826:82:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement)"},"typeName":{"id":1332,"keyType":{"id":1330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1834:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1826:53:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement)"},"valueType":{"contractScope":null,"id":1331,"name":"ServiceAgreement","nodeType":"UserDefinedTypeName","referencedDeclaration":1325,"src":"1862:16:2","typeDescriptions":{"typeIdentifier":"t_struct$_ServiceAgreement_$1325_storage_ptr","typeString":"struct VRFCoordinator.ServiceAgreement"}}},"value":null,"visibility":"public"},{"constant":false,"functionSelector":"006f6ad0","id":1337,"mutability":"mutable","name":"withdrawableTokens","nodeType":"VariableDeclaration","overrides":null,"scope":1955,"src":"1912:89:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1336,"keyType":{"id":1334,"name":"address","nodeType":"ElementaryTypeName","src":"1920:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1912:59:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"1944:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"value":null,"visibility":"public"},{"constant":false,"id":1343,"mutability":"mutable","name":"nonces","nodeType":"VariableDeclaration","overrides":null,"scope":1955,"src":"2005:98:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(bytes32 => mapping(address => uint256))"},"typeName":{"id":1342,"keyType":{"id":1338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2013:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2005:79:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(bytes32 => mapping(address => uint256))"},"valueType":{"id":1341,"keyType":{"id":1339,"name":"address","nodeType":"ElementaryTypeName","src":"2049:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2041:42:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1340,"name":"uint256","nodeType":"ElementaryTypeName","src":"2075:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"value":null,"visibility":"private"},{"anonymous":false,"documentation":null,"id":1357,"name":"RandomnessRequest","nodeType":"EventDefinition","parameters":{"id":1356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1345,"indexed":false,"mutability":"mutable","name":"keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1357,"src":"2334:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2334:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1347,"indexed":false,"mutability":"mutable","name":"seed","nodeType":"VariableDeclaration","overrides":null,"scope":1357,"src":"2355:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"2355:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1349,"indexed":true,"mutability":"mutable","name":"jobID","nodeType":"VariableDeclaration","overrides":null,"scope":1357,"src":"2373:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2373:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1351,"indexed":false,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","overrides":null,"scope":1357,"src":"2400:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1350,"name":"address","nodeType":"ElementaryTypeName","src":"2400:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1353,"indexed":false,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","overrides":null,"scope":1357,"src":"2420:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"2420:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1355,"indexed":false,"mutability":"mutable","name":"requestID","nodeType":"VariableDeclaration","overrides":null,"scope":1357,"src":"2437:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2437:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"2328:127:2"},"src":"2305:151:2"},{"anonymous":false,"documentation":null,"id":1363,"name":"NewServiceAgreement","nodeType":"EventDefinition","parameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1359,"indexed":false,"mutability":"mutable","name":"keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1363,"src":"2486:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2486:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1361,"indexed":false,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","overrides":null,"scope":1363,"src":"2503:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1360,"name":"uint256","nodeType":"ElementaryTypeName","src":"2503:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2485:30:2"},"src":"2460:56:2"},{"anonymous":false,"documentation":null,"id":1369,"name":"RandomnessRequestFulfilled","nodeType":"EventDefinition","parameters":{"id":1368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"indexed":false,"mutability":"mutable","name":"requestId","nodeType":"VariableDeclaration","overrides":null,"scope":1369,"src":"2553:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1364,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2553:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1367,"indexed":false,"mutability":"mutable","name":"output","nodeType":"VariableDeclaration","overrides":null,"scope":1369,"src":"2572:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1366,"name":"uint256","nodeType":"ElementaryTypeName","src":"2572:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2552:35:2"},"src":"2520:68:2"},{"body":{"id":1454,"nodeType":"Block","src":"3106:606:2","statements":[{"assignments":[1386],"declarations":[{"constant":false,"id":1386,"mutability":"mutable","name":"keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1454,"src":"3112:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3112:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":1390,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1388,"name":"_publicProvingKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"3140:17:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}],"id":1387,"name":"hashOfKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"3130:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint256[2] memory) pure returns (bytes32)"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3130:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3112:46:2"},{"assignments":[1392],"declarations":[{"constant":false,"id":1392,"mutability":"mutable","name":"oldVRFOracle","nodeType":"VariableDeclaration","overrides":null,"scope":1454,"src":"3164:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1391,"name":"address","nodeType":"ElementaryTypeName","src":"3164:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":1397,"initialValue":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1393,"name":"serviceAgreements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"3187:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement storage ref)"}},"id":1395,"indexExpression":{"argumentTypes":null,"id":1394,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"3205:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3187:26:2","typeDescriptions":{"typeIdentifier":"t_struct$_ServiceAgreement_$1325_storage","typeString":"struct VRFCoordinator.ServiceAgreement storage ref"}},"id":1396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"vRFOracle","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"3187:36:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3164:59:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1399,"name":"oldVRFOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"3237:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3261:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3253:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1400,"name":"address","nodeType":"ElementaryTypeName","src":"3253:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3253:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3237:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"706c656173652072656769737465722061206e6577206b6579","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3265:27:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_206a96f1dc54b9197656746e097b21bbcaa13fd65bcdc8ddcf5323ad03eb1a53","typeString":"literal_string \"please register a new key\""},"value":"please register a new key"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_206a96f1dc54b9197656746e097b21bbcaa13fd65bcdc8ddcf5323ad03eb1a53","typeString":"literal_string \"please register a new key\""}],"id":1398,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3229:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3229:64:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1407,"nodeType":"ExpressionStatement","src":"3229:64:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1409,"name":"_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"3307:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3326:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3318:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1410,"name":"address","nodeType":"ElementaryTypeName","src":"3318:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3318:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3307:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5f6f7261636c65206d757374206e6f7420626520307830","id":1415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3330:25:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_f8e11b65407b8098c777c9bc179d492cbb554da9b82556e35542fe8078bd28be","typeString":"literal_string \"_oracle must not be 0x0\""},"value":"_oracle must not be 0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8e11b65407b8098c777c9bc179d492cbb554da9b82556e35542fe8078bd28be","typeString":"literal_string \"_oracle must not be 0x0\""}],"id":1408,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3299:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3299:57:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1417,"nodeType":"ExpressionStatement","src":"3299:57:2"},{"expression":{"argumentTypes":null,"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1418,"name":"serviceAgreements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"3362:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement storage ref)"}},"id":1420,"indexExpression":{"argumentTypes":null,"id":1419,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"3380:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3362:26:2","typeDescriptions":{"typeIdentifier":"t_struct$_ServiceAgreement_$1325_storage","typeString":"struct VRFCoordinator.ServiceAgreement storage ref"}},"id":1421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"vRFOracle","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"3362:36:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1422,"name":"_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"3401:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3362:46:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1424,"nodeType":"ExpressionStatement","src":"3362:46:2"},{"expression":{"argumentTypes":null,"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1425,"name":"serviceAgreements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"3414:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement storage ref)"}},"id":1427,"indexExpression":{"argumentTypes":null,"id":1426,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"3432:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3414:26:2","typeDescriptions":{"typeIdentifier":"t_struct$_ServiceAgreement_$1325_storage","typeString":"struct VRFCoordinator.ServiceAgreement storage ref"}},"id":1428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"jobID","nodeType":"MemberAccess","referencedDeclaration":1324,"src":"3414:32:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1429,"name":"_jobID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"3449:6:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3414:41:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1431,"nodeType":"ExpressionStatement","src":"3414:41:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1433,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"3523:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"hexValue":"316539","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3531:9:2","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000000000000_by_1","typeString":"int_const 1000000000000000000000000000"},"value":"1e9"},"src":"3523:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"796f752063616e277420636861726765206d6f7265207468616e20616c6c20746865204c494e4b20696e2074686520776f726c642c20677265656479","id":1436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3548:62:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_3a4898a14f86303f4f0f062cf67700e5107caf8a2238d9bba8aa8f9b688110e9","typeString":"literal_string \"you can't charge more than all the LINK in the world, greedy\""},"value":"you can't charge more than all the LINK in the world, greedy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3a4898a14f86303f4f0f062cf67700e5107caf8a2238d9bba8aa8f9b688110e9","typeString":"literal_string \"you can't charge more than all the LINK in the world, greedy\""}],"id":1432,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3515:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3515:96:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1438,"nodeType":"ExpressionStatement","src":"3515:96:2"},{"expression":{"argumentTypes":null,"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1439,"name":"serviceAgreements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"3617:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement storage ref)"}},"id":1441,"indexExpression":{"argumentTypes":null,"id":1440,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"3635:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3617:26:2","typeDescriptions":{"typeIdentifier":"t_struct$_ServiceAgreement_$1325_storage","typeString":"struct VRFCoordinator.ServiceAgreement storage ref"}},"id":1442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":1322,"src":"3617:30:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1445,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"3657:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3650:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":1443,"name":"uint96","nodeType":"ElementaryTypeName","src":"3650:6:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3650:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"3617:45:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":1448,"nodeType":"ExpressionStatement","src":"3617:45:2"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1450,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"3693:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1451,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"3702:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1449,"name":"NewServiceAgreement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"3673:19:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3673:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1453,"nodeType":"EmitStatement","src":"3668:39:2"}]},"documentation":{"id":1370,"nodeType":"StructuredDocumentation","src":"2592:358:2","text":"@notice Commits calling address to serve randomness\n@param _fee minimum LINK payment required to serve randomness\n@param _oracle the address of the Chainlink node with the proving key and job\n@param _publicProvingKey public key used to prove randomness\n@param _jobID ID of the corresponding chainlink job in the oracle's db"},"functionSelector":"d8340209","id":1455,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":1383,"modifierName":{"argumentTypes":null,"id":1382,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"3092:9:2","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3092:11:2"}],"name":"registerProvingKey","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1372,"mutability":"mutable","name":"_fee","nodeType":"VariableDeclaration","overrides":null,"scope":1455,"src":"2986:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1371,"name":"uint256","nodeType":"ElementaryTypeName","src":"2986:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1374,"mutability":"mutable","name":"_oracle","nodeType":"VariableDeclaration","overrides":null,"scope":1455,"src":"3000:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1373,"name":"address","nodeType":"ElementaryTypeName","src":"3000:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1378,"mutability":"mutable","name":"_publicProvingKey","nodeType":"VariableDeclaration","overrides":null,"scope":1455,"src":"3017:37:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"3017:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1377,"length":{"argumentTypes":null,"hexValue":"32","id":1376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3025:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"3017:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"_jobID","nodeType":"VariableDeclaration","overrides":null,"scope":1455,"src":"3056:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3056:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"2980:94:2"},"returnParameters":{"id":1384,"nodeType":"ParameterList","parameters":[],"src":"3106:0:2"},"scope":1955,"src":"2953:759:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1488,"nodeType":"Block","src":"4474:135:2","statements":[{"assignments":[1468,1470],"declarations":[{"constant":false,"id":1468,"mutability":"mutable","name":"keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1488,"src":"4481:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1467,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4481:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1470,"mutability":"mutable","name":"seed","nodeType":"VariableDeclaration","overrides":null,"scope":1488,"src":"4498:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1469,"name":"uint256","nodeType":"ElementaryTypeName","src":"4498:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1480,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1473,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"4525:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4533:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1474,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4533:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},{"argumentTypes":null,"id":1477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4542:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1476,"name":"uint256","nodeType":"ElementaryTypeName","src":"4542:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":1478,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4532:18:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32),type(uint256))"}],"expression":{"argumentTypes":null,"id":1471,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4514:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4514:10:2","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4514:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$","typeString":"tuple(bytes32,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4480:71:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1482,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"4575:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1483,"name":"seed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"4584:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1484,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"4590:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1485,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"4596:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1481,"name":"randomnessRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"4557:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (bytes32,uint256,uint256,address)"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4557:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1487,"nodeType":"ExpressionStatement","src":"4557:47:2"}]},"documentation":{"id":1456,"nodeType":"StructuredDocumentation","src":"3716:653:2","text":"@notice Called by LINK.transferAndCall, on successful LINK transfer\n   * @dev To invoke this, use the requestRandomness method in VRFConsumerBase.\n   * @dev The VRFCoordinator will call back to the calling contract when the\n@dev oracle responds, on the method fulfillRandomness. See\n@dev VRFConsumerBase.fulfilRandomness for its signature. Your consuming\n@dev contract should inherit from VRFConsumerBase, and implement\n@dev fulfilRandomness.\n   * @param _sender address: who sent the LINK (must be a contract)\n@param _fee amount of LINK sent\n@param _data abi-encoded call to randomnessRequest"},"functionSelector":"a4c0ed36","id":1489,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1465,"modifierName":{"argumentTypes":null,"id":1464,"name":"onlyLINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1937,"src":"4463:8:2","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"4463:8:2"}],"name":"onTokenTransfer","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"_sender","nodeType":"VariableDeclaration","overrides":null,"scope":1489,"src":"4397:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1457,"name":"address","nodeType":"ElementaryTypeName","src":"4397:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"_fee","nodeType":"VariableDeclaration","overrides":null,"scope":1489,"src":"4414:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1459,"name":"uint256","nodeType":"ElementaryTypeName","src":"4414:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"_data","nodeType":"VariableDeclaration","overrides":null,"scope":1489,"src":"4428:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1461,"name":"bytes","nodeType":"ElementaryTypeName","src":"4428:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"4396:51:2"},"returnParameters":{"id":1466,"nodeType":"ParameterList","parameters":[],"src":"4474:0:2"},"scope":1955,"src":"4372:237:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1605,"nodeType":"Block","src":"5534:789:2","statements":[{"assignments":[1506],"declarations":[{"constant":false,"id":1506,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","overrides":null,"scope":1605,"src":"5540:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1505,"name":"uint256","nodeType":"ElementaryTypeName","src":"5540:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1512,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1507,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"5556:6:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(bytes32 => mapping(address => uint256))"}},"id":1509,"indexExpression":{"argumentTypes":null,"id":1508,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"5563:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5556:16:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1511,"indexExpression":{"argumentTypes":null,"id":1510,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"5573:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5556:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5540:41:2"},{"assignments":[1514],"declarations":[{"constant":false,"id":1514,"mutability":"mutable","name":"preSeed","nodeType":"VariableDeclaration","overrides":null,"scope":1605,"src":"5587:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"5587:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1521,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1516,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"5622:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1517,"name":"_consumerSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"5632:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1518,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"5647:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1519,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"5656:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1515,"name":"makeVRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"5605:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes32,uint256,address,uint256) pure returns (uint256)"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5605:57:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5587:75:2"},{"assignments":[1523],"declarations":[{"constant":false,"id":1523,"mutability":"mutable","name":"requestId","nodeType":"VariableDeclaration","overrides":null,"scope":1605,"src":"5668:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5668:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":1528,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1525,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"5702:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1526,"name":"preSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"5712:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1524,"name":"makeRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"5688:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes32,uint256) pure returns (bytes32)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5688:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5668:52:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1530,"name":"callbacks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"5810:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Callback_$1318_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.Callback storage ref)"}},"id":1532,"indexExpression":{"argumentTypes":null,"id":1531,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"5820:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5810:20:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage","typeString":"struct VRFCoordinator.Callback storage ref"}},"id":1533,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"callbackContract","nodeType":"MemberAccess","referencedDeclaration":1313,"src":"5810:37:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5859:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5851:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1534,"name":"address","nodeType":"ElementaryTypeName","src":"5851:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5851:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"5810:51:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1529,"name":"assert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-3,"src":"5803:6:2","typeDescriptions":{"typeIdentifier":"t_function_assert_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5803:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1540,"nodeType":"ExpressionStatement","src":"5803:59:2"},{"expression":{"argumentTypes":null,"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1541,"name":"callbacks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"5868:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Callback_$1318_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.Callback storage ref)"}},"id":1543,"indexExpression":{"argumentTypes":null,"id":1542,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"5878:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5868:20:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage","typeString":"struct VRFCoordinator.Callback storage ref"}},"id":1544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"callbackContract","nodeType":"MemberAccess","referencedDeclaration":1313,"src":"5868:37:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1545,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"5908:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5868:47:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1547,"nodeType":"ExpressionStatement","src":"5868:47:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1549,"name":"_feePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"5928:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"hexValue":"31653237","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5939:4:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000000000000_by_1","typeString":"int_const 1000000000000000000000000000"},"value":"1e27"},"src":"5928:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1548,"name":"assert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-3,"src":"5921:6:2","typeDescriptions":{"typeIdentifier":"t_function_assert_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5921:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1553,"nodeType":"ExpressionStatement","src":"5921:23:2"},{"expression":{"argumentTypes":null,"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1554,"name":"callbacks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"5979:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Callback_$1318_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.Callback storage ref)"}},"id":1556,"indexExpression":{"argumentTypes":null,"id":1555,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"5989:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5979:20:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage","typeString":"struct VRFCoordinator.Callback storage ref"}},"id":1557,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"randomnessFee","nodeType":"MemberAccess","referencedDeclaration":1315,"src":"5979:34:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1560,"name":"_feePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"6023:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6016:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":1558,"name":"uint96","nodeType":"ElementaryTypeName","src":"6016:6:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6016:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"5979:53:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":1563,"nodeType":"ExpressionStatement","src":"5979:53:2"},{"expression":{"argumentTypes":null,"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1564,"name":"callbacks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"6038:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Callback_$1318_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.Callback storage ref)"}},"id":1566,"indexExpression":{"argumentTypes":null,"id":1565,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"6048:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6038:20:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage","typeString":"struct VRFCoordinator.Callback storage ref"}},"id":1567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"seedAndBlockNum","nodeType":"MemberAccess","referencedDeclaration":1317,"src":"6038:36:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1571,"name":"preSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"6111:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1572,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6120:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6120:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1569,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6087:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6087:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6087:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1568,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6077:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6077:57:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6038:96:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1577,"nodeType":"ExpressionStatement","src":"6038:96:2"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1579,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"6163:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1580,"name":"preSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"6173:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1581,"name":"serviceAgreements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"6182:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement storage ref)"}},"id":1583,"indexExpression":{"argumentTypes":null,"id":1582,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"6200:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6182:27:2","typeDescriptions":{"typeIdentifier":"t_struct$_ServiceAgreement_$1325_storage","typeString":"struct VRFCoordinator.ServiceAgreement storage ref"}},"id":1584,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"jobID","nodeType":"MemberAccess","referencedDeclaration":1324,"src":"6182:33:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1585,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"6223:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1586,"name":"_feePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"6232:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1587,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"6242:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1578,"name":"RandomnessRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"6145:17:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_address_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (bytes32,uint256,bytes32,address,uint256,bytes32)"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6145:107:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1589,"nodeType":"EmitStatement","src":"6140:112:2"},{"expression":{"argumentTypes":null,"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1590,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"6258:6:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(bytes32 => mapping(address => uint256))"}},"id":1593,"indexExpression":{"argumentTypes":null,"id":1591,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"6265:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6258:16:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1594,"indexExpression":{"argumentTypes":null,"id":1592,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"6275:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6258:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"31","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6316:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1595,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"6286:6:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(bytes32 => mapping(address => uint256))"}},"id":1597,"indexExpression":{"argumentTypes":null,"id":1596,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"6293:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6286:16:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1599,"indexExpression":{"argumentTypes":null,"id":1598,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"6303:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6286:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":2240,"src":"6286:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6286:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6258:60:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1604,"nodeType":"ExpressionStatement","src":"6258:60:2"}]},"documentation":{"id":1490,"nodeType":"StructuredDocumentation","src":"4613:741:2","text":"@notice creates the chainlink request for randomness\n   * @param _keyHash ID of the VRF public key against which to generate output\n@param _consumerSeed Input to the VRF, from which randomness is generated\n@param _feePaid Amount of LINK sent with request. Must exceed fee for key\n@param _sender Requesting contract; to be called back with VRF output\n   * @dev _consumerSeed is mixed with key hash, sender address and nonce to\n@dev obtain preSeed, which is passed to VRF oracle, which mixes it with the\n@dev hash of the block containing this request, to compute the final seed.\n   * @dev The requestId used to store the request data is constructed from the\n@dev preSeed and keyHash."},"id":1606,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"argumentTypes":null,"id":1501,"name":"_feePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"5512:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1502,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"5522:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1503,"modifierName":{"argumentTypes":null,"id":1500,"name":"sufficientLINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"5497:14:2","typeDescriptions":{"typeIdentifier":"t_modifier$_t_uint256_$_t_bytes32_$","typeString":"modifier (uint256,bytes32)"}},"nodeType":"ModifierInvocation","src":"5497:34:2"}],"name":"randomnessRequest","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"_keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1606,"src":"5389:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5389:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1494,"mutability":"mutable","name":"_consumerSeed","nodeType":"VariableDeclaration","overrides":null,"scope":1606,"src":"5411:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1493,"name":"uint256","nodeType":"ElementaryTypeName","src":"5411:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"_feePaid","nodeType":"VariableDeclaration","overrides":null,"scope":1606,"src":"5438:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1495,"name":"uint256","nodeType":"ElementaryTypeName","src":"5438:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"_sender","nodeType":"VariableDeclaration","overrides":null,"scope":1606,"src":"5460:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1497,"name":"address","nodeType":"ElementaryTypeName","src":"5460:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"5383:96:2"},"returnParameters":{"id":1504,"nodeType":"ParameterList","parameters":[],"src":"5534:0:2"},"scope":1955,"src":"5357:966:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"functionSelector":"8aa7927b","id":1609,"mutability":"constant","name":"PUBLIC_KEY_OFFSET","nodeType":"VariableDeclaration","overrides":null,"scope":1955,"src":"6453:48:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1607,"name":"uint256","nodeType":"ElementaryTypeName","src":"6453:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"30783230","id":1608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6497:4:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"public"},{"constant":true,"functionSelector":"b415f4f5","id":1612,"mutability":"constant","name":"PRESEED_OFFSET","nodeType":"VariableDeclaration","overrides":null,"scope":1955,"src":"6575:45:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1610,"name":"uint256","nodeType":"ElementaryTypeName","src":"6575:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"30786530","id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6616:4:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"0xe0"},"visibility":"public"},{"body":{"id":1666,"nodeType":"Block","src":"7104:553:2","statements":[{"assignments":[1619,1621,1623,1625],"declarations":[{"constant":false,"id":1619,"mutability":"mutable","name":"currentKeyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1666,"src":"7111:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1618,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7111:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1621,"mutability":"mutable","name":"callback","nodeType":"VariableDeclaration","overrides":null,"scope":1666,"src":"7135:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_memory_ptr","typeString":"struct VRFCoordinator.Callback"},"typeName":{"contractScope":null,"id":1620,"name":"Callback","nodeType":"UserDefinedTypeName","referencedDeclaration":1318,"src":"7135:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage_ptr","typeString":"struct VRFCoordinator.Callback"}},"value":null,"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"requestId","nodeType":"VariableDeclaration","overrides":null,"scope":1666,"src":"7161:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7161:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1625,"mutability":"mutable","name":"randomness","nodeType":"VariableDeclaration","overrides":null,"scope":1666,"src":"7185:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1624,"name":"uint256","nodeType":"ElementaryTypeName","src":"7185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1629,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1627,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"7230:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1626,"name":"getRandomnessFromProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"7207:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bytes32_$_t_struct$_Callback_$1318_memory_ptr_$_t_bytes32_$_t_uint256_$","typeString":"function (bytes memory) view returns (bytes32,struct VRFCoordinator.Callback memory,bytes32,uint256)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7207:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_struct$_Callback_$1318_memory_ptr_$_t_bytes32_$_t_uint256_$","typeString":"tuple(bytes32,struct VRFCoordinator.Callback memory,bytes32,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7110:127:2"},{"assignments":[1631],"declarations":[{"constant":false,"id":1631,"mutability":"mutable","name":"oadd","nodeType":"VariableDeclaration","overrides":null,"scope":1666,"src":"7262:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1630,"name":"address","nodeType":"ElementaryTypeName","src":"7262:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":1636,"initialValue":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1632,"name":"serviceAgreements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"7277:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement storage ref)"}},"id":1634,"indexExpression":{"argumentTypes":null,"id":1633,"name":"currentKeyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"7295:14:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7277:33:2","typeDescriptions":{"typeIdentifier":"t_struct$_ServiceAgreement_$1325_storage","typeString":"struct VRFCoordinator.ServiceAgreement storage ref"}},"id":1635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"vRFOracle","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"7277:43:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7262:58:2"},{"expression":{"argumentTypes":null,"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1637,"name":"withdrawableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"7326:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1639,"indexExpression":{"argumentTypes":null,"id":1638,"name":"oadd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"7345:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7326:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1644,"name":"callback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"7389:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_memory_ptr","typeString":"struct VRFCoordinator.Callback memory"}},"id":1645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"randomnessFee","nodeType":"MemberAccess","referencedDeclaration":1315,"src":"7389:22:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint96","typeString":"uint96"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1640,"name":"withdrawableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"7353:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1642,"indexExpression":{"argumentTypes":null,"id":1641,"name":"oadd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"7372:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7353:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":2240,"src":"7353:28:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7353:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7326:86:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1648,"nodeType":"ExpressionStatement","src":"7326:86:2"},{"expression":{"argumentTypes":null,"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7486:27:2","subExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1649,"name":"callbacks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"7493:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Callback_$1318_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.Callback storage ref)"}},"id":1651,"indexExpression":{"argumentTypes":null,"id":1650,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"7503:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7493:20:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage","typeString":"struct VRFCoordinator.Callback storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1653,"nodeType":"ExpressionStatement","src":"7486:27:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1655,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"7542:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1656,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1625,"src":"7553:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1657,"name":"callback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"7565:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_memory_ptr","typeString":"struct VRFCoordinator.Callback memory"}},"id":1658,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"callbackContract","nodeType":"MemberAccess","referencedDeclaration":1313,"src":"7565:25:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1654,"name":"callBackWithRandomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"7519:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$_t_address_$returns$__$","typeString":"function (bytes32,uint256,address)"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7519:72:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1660,"nodeType":"ExpressionStatement","src":"7519:72:2"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1662,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"7630:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1663,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1625,"src":"7641:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1661,"name":"RandomnessRequestFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"7603:26:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7603:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1665,"nodeType":"EmitStatement","src":"7598:54:2"}]},"documentation":{"id":1613,"nodeType":"StructuredDocumentation","src":"6625:414:2","text":"@notice Called by the chainlink node to fulfill requests\n   * @param _proof the proof of randomness. Actual random output built from this\n   * @dev The structure of _proof corresponds to vrf.MarshaledOnChainResponse,\n@dev in the node source code. I.e., it is a vrf.MarshaledProof with the\n@dev seed replaced by the preSeed, followed by the hash of the requesting\n@dev block."},"functionSelector":"5e1c1059","id":1667,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomnessRequest","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1615,"mutability":"mutable","name":"_proof","nodeType":"VariableDeclaration","overrides":null,"scope":1667,"src":"7076:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1614,"name":"bytes","nodeType":"ElementaryTypeName","src":"7076:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"7075:21:2"},"returnParameters":{"id":1617,"nodeType":"ParameterList","parameters":[],"src":"7104:0:2"},"scope":1955,"src":"7042:615:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1712,"nodeType":"Block","src":"7771:1279:2","statements":[{"assignments":[1677],"declarations":[{"constant":false,"id":1677,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":1712,"src":"7930:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$1268","typeString":"contract VRFConsumerBase"},"typeName":{"contractScope":null,"id":1676,"name":"VRFConsumerBase","nodeType":"UserDefinedTypeName","referencedDeclaration":1268,"src":"7930:15:2","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$1268","typeString":"contract VRFConsumerBase"}},"value":null,"visibility":"internal"}],"id":1678,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"7930:17:2"},{"assignments":[1680],"declarations":[{"constant":false,"id":1680,"mutability":"mutable","name":"resp","nodeType":"VariableDeclaration","overrides":null,"scope":1712,"src":"7953:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1679,"name":"bytes","nodeType":"ElementaryTypeName","src":"7953:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":1689,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1683,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"8003:1:2","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$1268","typeString":"contract VRFConsumerBase"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"rawFulfillRandomness","nodeType":"MemberAccess","referencedDeclaration":1267,"src":"8003:22:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256) external"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8003:31:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":1686,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"8036:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1687,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"8047:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1681,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7973:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"7973:22:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7973:85:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"7953:105:2"},{"assignments":[1691],"declarations":[{"constant":false,"id":1691,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":1712,"src":"8327:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1690,"name":"uint256","nodeType":"ElementaryTypeName","src":"8327:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1693,"initialValue":{"argumentTypes":null,"hexValue":"323036303030","id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8339:6:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_206000_by_1","typeString":"int_const 206000"},"value":"206000"},"nodeType":"VariableDeclarationStatement","src":"8327:18:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1695,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"8359:7:2","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8359:9:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":1697,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"8372:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8359:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6e6f7420656e6f7567682067617320666f7220636f6e73756d6572","id":1699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8375:29:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","typeString":"literal_string \"not enough gas for consumer\""},"value":"not enough gas for consumer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","typeString":"literal_string \"not enough gas for consumer\""}],"id":1694,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8351:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8351:54:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1701,"nodeType":"ExpressionStatement","src":"8351:54:2"},{"assignments":[1703,null],"declarations":[{"constant":false,"id":1703,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":1712,"src":"8830:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1702,"name":"bool","nodeType":"ElementaryTypeName","src":"8830:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},null],"id":1708,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1706,"name":"resp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"8869:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"id":1704,"name":"consumerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"8847:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8847:21:2","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8847:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"8829:45:2"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1709,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"9037:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1710,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9036:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1711,"nodeType":"ExpressionStatement","src":"9036:9:2"}]},"documentation":null,"id":1713,"implemented":true,"kind":"function","modifiers":[],"name":"callBackWithRandomness","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1669,"mutability":"mutable","name":"requestId","nodeType":"VariableDeclaration","overrides":null,"scope":1713,"src":"7693:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7693:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1671,"mutability":"mutable","name":"randomness","nodeType":"VariableDeclaration","overrides":null,"scope":1713,"src":"7712:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1670,"name":"uint256","nodeType":"ElementaryTypeName","src":"7712:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1673,"mutability":"mutable","name":"consumerContract","nodeType":"VariableDeclaration","overrides":null,"scope":1713,"src":"7736:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1672,"name":"address","nodeType":"ElementaryTypeName","src":"7736:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"7692:69:2"},"returnParameters":{"id":1675,"nodeType":"ParameterList","parameters":[],"src":"7771:0:2"},"scope":1955,"src":"7661:1389:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1850,"nodeType":"Block","src":"9229:1704:2","statements":[{"assignments":[1727],"declarations":[{"constant":false,"id":1727,"mutability":"mutable","name":"BLOCKNUM_OFFSET","nodeType":"VariableDeclaration","overrides":null,"scope":1850,"src":"9387:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1726,"name":"uint256","nodeType":"ElementaryTypeName","src":"9387:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1731,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"hexValue":"30783230","id":1728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9413:4:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":1729,"name":"PROOF_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"9420:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9413:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9387:45:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1733,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"9570:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9570:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":1735,"name":"BLOCKNUM_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"9587:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9570:32:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"77726f6e672070726f6f66206c656e677468","id":1737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9604:20:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_869e73f748a03d1463bb7b47e41dc9f2989934ca6019d0a0e3b068f9645d9228","typeString":"literal_string \"wrong proof length\""},"value":"wrong proof length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_869e73f748a03d1463bb7b47e41dc9f2989934ca6019d0a0e3b068f9645d9228","typeString":"literal_string \"wrong proof length\""}],"id":1732,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9562:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9562:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1739,"nodeType":"ExpressionStatement","src":"9562:63:2"},{"assignments":[1745],"declarations":[{"constant":false,"id":1745,"mutability":"mutable","name":"publicKey","nodeType":"VariableDeclaration","overrides":null,"scope":1850,"src":"9631:27:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"9631:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1744,"length":{"argumentTypes":null,"hexValue":"32","id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9639:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"9631:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"id":1746,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"9631:27:2"},{"assignments":[1748],"declarations":[{"constant":false,"id":1748,"mutability":"mutable","name":"preSeed","nodeType":"VariableDeclaration","overrides":null,"scope":1850,"src":"9664:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1747,"name":"uint256","nodeType":"ElementaryTypeName","src":"9664:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1749,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"9664:15:2"},{"assignments":[1751],"declarations":[{"constant":false,"id":1751,"mutability":"mutable","name":"blockNum","nodeType":"VariableDeclaration","overrides":null,"scope":1850,"src":"9685:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1750,"name":"uint256","nodeType":"ElementaryTypeName","src":"9685:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1752,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"9685:16:2"},{"AST":{"nodeType":"YulBlock","src":"9716:206:2","statements":[{"nodeType":"YulAssignment","src":"9767:43:2","value":{"arguments":[{"name":"_proof","nodeType":"YulIdentifier","src":"9784:6:2"},{"name":"PUBLIC_KEY_OFFSET","nodeType":"YulIdentifier","src":"9792:17:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9780:3:2"},"nodeType":"YulFunctionCall","src":"9780:30:2"},"variableNames":[{"name":"publicKey","nodeType":"YulIdentifier","src":"9767:9:2"}]},{"nodeType":"YulAssignment","src":"9817:45:2","value":{"arguments":[{"arguments":[{"name":"_proof","nodeType":"YulIdentifier","src":"9838:6:2"},{"name":"PRESEED_OFFSET","nodeType":"YulIdentifier","src":"9846:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9834:3:2"},"nodeType":"YulFunctionCall","src":"9834:27:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9828:5:2"},"nodeType":"YulFunctionCall","src":"9828:34:2"},"variableNames":[{"name":"preSeed","nodeType":"YulIdentifier","src":"9817:7:2"}]},{"nodeType":"YulAssignment","src":"9869:47:2","value":{"arguments":[{"arguments":[{"name":"_proof","nodeType":"YulIdentifier","src":"9891:6:2"},{"name":"BLOCKNUM_OFFSET","nodeType":"YulIdentifier","src":"9899:15:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9887:3:2"},"nodeType":"YulFunctionCall","src":"9887:28:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9881:5:2"},"nodeType":"YulFunctionCall","src":"9881:35:2"},"variableNames":[{"name":"blockNum","nodeType":"YulIdentifier","src":"9869:8:2"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1727,"isOffset":false,"isSlot":false,"src":"9899:15:2","valueSize":1},{"declaration":1612,"isOffset":false,"isSlot":false,"src":"9846:14:2","valueSize":1},{"declaration":1609,"isOffset":false,"isSlot":false,"src":"9792:17:2","valueSize":1},{"declaration":1715,"isOffset":false,"isSlot":false,"src":"9784:6:2","valueSize":1},{"declaration":1715,"isOffset":false,"isSlot":false,"src":"9838:6:2","valueSize":1},{"declaration":1715,"isOffset":false,"isSlot":false,"src":"9891:6:2","valueSize":1},{"declaration":1751,"isOffset":false,"isSlot":false,"src":"9869:8:2","valueSize":1},{"declaration":1748,"isOffset":false,"isSlot":false,"src":"9817:7:2","valueSize":1},{"declaration":1745,"isOffset":false,"isSlot":false,"src":"9767:9:2","valueSize":1}],"id":1753,"nodeType":"InlineAssembly","src":"9707:215:2"},{"expression":{"argumentTypes":null,"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1754,"name":"currentKeyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"9927:14:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1756,"name":"publicKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"9954:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1755,"name":"hashOfKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"9944:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint256[2] memory) pure returns (bytes32)"}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9944:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9927:37:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1759,"nodeType":"ExpressionStatement","src":"9927:37:2"},{"expression":{"argumentTypes":null,"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1760,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"9970:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1762,"name":"currentKeyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"9996:14:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1763,"name":"preSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"10012:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1761,"name":"makeRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"9982:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes32,uint256) pure returns (bytes32)"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9982:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9970:50:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1766,"nodeType":"ExpressionStatement","src":"9970:50:2"},{"expression":{"argumentTypes":null,"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1767,"name":"callback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"10026:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_memory_ptr","typeString":"struct VRFCoordinator.Callback memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1768,"name":"callbacks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"10037:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Callback_$1318_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.Callback storage ref)"}},"id":1770,"indexExpression":{"argumentTypes":null,"id":1769,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"10047:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10037:20:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage","typeString":"struct VRFCoordinator.Callback storage ref"}},"src":"10026:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_memory_ptr","typeString":"struct VRFCoordinator.Callback memory"}},"id":1772,"nodeType":"ExpressionStatement","src":"10026:31:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1774,"name":"callback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"10071:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_memory_ptr","typeString":"struct VRFCoordinator.Callback memory"}},"id":1775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"callbackContract","nodeType":"MemberAccess","referencedDeclaration":1313,"src":"10071:25:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10108:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10100:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"10100:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10100:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"10071:39:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6e6f20636f72726573706f6e64696e672072657175657374","id":1781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10112:26:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_0a22e24581fcff86b8b543ef8e2219a473898fcae1e4cc51caf4398ff1ee2d16","typeString":"literal_string \"no corresponding request\""},"value":"no corresponding request"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0a22e24581fcff86b8b543ef8e2219a473898fcae1e4cc51caf4398ff1ee2d16","typeString":"literal_string \"no corresponding request\""}],"id":1773,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10063:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10063:76:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1783,"nodeType":"ExpressionStatement","src":"10063:76:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1785,"name":"callback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"10153:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_memory_ptr","typeString":"struct VRFCoordinator.Callback memory"}},"id":1786,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"seedAndBlockNum","nodeType":"MemberAccess","referencedDeclaration":1317,"src":"10153:24:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1790,"name":"preSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"10208:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1791,"name":"blockNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"10223:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1788,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10191:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10191:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10191:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1787,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10181:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10181:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10153:80:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"77726f6e672070726553656564206f7220626c6f636b206e756d","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10235:28:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_182c2531b114b04c853f145f50dee2870a46a1e8d65b04925e24e7b8421acaeb","typeString":"literal_string \"wrong preSeed or block num\""},"value":"wrong preSeed or block num"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_182c2531b114b04c853f145f50dee2870a46a1e8d65b04925e24e7b8421acaeb","typeString":"literal_string \"wrong preSeed or block num\""}],"id":1784,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10145:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10145:119:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1797,"nodeType":"ExpressionStatement","src":"10145:119:2"},{"assignments":[1799],"declarations":[{"constant":false,"id":1799,"mutability":"mutable","name":"blockHash","nodeType":"VariableDeclaration","overrides":null,"scope":1850,"src":"10271:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1798,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10271:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":1803,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1801,"name":"blockNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"10301:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1800,"name":"blockhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-5,"src":"10291:9:2","typeDescriptions":{"typeIdentifier":"t_function_blockhash_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10291:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10271:39:2"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1804,"name":"blockHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"10320:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10341:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10333:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10333:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10333:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10320:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1828,"nodeType":"IfStatement","src":"10316:159:2","trueBody":{"id":1827,"nodeType":"Block","src":"10345:130:2","statements":[{"expression":{"argumentTypes":null,"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1810,"name":"blockHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"10353:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1813,"name":"blockNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"10393:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1811,"name":"blockHashStore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"10365:14:2","typeDescriptions":{"typeIdentifier":"t_contract$_BlockHashStoreInterface_$2015","typeString":"contract BlockHashStoreInterface"}},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getBlockhash","nodeType":"MemberAccess","referencedDeclaration":2014,"src":"10365:27:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view external returns (bytes32)"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10365:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10353:49:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1816,"nodeType":"ExpressionStatement","src":"10353:49:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1818,"name":"blockHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"10418:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10439:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10431:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1819,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10431:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10431:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10418:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"706c656173652070726f766520626c6f636b68617368","id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10443:24:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_157072dad8ce8f12a15c5ba33c5d629a5a70dd4d33c211f18b8f659f385ec149","typeString":"literal_string \"please prove blockhash\""},"value":"please prove blockhash"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_157072dad8ce8f12a15c5ba33c5d629a5a70dd4d33c211f18b8f659f385ec149","typeString":"literal_string \"please prove blockhash\""}],"id":1817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10410:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10410:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1826,"nodeType":"ExpressionStatement","src":"10410:58:2"}]}},{"assignments":[1830],"declarations":[{"constant":false,"id":1830,"mutability":"mutable","name":"actualSeed","nodeType":"VariableDeclaration","overrides":null,"scope":1850,"src":"10556:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"10556:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1841,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1836,"name":"preSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"10612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1837,"name":"blockHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"10621:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"argumentTypes":null,"id":1834,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10595:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10595:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10595:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1833,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10585:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10585:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10577:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1831,"name":"uint256","nodeType":"ElementaryTypeName","src":"10577:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10577:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10556:77:2"},{"AST":{"nodeType":"YulBlock","src":"10700:153:2","statements":[{"expression":{"arguments":[{"arguments":[{"name":"_proof","nodeType":"YulIdentifier","src":"10776:6:2"},{"name":"PRESEED_OFFSET","nodeType":"YulIdentifier","src":"10784:14:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10772:3:2"},"nodeType":"YulFunctionCall","src":"10772:27:2"},{"name":"actualSeed","nodeType":"YulIdentifier","src":"10801:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10765:6:2"},"nodeType":"YulFunctionCall","src":"10765:47:2"},"nodeType":"YulExpressionStatement","src":"10765:47:2"},{"expression":{"arguments":[{"name":"_proof","nodeType":"YulIdentifier","src":"10826:6:2"},{"name":"PROOF_LENGTH","nodeType":"YulIdentifier","src":"10834:12:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10819:6:2"},"nodeType":"YulFunctionCall","src":"10819:28:2"},"nodeType":"YulExpressionStatement","src":"10819:28:2"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1612,"isOffset":false,"isSlot":false,"src":"10784:14:2","valueSize":1},{"declaration":1016,"isOffset":false,"isSlot":false,"src":"10834:12:2","valueSize":1},{"declaration":1715,"isOffset":false,"isSlot":false,"src":"10776:6:2","valueSize":1},{"declaration":1715,"isOffset":false,"isSlot":false,"src":"10826:6:2","valueSize":1},{"declaration":1830,"isOffset":false,"isSlot":false,"src":"10801:10:2","valueSize":1}],"id":1842,"nodeType":"InlineAssembly","src":"10691:162:2"},{"expression":{"argumentTypes":null,"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1843,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"10858:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1846,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"10899:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"id":1844,"name":"VRF","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"10871:3:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRF_$1144_$","typeString":"type(contract VRF)"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"randomValueFromVRFProof","nodeType":"MemberAccess","referencedDeclaration":1143,"src":"10871:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) view returns (uint256)"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10871:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10858:48:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1849,"nodeType":"ExpressionStatement","src":"10858:48:2"}]},"documentation":null,"id":1851,"implemented":true,"kind":"function","modifiers":[],"name":"getRandomnessFromProof","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1715,"mutability":"mutable","name":"_proof","nodeType":"VariableDeclaration","overrides":null,"scope":1851,"src":"9086:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1714,"name":"bytes","nodeType":"ElementaryTypeName","src":"9086:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"9085:21:2"},"returnParameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1718,"mutability":"mutable","name":"currentKeyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1851,"src":"9134:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9134:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1720,"mutability":"mutable","name":"callback","nodeType":"VariableDeclaration","overrides":null,"scope":1851,"src":"9158:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_memory_ptr","typeString":"struct VRFCoordinator.Callback"},"typeName":{"contractScope":null,"id":1719,"name":"Callback","nodeType":"UserDefinedTypeName","referencedDeclaration":1318,"src":"9158:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_Callback_$1318_storage_ptr","typeString":"struct VRFCoordinator.Callback"}},"value":null,"visibility":"internal"},{"constant":false,"id":1722,"mutability":"mutable","name":"requestId","nodeType":"VariableDeclaration","overrides":null,"scope":1851,"src":"9190:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9190:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"randomness","nodeType":"VariableDeclaration","overrides":null,"scope":1851,"src":"9209:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1723,"name":"uint256","nodeType":"ElementaryTypeName","src":"9209:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9133:95:2"},"scope":1955,"src":"9054:1879:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1883,"nodeType":"Block","src":"11258:135:2","statements":[{"expression":{"argumentTypes":null,"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1862,"name":"withdrawableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"11264:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1865,"indexExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1863,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11283:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11283:10:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11264:30:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1871,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"11332:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1866,"name":"withdrawableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"11297:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1869,"indexExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1867,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11316:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11316:10:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11297:30:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":2266,"src":"11297:34:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11297:43:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11264:76:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1874,"nodeType":"ExpressionStatement","src":"11264:76:2"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1878,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"11367:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1879,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"11379:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1876,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"11353:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2087,"src":"11353:13:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11353:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1875,"name":"assert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-3,"src":"11346:6:2","typeDescriptions":{"typeIdentifier":"t_function_assert_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11346:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1882,"nodeType":"ExpressionStatement","src":"11346:42:2"}]},"documentation":{"id":1852,"nodeType":"StructuredDocumentation","src":"10937:217:2","text":"@dev Allows the oracle operator to withdraw their LINK\n@param _recipient is the address the funds will be sent to\n@param _amount is the amount of LINK transferred from the Coordinator contract"},"functionSelector":"f3fef3a3","id":1884,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"argumentTypes":null,"id":1859,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"11247:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1860,"modifierName":{"argumentTypes":null,"id":1858,"name":"hasAvailableFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"11229:17:2","typeDescriptions":{"typeIdentifier":"t_modifier$_t_uint256_$","typeString":"modifier (uint256)"}},"nodeType":"ModifierInvocation","src":"11229:26:2"}],"name":"withdraw","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"_recipient","nodeType":"VariableDeclaration","overrides":null,"scope":1884,"src":"11175:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1853,"name":"address","nodeType":"ElementaryTypeName","src":"11175:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1856,"mutability":"mutable","name":"_amount","nodeType":"VariableDeclaration","overrides":null,"scope":1884,"src":"11195:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1855,"name":"uint256","nodeType":"ElementaryTypeName","src":"11195:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11174:37:2"},"returnParameters":{"id":1861,"nodeType":"ParameterList","parameters":[],"src":"11258:0:2"},"scope":1955,"src":"11157:236:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1901,"nodeType":"Block","src":"11624:57:2","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1897,"name":"_publicKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"11664:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"argumentTypes":null,"id":1895,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11647:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11647:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11647:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1894,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"11637:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11637:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1893,"id":1900,"nodeType":"Return","src":"11630:46:2"}]},"documentation":{"id":1885,"nodeType":"StructuredDocumentation","src":"11397:145:2","text":"@notice Returns the serviceAgreements key associated with this public key\n@param _publicKey the key to return the address for"},"functionSelector":"caf70c4a","id":1902,"implemented":true,"kind":"function","modifiers":[],"name":"hashOfKey","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"_publicKey","nodeType":"VariableDeclaration","overrides":null,"scope":1902,"src":"11564:28:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1886,"name":"uint256","nodeType":"ElementaryTypeName","src":"11564:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1888,"length":{"argumentTypes":null,"hexValue":"32","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11572:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"11564:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"value":null,"visibility":"internal"}],"src":"11563:30:2"},"returnParameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1902,"src":"11615:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1891,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11615:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"11614:9:2"},"scope":1955,"src":"11545:136:2","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":1920,"nodeType":"Block","src":"11950:94:2","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1910,"name":"_feePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"11964:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1911,"name":"serviceAgreements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"11976:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ServiceAgreement_$1325_storage_$","typeString":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement storage ref)"}},"id":1913,"indexExpression":{"argumentTypes":null,"id":1912,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"11994:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11976:27:2","typeDescriptions":{"typeIdentifier":"t_struct$_ServiceAgreement_$1325_storage","typeString":"struct VRFCoordinator.ServiceAgreement storage ref"}},"id":1914,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":1322,"src":"11976:31:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11964:43:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656c6f7720616772656564207061796d656e74","id":1916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12009:22:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_556a58e105a3b1cd1951dab88bc23d33e7619e179db000ae1af5dd131c5cb42c","typeString":"literal_string \"Below agreed payment\""},"value":"Below agreed payment"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_556a58e105a3b1cd1951dab88bc23d33e7619e179db000ae1af5dd131c5cb42c","typeString":"literal_string \"Below agreed payment\""}],"id":1909,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11956:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11956:76:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1918,"nodeType":"ExpressionStatement","src":"11956:76:2"},{"id":1919,"nodeType":"PlaceholderStatement","src":"12038:1:2"}]},"documentation":{"id":1903,"nodeType":"StructuredDocumentation","src":"11685:202:2","text":"@dev Reverts if amount is not at least what was agreed upon in the service agreement\n@param _feePaid The payment for the request\n@param _keyHash The key which the request is for"},"id":1921,"name":"sufficientLINK","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":1908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1905,"mutability":"mutable","name":"_feePaid","nodeType":"VariableDeclaration","overrides":null,"scope":1921,"src":"11914:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"11914:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1907,"mutability":"mutable","name":"_keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1921,"src":"11932:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1906,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11932:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"11913:36:2"},"src":"11890:154:2","virtual":false,"visibility":"internal"},{"body":{"id":1936,"nodeType":"Block","src":"12128:77:2","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1925,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12142:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12142:10:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1929,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"12164:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LinkTokenInterface_$2110","typeString":"contract LinkTokenInterface"}],"id":1928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12156:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1927,"name":"address","nodeType":"ElementaryTypeName","src":"12156:7:2","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12156:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12142:27:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d75737420757365204c494e4b20746f6b656e","id":1932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12171:21:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","typeString":"literal_string \"Must use LINK token\""},"value":"Must use LINK token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","typeString":"literal_string \"Must use LINK token\""}],"id":1924,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12134:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12134:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1934,"nodeType":"ExpressionStatement","src":"12134:59:2"},{"id":1935,"nodeType":"PlaceholderStatement","src":"12199:1:2"}]},"documentation":{"id":1922,"nodeType":"StructuredDocumentation","src":"12046:59:2","text":"@dev Reverts if not sent from the LINK token"},"id":1937,"name":"onlyLINK","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":1923,"nodeType":"ParameterList","parameters":[],"src":"12125:2:2"},"src":"12108:97:2","virtual":false,"visibility":"internal"},{"body":{"id":1953,"nodeType":"Block","src":"12412:104:2","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1943,"name":"withdrawableTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"12426:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1946,"indexExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1944,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12445:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12445:10:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12426:30:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":1947,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"12460:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12426:41:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"63616e2774207769746864726177206d6f7265207468616e2062616c616e6365","id":1949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12469:34:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_1bfd9b8799d1b8ba1f420abec270b03aa85606145420f393771c9fcf9a812329","typeString":"literal_string \"can't withdraw more than balance\""},"value":"can't withdraw more than balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1bfd9b8799d1b8ba1f420abec270b03aa85606145420f393771c9fcf9a812329","typeString":"literal_string \"can't withdraw more than balance\""}],"id":1942,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12418:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12418:86:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1951,"nodeType":"ExpressionStatement","src":"12418:86:2"},{"id":1952,"nodeType":"PlaceholderStatement","src":"12510:1:2"}]},"documentation":{"id":1938,"nodeType":"StructuredDocumentation","src":"12209:156:2","text":"@dev Reverts if amount requested is greater than withdrawable balance\n@param _amount The given amount to compare to `withdrawableTokens`"},"id":1954,"name":"hasAvailableFunds","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":1941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1940,"mutability":"mutable","name":"_amount","nodeType":"VariableDeclaration","overrides":null,"scope":1954,"src":"12395:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1939,"name":"uint256","nodeType":"ElementaryTypeName","src":"12395:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12394:17:2"},"src":"12368:148:2","virtual":false,"visibility":"internal"}],"scope":1956,"src":"434:12085:2"}],"src":"32:12488:2"},"id":2},"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol","exportedSymbols":{"VRFRequestIDBase":[2005]},"id":2006,"nodeType":"SourceUnit","nodes":[{"id":1957,"literals":["solidity","^","0.6",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":2005,"linearizedBaseContracts":[2005],"name":"VRFRequestIDBase","nodeType":"ContractDefinition","nodes":[{"body":{"id":1984,"nodeType":"Block","src":"938:90:3","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1976,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"981:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1977,"name":"_userSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"991:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1978,"name":"_requester","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"1002:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1979,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"1014:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1974,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"970:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"970:10:3","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"970:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1973,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"960:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"960:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"952:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"952:7:3","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:71:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1970,"id":1983,"nodeType":"Return","src":"944:79:3"}]},"documentation":{"id":1958,"nodeType":"StructuredDocumentation","src":"88:706:3","text":"@notice returns the seed which is actually input to the VRF coordinator\n   * @dev To prevent repetition of VRF output due to repetition of the\n@dev user-supplied seed, that seed is combined in a hash with the\n@dev user-specific nonce, and the address of the consuming contract. The\n@dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n@dev the final seed, but the nonce does protect against repetition in\n@dev requests which are included in a single block.\n   * @param _userSeed VRF seed input provided by user\n@param _requester Address of the requesting contract\n@param _nonce User-specific nonce at the time of the request"},"id":1985,"implemented":true,"kind":"function","modifiers":[],"name":"makeVRFInputSeed","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1960,"mutability":"mutable","name":"_keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":1985,"src":"823:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"823:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1962,"mutability":"mutable","name":"_userSeed","nodeType":"VariableDeclaration","overrides":null,"scope":1985,"src":"841:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1961,"name":"uint256","nodeType":"ElementaryTypeName","src":"841:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1964,"mutability":"mutable","name":"_requester","nodeType":"VariableDeclaration","overrides":null,"scope":1985,"src":"864:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1963,"name":"address","nodeType":"ElementaryTypeName","src":"864:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1966,"mutability":"mutable","name":"_nonce","nodeType":"VariableDeclaration","overrides":null,"scope":1985,"src":"884:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1965,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"822:77:3"},"returnParameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1969,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1985,"src":"927:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"926:9:3"},"scope":2005,"src":"797:231:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2003,"nodeType":"Block","src":"1509:70:3","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1998,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"1549:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1999,"name":"_vRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"1559:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1996,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1532:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1532:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1532:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1995,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1522:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1522:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1994,"id":2002,"nodeType":"Return","src":"1515:59:3"}]},"documentation":{"id":1986,"nodeType":"StructuredDocumentation","src":"1032:373:3","text":"@notice Returns the id for this request\n@param _keyHash The serviceAgreement ID to be used for this request\n@param _vRFInputSeed The seed to be passed directly to the VRF\n@return The id for this request\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n@dev contract, but the one generated by makeVRFInputSeed"},"id":2004,"implemented":true,"kind":"function","modifiers":[],"name":"makeRequestId","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1988,"mutability":"mutable","name":"_keyHash","nodeType":"VariableDeclaration","overrides":null,"scope":2004,"src":"1436:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1987,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1436:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1990,"mutability":"mutable","name":"_vRFInputSeed","nodeType":"VariableDeclaration","overrides":null,"scope":2004,"src":"1454:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1989,"name":"uint256","nodeType":"ElementaryTypeName","src":"1454:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1430:46:3"},"returnParameters":{"id":1994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2004,"src":"1500:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1500:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"1499:9:3"},"scope":2005,"src":"1408:171:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2006,"src":"57:1524:3"}],"src":"32:1550:3"},"id":3},"@chainlink/contracts/src/v0.6/interfaces/BlockHashStoreInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.6/interfaces/BlockHashStoreInterface.sol","exportedSymbols":{"BlockHashStoreInterface":[2015]},"id":2016,"nodeType":"SourceUnit","nodes":[{"id":2007,"literals":["solidity","0.6",".6"],"nodeType":"PragmaDirective","src":"32:22:4"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":2015,"linearizedBaseContracts":[2015],"name":"BlockHashStoreInterface","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":null,"functionSelector":"e9413d38","id":2014,"implemented":false,"kind":"function","modifiers":[],"name":"getBlockhash","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"number","nodeType":"VariableDeclaration","overrides":null,"scope":2014,"src":"116:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2008,"name":"uint256","nodeType":"ElementaryTypeName","src":"116:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"115:16:4"},"returnParameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2012,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2014,"src":"155:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2011,"name":"bytes32","nodeType":"ElementaryTypeName","src":"155:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"154:9:4"},"scope":2015,"src":"94:70:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2016,"src":"56:110:4"}],"src":"32:135:4"},"id":4},"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol","exportedSymbols":{"LinkTokenInterface":[2110]},"id":2111,"nodeType":"SourceUnit","nodes":[{"id":2017,"literals":["solidity","^","0.6",".0"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":2110,"linearizedBaseContracts":[2110],"name":"LinkTokenInterface","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":null,"functionSelector":"dd62ed3e","id":2026,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2019,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":2026,"src":"109:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2018,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2021,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":2026,"src":"124:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2020,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"108:32:5"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"remaining","nodeType":"VariableDeclaration","overrides":null,"scope":2026,"src":"164:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2023,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"163:19:5"},"scope":2110,"src":"90:93:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"095ea7b3","id":2035,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":2035,"src":"203:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"203:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2030,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":2035,"src":"220:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2029,"name":"uint256","nodeType":"ElementaryTypeName","src":"220:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"202:32:5"},"returnParameters":{"id":2034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2033,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":2035,"src":"253:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2032,"name":"bool","nodeType":"ElementaryTypeName","src":"253:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"252:14:5"},"scope":2110,"src":"186:81:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"70a08231","id":2042,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2037,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":2042,"src":"289:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2036,"name":"address","nodeType":"ElementaryTypeName","src":"289:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"288:15:5"},"returnParameters":{"id":2041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2040,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":2042,"src":"327:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2039,"name":"uint256","nodeType":"ElementaryTypeName","src":"327:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"326:17:5"},"scope":2110,"src":"270:74:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"313ce567","id":2047,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2043,"nodeType":"ParameterList","parameters":[],"src":"364:2:5"},"returnParameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2045,"mutability":"mutable","name":"decimalPlaces","nodeType":"VariableDeclaration","overrides":null,"scope":2047,"src":"390:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2044,"name":"uint8","nodeType":"ElementaryTypeName","src":"390:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"src":"389:21:5"},"scope":2110,"src":"347:64:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"66188463","id":2056,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseApproval","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2049,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":2056,"src":"440:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2048,"name":"address","nodeType":"ElementaryTypeName","src":"440:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2051,"mutability":"mutable","name":"addedValue","nodeType":"VariableDeclaration","overrides":null,"scope":2056,"src":"457:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"457:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"439:37:5"},"returnParameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":2056,"src":"495:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2053,"name":"bool","nodeType":"ElementaryTypeName","src":"495:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"494:14:5"},"scope":2110,"src":"414:95:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"d73dd623","id":2063,"implemented":false,"kind":"function","modifiers":[],"name":"increaseApproval","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":2063,"src":"538:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2057,"name":"address","nodeType":"ElementaryTypeName","src":"538:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2060,"mutability":"mutable","name":"subtractedValue","nodeType":"VariableDeclaration","overrides":null,"scope":2063,"src":"555:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2059,"name":"uint256","nodeType":"ElementaryTypeName","src":"555:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"537:42:5"},"returnParameters":{"id":2062,"nodeType":"ParameterList","parameters":[],"src":"588:0:5"},"scope":2110,"src":"512:77:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"06fdde03","id":2068,"implemented":false,"kind":"function","modifiers":[],"name":"name","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2064,"nodeType":"ParameterList","parameters":[],"src":"605:2:5"},"returnParameters":{"id":2067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2066,"mutability":"mutable","name":"tokenName","nodeType":"VariableDeclaration","overrides":null,"scope":2068,"src":"631:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2065,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"630:25:5"},"scope":2110,"src":"592:64:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"95d89b41","id":2073,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2069,"nodeType":"ParameterList","parameters":[],"src":"674:2:5"},"returnParameters":{"id":2072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2071,"mutability":"mutable","name":"tokenSymbol","nodeType":"VariableDeclaration","overrides":null,"scope":2073,"src":"700:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2070,"name":"string","nodeType":"ElementaryTypeName","src":"700:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"699:27:5"},"scope":2110,"src":"659:68:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"18160ddd","id":2078,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2074,"nodeType":"ParameterList","parameters":[],"src":"750:2:5"},"returnParameters":{"id":2077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2076,"mutability":"mutable","name":"totalTokensIssued","nodeType":"VariableDeclaration","overrides":null,"scope":2078,"src":"776:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"776:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"775:27:5"},"scope":2110,"src":"730:73:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"a9059cbb","id":2087,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":2087,"src":"824:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2079,"name":"address","nodeType":"ElementaryTypeName","src":"824:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":2087,"src":"836:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"836:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"823:27:5"},"returnParameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":2087,"src":"869:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2084,"name":"bool","nodeType":"ElementaryTypeName","src":"869:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"868:14:5"},"scope":2110,"src":"806:77:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"4000aea0","id":2098,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2089,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"911:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2088,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2091,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"923:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2090,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2093,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"938:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2092,"name":"bytes","nodeType":"ElementaryTypeName","src":"938:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"910:48:5"},"returnParameters":{"id":2097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2096,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"977:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2095,"name":"bool","nodeType":"ElementaryTypeName","src":"977:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"976:14:5"},"scope":2110,"src":"886:105:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"23b872dd","id":2109,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2100,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":2109,"src":"1016:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2099,"name":"address","nodeType":"ElementaryTypeName","src":"1016:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2102,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":2109,"src":"1030:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2101,"name":"address","nodeType":"ElementaryTypeName","src":"1030:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2104,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":2109,"src":"1042:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"1042:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1015:41:5"},"returnParameters":{"id":2108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2107,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":2109,"src":"1075:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2106,"name":"bool","nodeType":"ElementaryTypeName","src":"1075:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"1074:14:5"},"scope":2110,"src":"994:95:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2111,"src":"57:1034:5"}],"src":"32:1060:5"},"id":5},"@chainlink/contracts/src/v0.6/vendor/Ownable.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.6/vendor/Ownable.sol","exportedSymbols":{"Ownable":[2211]},"id":2212,"nodeType":"SourceUnit","nodes":[{"id":2112,"literals":["solidity","^","0.6",".0"],"nodeType":"PragmaDirective","src":"32:23:6"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2113,"nodeType":"StructuredDocumentation","src":"57:436:6","text":"@dev Contract module which provides a basic access control mechanism, where\nthere is an account (an owner) that can be granted exclusive access to\nspecific functions.\n * This module is used through inheritance. It will make available the modifier\n`onlyOwner`, which can be aplied to your functions to restrict their use to\nthe owner.\n * This contract has been modified to remove the revokeOwnership function"},"fullyImplemented":true,"id":2211,"linearizedBaseContracts":[2211],"name":"Ownable","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2115,"mutability":"mutable","name":"_owner","nodeType":"VariableDeclaration","overrides":null,"scope":2211,"src":"515:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2114,"name":"address","nodeType":"ElementaryTypeName","src":"515:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"private"},{"anonymous":false,"documentation":null,"id":2121,"name":"OwnershipTransferred","nodeType":"EventDefinition","parameters":{"id":2120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2117,"indexed":true,"mutability":"mutable","name":"previousOwner","nodeType":"VariableDeclaration","overrides":null,"scope":2121,"src":"569:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2116,"name":"address","nodeType":"ElementaryTypeName","src":"569:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2119,"indexed":true,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":2121,"src":"600:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2118,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"568:57:6"},"src":"542:84:6"},{"body":{"id":2138,"nodeType":"Block","src":"744:81:6","statements":[{"expression":{"argumentTypes":null,"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2125,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"750:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2126,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"759:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"759:10:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"750:19:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2129,"nodeType":"ExpressionStatement","src":"750:19:6"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"809:1:6","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"801:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2131,"name":"address","nodeType":"ElementaryTypeName","src":"801:7:6","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"801:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2135,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"813:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2130,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"780:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"780:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2137,"nodeType":"EmitStatement","src":"775:45:6"}]},"documentation":{"id":2122,"nodeType":"StructuredDocumentation","src":"630:87:6","text":"@dev Initializes the contract setting the deployer as the initial owner."},"id":2139,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2123,"nodeType":"ParameterList","parameters":[],"src":"732:2:6"},"returnParameters":{"id":2124,"nodeType":"ParameterList","parameters":[],"src":"744:0:6"},"scope":2211,"src":"720:105:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2147,"nodeType":"Block","src":"940:24:6","statements":[{"expression":{"argumentTypes":null,"id":2145,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"953:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2144,"id":2146,"nodeType":"Return","src":"946:13:6"}]},"documentation":{"id":2140,"nodeType":"StructuredDocumentation","src":"829:61:6","text":"@dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":2148,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2141,"nodeType":"ParameterList","parameters":[],"src":"907:2:6"},"returnParameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2148,"src":"931:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2142,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"930:9:6"},"scope":2211,"src":"893:71:6","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2158,"nodeType":"Block","src":"1065:72:6","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2152,"name":"isOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"1079:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1079:9:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":2154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1090:34:6","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":2151,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1071:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1071:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2156,"nodeType":"ExpressionStatement","src":"1071:54:6"},{"id":2157,"nodeType":"PlaceholderStatement","src":"1131:1:6"}]},"documentation":{"id":2149,"nodeType":"StructuredDocumentation","src":"968:73:6","text":"@dev Throws if called by any account other than the owner."},"id":2159,"name":"onlyOwner","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":2150,"nodeType":"ParameterList","parameters":[],"src":"1062:2:6"},"src":"1044:93:6","virtual":false,"visibility":"internal"},{"body":{"id":2170,"nodeType":"Block","src":"1258:38:6","statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2165,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1271:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1271:10:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":2167,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1285:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1271:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2164,"id":2169,"nodeType":"Return","src":"1264:27:6"}]},"documentation":{"id":2160,"nodeType":"StructuredDocumentation","src":"1141:68:6","text":"@dev Returns true if the caller is the current owner."},"functionSelector":"8f32d59b","id":2171,"implemented":true,"kind":"function","modifiers":[],"name":"isOwner","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2161,"nodeType":"ParameterList","parameters":[],"src":"1228:2:6"},"returnParameters":{"id":2164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2163,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2171,"src":"1252:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2162,"name":"bool","nodeType":"ElementaryTypeName","src":"1252:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"1251:6:6"},"scope":2211,"src":"1212:84:6","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2183,"nodeType":"Block","src":"1497:39:6","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2180,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"1522:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2179,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"1503:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1503:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2182,"nodeType":"ExpressionStatement","src":"1503:28:6"}]},"documentation":{"id":2172,"nodeType":"StructuredDocumentation","src":"1300:132:6","text":"@dev Transfers ownership of the contract to a new account (`newOwner`).\nCan only be called by the current owner."},"functionSelector":"f2fde38b","id":2184,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":2177,"modifierName":{"argumentTypes":null,"id":2176,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"1487:9:6","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"1487:9:6"}],"name":"transferOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":2184,"src":"1462:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2173,"name":"address","nodeType":"ElementaryTypeName","src":"1462:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1461:18:6"},"returnParameters":{"id":2178,"nodeType":"ParameterList","parameters":[],"src":"1497:0:6"},"scope":2211,"src":"1435:101:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2209,"nodeType":"Block","src":"1684:156:6","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2191,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"1698:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1718:1:6","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1710:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2192,"name":"address","nodeType":"ElementaryTypeName","src":"1710:7:6","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1710:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1698:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1722:40:6","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":2190,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1690:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1690:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2199,"nodeType":"ExpressionStatement","src":"1690:73:6"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2201,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1795:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2202,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"1803:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2200,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"1774:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1774:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2204,"nodeType":"EmitStatement","src":"1769:43:6"},{"expression":{"argumentTypes":null,"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2205,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1818:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2206,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"1827:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1818:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2208,"nodeType":"ExpressionStatement","src":"1818:17:6"}]},"documentation":{"id":2185,"nodeType":"StructuredDocumentation","src":"1540:86:6","text":"@dev Transfers ownership of the contract to a new account (`newOwner`)."},"id":2210,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2187,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":2210,"src":"1657:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2186,"name":"address","nodeType":"ElementaryTypeName","src":"1657:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1656:18:6"},"returnParameters":{"id":2189,"nodeType":"ParameterList","parameters":[],"src":"1684:0:6"},"scope":2211,"src":"1629:211:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2212,"src":"494:1348:6"}],"src":"32:1811:6"},"id":6},"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol","exportedSymbols":{"SafeMathChainlink":[2350]},"id":2351,"nodeType":"SourceUnit","nodes":[{"id":2213,"literals":["solidity","^","0.6",".0"],"nodeType":"PragmaDirective","src":"32:23:7"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2214,"nodeType":"StructuredDocumentation","src":"57:563:7","text":"@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":2350,"linearizedBaseContracts":[2350],"name":"SafeMathChainlink","nodeType":"ContractDefinition","nodes":[{"body":{"id":2239,"nodeType":"Block","src":"930:95:7","statements":[{"assignments":[2225],"declarations":[{"constant":false,"id":2225,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":2239,"src":"936:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2224,"name":"uint256","nodeType":"ElementaryTypeName","src":"936:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2229,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2226,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"948:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":2227,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"952:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"948:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"936:17:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2231,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"967:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":2232,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"972:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"967:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"975:29:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":2230,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"959:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"959:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2236,"nodeType":"ExpressionStatement","src":"959:46:7"},{"expression":{"argumentTypes":null,"id":2237,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"1019:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2223,"id":2238,"nodeType":"Return","src":"1012:8:7"}]},"documentation":{"id":2215,"nodeType":"StructuredDocumentation","src":"651:209:7","text":"@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n    * Counterpart to Solidity's `+` operator.\n    * Requirements:\n- Addition cannot overflow."},"id":2240,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2217,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":2240,"src":"876:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2216,"name":"uint256","nodeType":"ElementaryTypeName","src":"876:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2219,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":2240,"src":"887:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2218,"name":"uint256","nodeType":"ElementaryTypeName","src":"887:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"875:22:7"},"returnParameters":{"id":2223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2222,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2240,"src":"921:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"921:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"920:9:7"},"scope":2350,"src":"863:162:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2265,"nodeType":"Block","src":"1344:98:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2251,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"1358:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":2252,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1363:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1358:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:32:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":2250,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1350:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1350:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2256,"nodeType":"ExpressionStatement","src":"1350:49:7"},{"assignments":[2258],"declarations":[{"constant":false,"id":2258,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":2265,"src":"1405:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2257,"name":"uint256","nodeType":"ElementaryTypeName","src":"1405:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2262,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2259,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1417:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":2260,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"1421:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1417:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1405:17:7"},{"expression":{"argumentTypes":null,"id":2263,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"1436:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2249,"id":2264,"nodeType":"Return","src":"1429:8:7"}]},"documentation":{"id":2241,"nodeType":"StructuredDocumentation","src":"1029:245:7","text":"@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n    * Counterpart to Solidity's `-` operator.\n    * Requirements:\n- Subtraction cannot overflow."},"id":2266,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2243,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":2266,"src":"1290:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1290:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2245,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":2266,"src":"1301:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2244,"name":"uint256","nodeType":"ElementaryTypeName","src":"1301:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1289:22:7"},"returnParameters":{"id":2249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2248,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2266,"src":"1335:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"1335:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1334:9:7"},"scope":2350,"src":"1277:165:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2300,"nodeType":"Block","src":"1737:351:7","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2276,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"1952:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1957:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1952:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2282,"nodeType":"IfStatement","src":"1948:35:7","trueBody":{"id":2281,"nodeType":"Block","src":"1960:23:7","statements":[{"expression":{"argumentTypes":null,"hexValue":"30","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1975:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2275,"id":2280,"nodeType":"Return","src":"1968:8:7"}]}},{"assignments":[2284],"declarations":[{"constant":false,"id":2284,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":2300,"src":"1989:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2283,"name":"uint256","nodeType":"ElementaryTypeName","src":"1989:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2288,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2285,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"2001:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":2286,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"2005:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2001:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1989:17:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2290,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"2020:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":2291,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"2024:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2020:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":2293,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"2029:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2020:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":2295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2032:35:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":2289,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2012:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2012:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2297,"nodeType":"ExpressionStatement","src":"2012:56:7"},{"expression":{"argumentTypes":null,"id":2298,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"2082:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2275,"id":2299,"nodeType":"Return","src":"2075:8:7"}]},"documentation":{"id":2267,"nodeType":"StructuredDocumentation","src":"1446:221:7","text":"@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n    * Counterpart to Solidity's `*` operator.\n    * Requirements:\n- Multiplication cannot overflow."},"id":2301,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2269,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":2301,"src":"1683:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2268,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":2301,"src":"1694:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1682:22:7"},"returnParameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2301,"src":"1728:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2273,"name":"uint256","nodeType":"ElementaryTypeName","src":"1728:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1727:9:7"},"scope":2350,"src":"1670:418:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2326,"nodeType":"Block","src":"2596:237:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2312,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"2672:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2676:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2672:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2679:28:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":2311,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2664:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2664:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2317,"nodeType":"ExpressionStatement","src":"2664:44:7"},{"assignments":[2319],"declarations":[{"constant":false,"id":2319,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":2326,"src":"2714:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2318,"name":"uint256","nodeType":"ElementaryTypeName","src":"2714:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2323,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2320,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"2726:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":2321,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"2730:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2726:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2714:17:7"},{"expression":{"argumentTypes":null,"id":2324,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2319,"src":"2827:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2310,"id":2325,"nodeType":"Return","src":"2820:8:7"}]},"documentation":{"id":2302,"nodeType":"StructuredDocumentation","src":"2092:434:7","text":"@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n    * Requirements:\n- The divisor cannot be zero."},"id":2327,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":2327,"src":"2542:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"2542:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2306,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":2327,"src":"2553:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2305,"name":"uint256","nodeType":"ElementaryTypeName","src":"2553:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2541:22:7"},"returnParameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2327,"src":"2587:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2308,"name":"uint256","nodeType":"ElementaryTypeName","src":"2587:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2586:9:7"},"scope":2350,"src":"2529:304:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2348,"nodeType":"Block","src":"3330:72:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2338,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"3344:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3349:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3344:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3352:26:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":2337,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3336:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3336:43:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2343,"nodeType":"ExpressionStatement","src":"3336:43:7"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2344,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2330,"src":"3392:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"id":2345,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"3396:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3392:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2336,"id":2347,"nodeType":"Return","src":"3385:12:7"}]},"documentation":{"id":2328,"nodeType":"StructuredDocumentation","src":"2837:423:7","text":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n    * Requirements:\n- The divisor cannot be zero."},"id":2349,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2330,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":2349,"src":"3276:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2329,"name":"uint256","nodeType":"ElementaryTypeName","src":"3276:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2332,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":2349,"src":"3287:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"3287:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3275:22:7"},"returnParameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2349,"src":"3321:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2334,"name":"uint256","nodeType":"ElementaryTypeName","src":"3321:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3320:9:7"},"scope":2350,"src":"3263:139:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2351,"src":"621:2783:7"}],"src":"32:3373:7"},"id":7},"contracts/test/VrfCoordinatorV2Mock.sol":{"ast":{"absolutePath":"contracts/test/VrfCoordinatorV2Mock.sol","exportedSymbols":{},"id":2354,"nodeType":"SourceUnit","nodes":[{"id":2352,"literals":["solidity",">=","0.6",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"33:33:8"},{"absolutePath":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol","file":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol","id":2353,"nodeType":"ImportDirective","scope":2354,"sourceUnit":1956,"src":"68:58:8","symbolAliases":[],"unitAlias":""}],"src":"33:93:8"},"id":8}},"contracts":{"@chainlink/contracts/src/v0.6/VRF.sol":{"VRF":{"abi":[{"inputs":[],"name":"PROOF_LENGTH","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Bibliographic references:Goldberg, et al., \"Verifiable Random Functions (VRFs)\", Internet Draftdraft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05Papadopoulos, et al., \"Making NSEC5 Practical for DNSSEC\", CryptologyePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf ****************************************************************************USAGEThe main entry point is randomValueFromVRFProof. See its docstring. ****************************************************************************PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is computationally indistinguishable to her from a uniformrandom sample from the output space.The purpose of this contract is to perform that verification. ****************************************************************************DESIGN NOTESThe VRF algorithm verified here satisfies the full unqiqueness, fullcollision resistance, and full pseudorandomness security properties.See \"SECURITY PROPERTIES\" below, andhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3An elliptic curve point is generally represented in the solidity codeas a uint256[2], corresponding to its affine coordinates inGF(FIELD_SIZE).For the sake of efficiency, this implementation deviates from the specin some minor ways:- Keccak hash rather than the SHA256 hash recommended inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5Keccak costs much less gas on the EVM, and provides similar security.- Secp256k1 curve instead of the P-256 or ED25519 curves recommended inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5For curve-point multiplication, it's much cheaper to abuse ECRECOVER- hashToCurve recursively hashes until it finds a curve x-ordinate. Onthe EVM, this is slightly more efficient than the recommendation inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1step 5, to concatenate with a nonce then hash, and rehash with thenonce updated until a valid x-ordinate is found.- hashToCurve does not include a cipher version string or the byte 0x1in the hash message, as recommended in step 5.B of the draftstandard. They are unnecessary here because no variation in thecipher suite is allowed.- Similarly, the hash input in scalarFromCurvePoints does not include acommitment to the cipher suite, either, which differs from step 2 ofhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3. Also, the hash input is the concatenation of the uncompressedpoints, not the compressed points as recommended in step 3.- In the calculation of the challenge value \"c\", the \"u\" value (i.e.the value computed by Reggie as the nonce times the secp256k1generator point, see steps 5 and 7 ofhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3) is replaced by its ethereum address, i.e. the lower 160 bits of thekeccak hash of the original u. This is because we only verify thecalculation of u up to its address, by abusing ECRECOVER. ****************************************************************************SECURITY PROPERTIESHere are the security properties for this VRF:Full uniqueness: For any seed and valid VRF public key, there isexactly one VRF output which can be proved to come from that seed, inthe sense that the proof will pass verifyVRFProof.Full collision resistance: It's cryptographically infeasible to findtwo seeds with same VRF output from a fixed, valid VRF keyFull pseudorandomness: Absent the proofs that the VRF outputs arederived from a given seed, the outputs are computationallyindistinguishable from randomness.https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofsfor these properties.For secp256k1, the key validation described in sectionhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6is unnecessary, because secp256k1 has cofactor 1, and therepresentation of the public key used here (affine x- and y-ordinatesof the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer tothe point at infinity. ****************************************************************************OTHER SECURITY CONSIDERATIONSThe seed input to the VRF could in principle force an arbitrary amountof work in hashToCurve, by requiring extra rounds of hashing andchecking whether that's yielded the x ordinate of a secp256k1 point.However, under the Random Oracle Model the probability of choosing apoint which forces n extra rounds in hashToCurve is 2⁻ⁿ. The base costfor calling hashToCurve is about 25,000 gas, and each round of checkingfor a valid x ordinate costs about 15,555 gas, so to find a seed forwhich hashToCurve would cost more than 2,017,000 gas, one would have totry, in expectation, about 2¹²⁸ seeds, which is infeasible for anyforeseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)Since the gas block limit for the Ethereum main net is 10,000,000 gas,this means it is infeasible for an adversary to prevent correctoperation of this contract by choosing an adverse seed.(See TestMeasureHashToCurveGasCost for verification of the gas cost forhashToCurve.)It may be possible to make a secure constant-time hashToCurve function.See notes in hashToCurve docstring.","methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"6080604052348015600f57600080fd5b5060858061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063e911439c14602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6101a08156fea2646970667358221220d0a1f1af50ee828774e0dd1de37b9eb722c90299a261b6cff9bb518bf5ffde4764736f6c63430006060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x85 DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE911439C EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x49 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A0 DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 LOG1 CALL 0xAF POP 0xEE DUP3 DUP8 PUSH21 0xE0DD1DE37B9EB722C90299A261B6CFF9BB518BF5FF 0xDE SELFBALANCE PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ","sourceMap":"7169:19411:0:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7169:19411:0;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"6080604052348015600f57600080fd5b506004361060285760003560e01c8063e911439c14602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6101a08156fea2646970667358221220d0a1f1af50ee828774e0dd1de37b9eb722c90299a261b6cff9bb518bf5ffde4764736f6c63430006060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE911439C EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x49 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A0 DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 LOG1 CALL 0xAF POP 0xEE DUP3 DUP8 PUSH21 0xE0DD1DE37B9EB722C90299A261B6CFF9BB518BF5FF 0xDE SELFBALANCE PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ","sourceMap":"7169:19411:0:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7169:19411:0;;;;;;;;;;;;;;;;12:1:-1;9;2:12;24626:351:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;24662:315;24626:351;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"26600","executionCost":"81","totalCost":"26681"},"external":{"PROOF_LENGTH()":"183"},"internal":{"affineECAdd(uint256[2] memory,uint256[2] memory,uint256)":"infinite","bigModExp(uint256,uint256)":"infinite","ecmulVerify(uint256[2] memory,uint256,uint256[2] memory)":"infinite","fieldHash(bytes memory)":"infinite","hashToCurve(uint256[2] memory,uint256)":"infinite","isOnCurve(uint256[2] memory)":"infinite","linearCombination(uint256,uint256[2] memory,uint256[2] memory,uint256,uint256[2] memory,uint256[2] memory,uint256)":"infinite","newCandidateSecp256k1Point(bytes memory)":"infinite","projectiveECAdd(uint256,uint256,uint256,uint256)":"infinite","projectiveMul(uint256,uint256,uint256,uint256)":"infinite","projectiveSub(uint256,uint256,uint256,uint256)":"infinite","randomValueFromVRFProof(bytes memory)":"infinite","scalarFromCurvePoints(uint256[2] memory,uint256[2] memory,uint256[2] memory,address,uint256[2] memory)":"infinite","squareRoot(uint256)":"infinite","verifyLinearCombinationWithGenerator(uint256,uint256[2] memory,uint256,address)":"infinite","verifyVRFProof(uint256[2] memory,uint256[2] memory,uint256,uint256,uint256,address,uint256[2] memory,uint256[2] memory,uint256)":"infinite","ySquared(uint256)":"infinite"}},"methodIdentifiers":{"PROOF_LENGTH()":"e911439c"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PROOF_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Bibliographic references:Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draftdraft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", CryptologyePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf ****************************************************************************USAGEThe main entry point is randomValueFromVRFProof. See its docstring. ****************************************************************************PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is computationally indistinguishable to her from a uniformrandom sample from the output space.The purpose of this contract is to perform that verification. ****************************************************************************DESIGN NOTESThe VRF algorithm verified here satisfies the full unqiqueness, fullcollision resistance, and full pseudorandomness security properties.See \\\"SECURITY PROPERTIES\\\" below, andhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3An elliptic curve point is generally represented in the solidity codeas a uint256[2], corresponding to its affine coordinates inGF(FIELD_SIZE).For the sake of efficiency, this implementation deviates from the specin some minor ways:- Keccak hash rather than the SHA256 hash recommended inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5Keccak costs much less gas on the EVM, and provides similar security.- Secp256k1 curve instead of the P-256 or ED25519 curves recommended inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5For curve-point multiplication, it's much cheaper to abuse ECRECOVER- hashToCurve recursively hashes until it finds a curve x-ordinate. Onthe EVM, this is slightly more efficient than the recommendation inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1step 5, to concatenate with a nonce then hash, and rehash with thenonce updated until a valid x-ordinate is found.- hashToCurve does not include a cipher version string or the byte 0x1in the hash message, as recommended in step 5.B of the draftstandard. They are unnecessary here because no variation in thecipher suite is allowed.- Similarly, the hash input in scalarFromCurvePoints does not include acommitment to the cipher suite, either, which differs from step 2 ofhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3. Also, the hash input is the concatenation of the uncompressedpoints, not the compressed points as recommended in step 3.- In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.the value computed by Reggie as the nonce times the secp256k1generator point, see steps 5 and 7 ofhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3) is replaced by its ethereum address, i.e. the lower 160 bits of thekeccak hash of the original u. This is because we only verify thecalculation of u up to its address, by abusing ECRECOVER. ****************************************************************************SECURITY PROPERTIESHere are the security properties for this VRF:Full uniqueness: For any seed and valid VRF public key, there isexactly one VRF output which can be proved to come from that seed, inthe sense that the proof will pass verifyVRFProof.Full collision resistance: It's cryptographically infeasible to findtwo seeds with same VRF output from a fixed, valid VRF keyFull pseudorandomness: Absent the proofs that the VRF outputs arederived from a given seed, the outputs are computationallyindistinguishable from randomness.https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofsfor these properties.For secp256k1, the key validation described in sectionhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6is unnecessary, because secp256k1 has cofactor 1, and therepresentation of the public key used here (affine x- and y-ordinatesof the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer tothe point at infinity. ****************************************************************************OTHER SECURITY CONSIDERATIONSThe seed input to the VRF could in principle force an arbitrary amountof work in hashToCurve, by requiring extra rounds of hashing andchecking whether that's yielded the x ordinate of a secp256k1 point.However, under the Random Oracle Model the probability of choosing apoint which forces n extra rounds in hashToCurve is 2\\u207b\\u207f. The base costfor calling hashToCurve is about 25,000 gas, and each round of checkingfor a valid x ordinate costs about 15,555 gas, so to find a seed forwhich hashToCurve would cost more than 2,017,000 gas, one would have totry, in expectation, about 2\\u00b9\\u00b2\\u2078 seeds, which is infeasible for anyforeseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)Since the gas block limit for the Ethereum main net is 10,000,000 gas,this means it is infeasible for an adversary to prevent correctoperation of this contract by choosing an adverse seed.(See TestMeasureHashToCurveGasCost for verification of the gas cost forhashToCurve.)It may be possible to make a secure constant-time hashToCurve function.See notes in hashToCurve docstring.\",\"methods\":{}},\"userdoc\":{\"methods\":{},\"notice\":\"****************************************************************************Verification of verifiable-random-function (VRF) proofs, followinghttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3See https://eprint.iacr.org/2017/099.pdf for security proofs.\"}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/VRF.sol\":\"VRF\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\n/** ****************************************************************************\\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\\n\\n  * @dev Bibliographic references:\\n\\n  * @dev Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draft\\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\\n\\n  * @dev Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", Cryptology\\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\\n  * ****************************************************************************\\n  * @dev USAGE\\n\\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\\n  * ****************************************************************************\\n  * @dev PURPOSE\\n\\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\\n  * @dev Reggie, he gives back a value which is computed completely\\n  * @dev deterministically from the seed and the secret key.\\n\\n  * @dev Reggie provides a proof by which Vera can verify that the output was\\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\\n  * @dev the output is computationally indistinguishable to her from a uniform\\n  * @dev random sample from the output space.\\n\\n  * @dev The purpose of this contract is to perform that verification.\\n  * ****************************************************************************\\n  * @dev DESIGN NOTES\\n\\n  * @dev The VRF algorithm verified here satisfies the full unqiqueness, full\\n  * @dev collision resistance, and full pseudorandomness security properties.\\n  * @dev See \\\"SECURITY PROPERTIES\\\" below, and\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\\n\\n  * @dev An elliptic curve point is generally represented in the solidity code\\n  * @dev as a uint256[2], corresponding to its affine coordinates in\\n  * @dev GF(FIELD_SIZE).\\n\\n  * @dev For the sake of efficiency, this implementation deviates from the spec\\n  * @dev in some minor ways:\\n\\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\\n\\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\\n\\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\\n  * @dev   nonce updated until a valid x-ordinate is found.\\n\\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\\n  * @dev   in the hash message, as recommended in step 5.B of the draft\\n  * @dev   standard. They are unnecessary here because no variation in the\\n  * @dev   cipher suite is allowed.\\n\\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\\n  * @dev   points, not the compressed points as recommended in step 3.\\n\\n  * @dev - In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.\\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\\n  * @dev   generator point, see steps 5 and 7 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\\n  * @dev   keccak hash of the original u. This is because we only verify the\\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\\n  * ****************************************************************************\\n  * @dev   SECURITY PROPERTIES\\n\\n  * @dev Here are the security properties for this VRF:\\n\\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\\n  * @dev   the sense that the proof will pass verifyVRFProof.\\n\\n  * @dev Full collision resistance: It's cryptographically infeasible to find\\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\\n\\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\\n  * @dev   derived from a given seed, the outputs are computationally\\n  * @dev   indistinguishable from randomness.\\n\\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\\n  * @dev for these properties.\\n\\n  * @dev For secp256k1, the key validation described in section\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\\n  * @dev representation of the public key used here (affine x- and y-ordinates\\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\\n  * @dev the point at infinity.\\n  * ****************************************************************************\\n  * @dev OTHER SECURITY CONSIDERATIONS\\n  *\\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\\n  * @dev However, under the Random Oracle Model the probability of choosing a\\n  * @dev point which forces n extra rounds in hashToCurve is 2\\u207b\\u207f. The base cost\\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\\n  * @dev try, in expectation, about 2\\u00b9\\u00b2\\u2078 seeds, which is infeasible for any\\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\\n\\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\\n  * @dev this means it is infeasible for an adversary to prevent correct\\n  * @dev operation of this contract by choosing an adverse seed.\\n\\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\\n  * @dev hashToCurve.)\\n\\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\\n  * @dev See notes in hashToCurve docstring.\\n*/\\ncontract VRF {\\n\\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\\n  uint256 constant private GROUP_ORDER = // Number of points in Secp256k1\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  // Prime characteristic of the galois field over which Secp256k1 is defined\\n  uint256 constant private FIELD_SIZE =\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n  uint256 constant private WORD_LENGTH_BYTES = 0x20;\\n\\n  // (base^exponent) % FIELD_SIZE\\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\\n  function bigModExp(uint256 base, uint256 exponent)\\n    internal view returns (uint256 exponentiation) {\\n      uint256 callResult;\\n      uint256[6] memory bigModExpContractInputs;\\n      bigModExpContractInputs[0] = WORD_LENGTH_BYTES;  // Length of base\\n      bigModExpContractInputs[1] = WORD_LENGTH_BYTES;  // Length of exponent\\n      bigModExpContractInputs[2] = WORD_LENGTH_BYTES;  // Length of modulus\\n      bigModExpContractInputs[3] = base;\\n      bigModExpContractInputs[4] = exponent;\\n      bigModExpContractInputs[5] = FIELD_SIZE;\\n      uint256[1] memory output;\\n      assembly { // solhint-disable-line no-inline-assembly\\n      callResult := staticcall(\\n        not(0),                   // Gas cost: no limit\\n        0x05,                     // Bigmodexp contract address\\n        bigModExpContractInputs,\\n        0xc0,                     // Length of input segment: 6*0x20-bytes\\n        output,\\n        0x20                      // Length of output segment\\n      )\\n      }\\n      if (callResult == 0) {revert(\\\"bigModExp failure!\\\");}\\n      return output[0];\\n    }\\n\\n  // Let q=FIELD_SIZE. q % 4 = 3, \\u2234 x\\u2261r^2 mod q \\u21d2 x^SQRT_POWER\\u2261\\u00b1r mod q.  See\\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\\n  uint256 constant private SQRT_POWER = (FIELD_SIZE + 1) >> 2;\\n\\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\\n  function squareRoot(uint256 x) internal view returns (uint256) {\\n    return bigModExp(x, SQRT_POWER);\\n  }\\n\\n  // The value of y^2 given that (x,y) is on secp256k1.\\n  function ySquared(uint256 x) internal pure returns (uint256) {\\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\\n    return addmod(xCubed, 7, FIELD_SIZE);\\n  }\\n\\n  // True iff p is on secp256k1\\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\\n  }\\n\\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\\n    x_ = uint256(keccak256(b));\\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\\n    // string_to_point in the IETF draft\\n    while (x_ >= FIELD_SIZE) {\\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\\n    }\\n  }\\n\\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\\n  // is always even, due to\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  // step 5.C, which references arbitrary_string_to_point, defined in\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\\n  // returning the point with given x ordinate, and even y ordinate.\\n  function newCandidateSecp256k1Point(bytes memory b)\\n    internal view returns (uint256[2] memory p) {\\n      p[0] = fieldHash(b);\\n      p[1] = squareRoot(ySquared(p[0]));\\n      if (p[1] % 2 == 1) {\\n        p[1] = FIELD_SIZE - p[1];\\n      }\\n    }\\n\\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\\n  // vrf.go/hashToCurveHashPrefix\\n  uint256 constant HASH_TO_CURVE_HASH_PREFIX = 1;\\n\\n  // Cryptographic hash function onto the curve.\\n  //\\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\\n  // DESIGN NOTES above for slight differences.)\\n  //\\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\\n  // \\\"Construction of Rational Points on Elliptic Curves over Finite Fields\\\"\\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\\n  // and suggested by\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\\n  //\\n  // This would greatly simplify the analysis in \\\"OTHER SECURITY CONSIDERATIONS\\\"\\n  // https://www.pivotaltracker.com/story/show/171120900\\n  function hashToCurve(uint256[2] memory pk, uint256 input)\\n    internal view returns (uint256[2] memory rv) {\\n      rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX,\\n                                                       pk, input));\\n      while (!isOnCurve(rv)) {\\n        rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\\n      }\\n    }\\n\\n  /** *********************************************************************\\n   * @notice Check that product==scalar*multiplicand\\n   *\\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\\n   *\\n   * @param multiplicand: secp256k1 point\\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\\n   * @param product: secp256k1 expected to be multiplier * multiplicand\\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\\n   */\\n  function ecmulVerify(uint256[2] memory multiplicand, uint256 scalar,\\n    uint256[2] memory product) internal pure returns(bool verifies)\\n  {\\n    require(scalar != 0); // Rules out an ecrecover failure case\\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\\n    // (x\\u207b\\u00b9 mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\\n    // Explicit conversion to address takes bottom 160 bits\\n    address expected = address(uint256(keccak256(abi.encodePacked(product))));\\n    return (actual == expected);\\n  }\\n\\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveSub(uint256 x1, uint256 z1, uint256 x2, uint256 z2)\\n    internal pure returns(uint256 x3, uint256 z3) {\\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n\\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveMul(uint256 x1, uint256 z1, uint256 x2, uint256 z2)\\n    internal pure returns(uint256 x3, uint256 z3) {\\n      (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n\\n  /** **************************************************************************\\n      @notice Computes elliptic-curve sum, in projective co-ordinates\\n\\n      @dev Using projective coordinates avoids costly divisions\\n\\n      @dev To use this with p and q in affine coordinates, call\\n      @dev projectiveECAdd(px, py, qx, qy). This will return\\n      @dev the addition of (px, py, 1) and (qx, qy, 1), in the\\n      @dev secp256k1 group.\\n\\n      @dev This can be used to calculate the z which is the inverse to zInv\\n      @dev in isValidVRFOutput. But consider using a faster\\n      @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\\n\\n      @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\\n           coordinates of secp256k1 points. That is safe in this contract,\\n           because this method is only used by linearCombination, which checks\\n           points are on the curve via ecrecover.\\n      **************************************************************************\\n      @param px The first affine coordinate of the first summand\\n      @param py The second affine coordinate of the first summand\\n      @param qx The first affine coordinate of the second summand\\n      @param qy The second affine coordinate of the second summand\\n\\n      (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\\n      **************************************************************************\\n      Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\\n      on secp256k1, in P\\u00b2(\\ud835\\udd3d\\u2099)\\n      @return sx \\n      @return sy\\n      @return sz\\n  */\\n  function projectiveECAdd(uint256 px, uint256 py, uint256 qx, uint256 qy)\\n    internal pure returns(uint256 sx, uint256 sy, uint256 sz) {\\n      // See \\\"Group law for E/K : y^2 = x^3 + ax + b\\\", in section 3.1.2, p. 80,\\n      // \\\"Guide to Elliptic Curve Cryptography\\\" by Hankerson, Menezes and Vanstone\\n      // We take the equations there for (sx,sy), and homogenize them to\\n      // projective coordinates. That way, no inverses are required, here, and we\\n      // only need the one inverse in affineECAdd.\\n\\n      // We only need the \\\"point addition\\\" equations from Hankerson et al. Can\\n      // skip the \\\"point doubling\\\" equations because p1 == p2 is cryptographically\\n      // impossible, and require'd not to be the case in linearCombination.\\n\\n      // Add extra \\\"projective coordinate\\\" to the two points\\n      (uint256 z1, uint256 z2) = (1, 1);\\n\\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\\n\\n      uint256 dx; // Accumulates denominator from sx calculation\\n      // sx=((qy-py)/(qx-px))^2-px-qx\\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\\n\\n      uint256 dy; // Accumulates denominator from sy calculation\\n      // sy=((qy-py)/(qx-px))(px-sx)-py\\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\\n\\n      if (dx != dy) { // Cross-multiply to put everything over a common denominator\\n        sx = mulmod(sx, dy, FIELD_SIZE);\\n        sy = mulmod(sy, dx, FIELD_SIZE);\\n        sz = mulmod(dx, dy, FIELD_SIZE);\\n      } else { // Already over a common denominator, use that for z ordinate\\n        sz = dx;\\n      }\\n    }\\n\\n  // p1+p2, as affine points on secp256k1.\\n  //\\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\\n  // It is computed off-chain to save gas.\\n  //\\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\\n  // point doubling.\\n  function affineECAdd(\\n    uint256[2] memory p1, uint256[2] memory p2,\\n    uint256 invZ) internal pure returns (uint256[2] memory) {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \\\"invZ must be inverse of z\\\");\\n    // Clear the z ordinate of the projective representation by dividing through\\n    // by it, to obtain the affine representation\\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\\n  }\\n\\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\\n  // cryptographically high probability.)\\n  function verifyLinearCombinationWithGenerator(\\n    uint256 c, uint256[2] memory p, uint256 s, address lcWitness)\\n    internal pure returns (bool) {\\n      // Rule out ecrecover failure modes which return address 0.\\n      require(lcWitness != address(0), \\\"bad witness\\\");\\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n      // The point corresponding to the address returned by\\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\\n      // (p[0]\\u207b\\u00b9 mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\\n      // See https://crypto.stackexchange.com/a/18106\\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\\n      return computed == lcWitness;\\n    }\\n\\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\\n  // requires cp1Witness != sp2Witness (which is fine for this application,\\n  // since it is cryptographically impossible for them to be equal. In the\\n  // (cryptographically impossible) case that a prover accidentally derives\\n  // a proof with equal c*p1 and s*p2, they should retry with a different\\n  // proof nonce.) Assumes that all points are on secp256k1\\n  // (which is checked in verifyVRFProof below.)\\n  function linearCombination(\\n    uint256 c, uint256[2] memory p1, uint256[2] memory cp1Witness,\\n    uint256 s, uint256[2] memory p2, uint256[2] memory sp2Witness,\\n    uint256 zInv)\\n    internal pure returns (uint256[2] memory) {\\n      require((cp1Witness[0] - sp2Witness[0]) % FIELD_SIZE != 0,\\n              \\\"points in sum must be distinct\\\");\\n      require(ecmulVerify(p1, c, cp1Witness), \\\"First multiplication check failed\\\");\\n      require(ecmulVerify(p2, s, sp2Witness), \\\"Second multiplication check failed\\\");\\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\\n    }\\n\\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\\n  uint256 constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\\n\\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  // The draft calls (in step 7, via the definition of string_to_int, in\\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\\n  // first hash without checking that it corresponds to a number less than the\\n  // group order, which will lead to a slight bias in the sample.\\n  //\\n  // TODO(alx): We could save a bit of gas by following the standard here and\\n  // using the compressed representation of the points, if we collated the y\\n  // parities into a single bytes32.\\n  // https://www.pivotaltracker.com/story/show/171120588\\n  function scalarFromCurvePoints(\\n    uint256[2] memory hash, uint256[2] memory pk, uint256[2] memory gamma,\\n    address uWitness, uint256[2] memory v)\\n    internal pure returns (uint256 s) {\\n      return uint256(\\n        keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX,\\n                                   hash, pk, gamma, v, uWitness)));\\n    }\\n\\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\\n  // and seed. zInv must be the inverse of the third ordinate from\\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\\n  // section 5.3 of the IETF draft.\\n  //\\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\\n  // (which I could make a uint256 without using any extra space.) Would save\\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\\n  function verifyVRFProof(\\n    uint256[2] memory pk, uint256[2] memory gamma, uint256 c, uint256 s,\\n    uint256 seed, address uWitness, uint256[2] memory cGammaWitness,\\n    uint256[2] memory sHashWitness, uint256 zInv)\\n    internal view {\\n      require(isOnCurve(pk), \\\"public key is not on curve\\\");\\n      require(isOnCurve(gamma), \\\"gamma is not on curve\\\");\\n      require(isOnCurve(cGammaWitness), \\\"cGammaWitness is not on curve\\\");\\n      require(isOnCurve(sHashWitness), \\\"sHashWitness is not on curve\\\");\\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\\n      // we use the address of u instead of u itself. Also, here we add the\\n      // terms instead of taking the difference, and in the proof consruction in\\n      // vrf.GenerateProof, we correspondingly take the difference instead of\\n      // taking the sum as they do in step 7 of section 5.1.)\\n      require(\\n        verifyLinearCombinationWithGenerator(c, pk, s, uWitness),\\n        \\\"addr(c*pk+s*g)\\u2260_uWitness\\\"\\n      );\\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\\n      uint256[2] memory hash = hashToCurve(pk, seed);\\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\\n      uint256[2] memory v = linearCombination(\\n        c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\\n      // Steps 7. and 8. of IETF draft section 5.3\\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\\n      require(c == derivedC, \\\"invalid proof\\\");\\n    }\\n\\n  // Domain-separation tag for the hash used as the final VRF output.\\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\\n  uint256 constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\\n\\n  // Length of proof marshaled to bytes array. Shows layout of proof\\n  uint public constant PROOF_LENGTH = 64 + // PublicKey (uncompressed format.)\\n    64 + // Gamma\\n    32 + // C\\n    32 + // S\\n    32 + // Seed\\n    0 + // Dummy entry: The following elements are included for gas efficiency:\\n    32 + // uWitness (gets padded to 256 bits, even though it's only 160)\\n    64 + // cGammaWitness\\n    64 + // sHashWitness\\n    32; // zInv  (Leave Output out, because that can be efficiently calculated)\\n\\n  /* ***************************************************************************\\n   * @notice Returns proof's output, if proof is valid. Otherwise reverts\\n\\n   * @param proof A binary-encoded proof, as output by vrf.Proof.MarshalForSolidityVerifier\\n   *\\n   * Throws if proof is invalid, otherwise:\\n   * @return output i.e., the random output implied by the proof\\n   * ***************************************************************************\\n   * @dev See the calculation of PROOF_LENGTH for the binary layout of proof.\\n   */\\n  function randomValueFromVRFProof(bytes memory proof)\\n    internal view returns (uint256 output) {\\n      require(proof.length == PROOF_LENGTH, \\\"wrong proof length\\\");\\n\\n      uint256[2] memory pk; // parse proof contents into these variables\\n      uint256[2] memory gamma;\\n      // c, s and seed combined (prevents \\\"stack too deep\\\" compilation error)\\n      uint256[3] memory cSSeed;\\n      address uWitness;\\n      uint256[2] memory cGammaWitness;\\n      uint256[2] memory sHashWitness;\\n      uint256 zInv;\\n      (pk, gamma, cSSeed, uWitness, cGammaWitness, sHashWitness, zInv) = abi.decode(\\n        proof, (uint256[2], uint256[2], uint256[3], address, uint256[2],\\n                uint256[2], uint256));\\n      verifyVRFProof(\\n        pk,\\n        gamma,\\n        cSSeed[0], // c\\n        cSSeed[1], // s\\n        cSSeed[2], // seed\\n        uWitness,\\n        cGammaWitness,\\n        sHashWitness,\\n        zInv\\n      );\\n      output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, gamma)));\\n    }\\n}\\n\",\"keccak256\":\"0xd2cb3cda280d2a409c9573625a8e782ade8cc4546a4cca8b532497ca6a356993\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{},"notice":"****************************************************************************Verification of verifiable-random-function (VRF) proofs, followinghttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3See https://eprint.iacr.org/2017/099.pdf for security proofs."}}},"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol":{"VRFConsumerBase":{"abi":[{"inputs":[{"internalType":"address","name":"_vrfCoordinator","type":"address"},{"internalType":"address","name":"_link","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator, _link) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash), and have told you the minimum LINKprice for VRF service. Make sure your contract has sufficient LINK, andcall requestRandomness(keyHash, fee, seed), where seed is the input youwant to generate randomness from.Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomness method.The randomness argument to fulfillRandomness is the actual random valuegenerated from your seed.The requestId argument is generated from the keyHash and the seed bymakeRequestId(keyHash, seed). If your contract could have concurrentrequests open, you can use the requestId to track which seed isassociated with which randomness. See VRFRequestIDBase.sol for moredetails. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.)Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. (Which is critical to making unpredictable randomness! See thenext section.) * *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the ultimate input to the VRF is mixed with the block hash of theblock in which the request is made, user-provided seeds have no impacton its economic security properties. They are only included for APIcompatability with previous versions of this contract.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request.","methods":{"constructor":{"details":"https://docs.chain.link/docs/link-token-contracts","params":{"_link":"address of LINK token contract","_vrfCoordinator":"address of VRFCoordinator contract"}}}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomness(bytes32,uint256)":"94985ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator, _link) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash), and have told you the minimum LINKprice for VRF service. Make sure your contract has sufficient LINK, andcall requestRandomness(keyHash, fee, seed), where seed is the input youwant to generate randomness from.Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomness method.The randomness argument to fulfillRandomness is the actual random valuegenerated from your seed.The requestId argument is generated from the keyHash and the seed bymakeRequestId(keyHash, seed). If your contract could have concurrentrequests open, you can use the requestId to track which seed isassociated with which randomness. See VRFRequestIDBase.sol for moredetails. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.)Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. (Which is critical to making unpredictable randomness! See thenext section.) * *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the ultimate input to the VRF is mixed with the block hash of theblock in which the request is made, user-provided seeds have no impacton its economic security properties. They are only included for APIcompatability with previous versions of this contract.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request.\",\"methods\":{\"constructor\":{\"details\":\"https://docs.chain.link/docs/link-token-contracts\",\"params\":{\"_link\":\"address of LINK token contract\",\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}}},\"userdoc\":{\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\"}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\":\"VRFConsumerBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  using SafeMathChainlink for uint256;\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n    internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee)\\n    internal returns (bytes32 requestId)\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash].add(1);\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) public {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x6023d0e1100e66888001da1820d24c5e3713869bfe28e56200ce952979de3205\"},\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x0c3bd40c63dac8398a979b1228c8ecb1c269c157dd16f2dce2086d2270b65b22\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1227,"contract":"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol:VRFConsumerBase","label":"nonces","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint256)"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************"}}},"@chainlink/contracts/src/v0.6/VRFCoordinator.sol":{"VRFCoordinator":{"abi":[{"inputs":[{"internalType":"address","name":"_link","type":"address"},{"internalType":"address","name":"_blockHashStore","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"NewServiceAgreement","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"seed","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"jobID","type":"bytes32"},{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"requestID","type":"bytes32"}],"name":"RandomnessRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"output","type":"uint256"}],"name":"RandomnessRequestFulfilled","type":"event"},{"inputs":[],"name":"PRESEED_OFFSET","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROOF_LENGTH","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PUBLIC_KEY_OFFSET","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"callbacks","outputs":[{"internalType":"address","name":"callbackContract","type":"address"},{"internalType":"uint96","name":"randomnessFee","type":"uint96"},{"internalType":"bytes32","name":"seedAndBlockNum","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_proof","type":"bytes"}],"name":"fulfillRandomnessRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"_publicKey","type":"uint256[2]"}],"name":"hashOfKey","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onTokenTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"uint256[2]","name":"_publicProvingKey","type":"uint256[2]"},{"internalType":"bytes32","name":"_jobID","type":"bytes32"}],"name":"registerProvingKey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"serviceAgreements","outputs":[{"internalType":"address","name":"vRFOracle","type":"address"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"bytes32","name":"jobID","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"withdrawableTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"methods":{"fulfillRandomnessRequest(bytes)":{"details":"The structure of _proof corresponds to vrf.MarshaledOnChainResponse,in the node source code. I.e., it is a vrf.MarshaledProof with theseed replaced by the preSeed, followed by the hash of the requestingblock.","params":{"_proof":"the proof of randomness. Actual random output built from this"}},"hashOfKey(uint256[2])":{"params":{"_publicKey":"the key to return the address for"}},"isOwner()":{"details":"Returns true if the caller is the current owner."},"onTokenTransfer(address,uint256,bytes)":{"details":"To invoke this, use the requestRandomness method in VRFConsumerBase.The VRFCoordinator will call back to the calling contract when theoracle responds, on the method fulfillRandomness. SeeVRFConsumerBase.fulfilRandomness for its signature. Your consumingcontract should inherit from VRFConsumerBase, and implementfulfilRandomness.","params":{"_data":"abi-encoded call to randomnessRequest","_fee":"amount of LINK sent","_sender":"address: who sent the LINK (must be a contract)"}},"owner()":{"details":"Returns the address of the current owner."},"registerProvingKey(uint256,address,uint256[2],bytes32)":{"params":{"_fee":"minimum LINK payment required to serve randomness","_jobID":"ID of the corresponding chainlink job in the oracle's db","_oracle":"the address of the Chainlink node with the proving key and job","_publicProvingKey":"public key used to prove randomness"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"withdraw(address,uint256)":{"details":"Allows the oracle operator to withdraw their LINK","params":{"_amount":"is the amount of LINK transferred from the Coordinator contract","_recipient":"is the address the funds will be sent to"}}},"title":"VRFCoordinator coordinates on-chain verifiable-randomness requestswith off-chain responses"},"evm":{"bytecode":{"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516136543803806136548339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506134b78061019d6000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c8063a4c0ed361161008c578063d834020911610066578063d834020914610537578063e911439c14610599578063f2fde38b146105b7578063f3fef3a3146105fb576100e9565b8063a4c0ed36146103bb578063b415f4f5146104a0578063caf70c4a146104be576100e9565b806375d35070116100c857806375d35070146102995780638aa7927b146103315780638da5cb5b1461034f5780638f32d59b14610399576100e9565b80626f6ad0146100ee57806321f36509146101465780635e1c1059146101de575b600080fd5b6101306004803603602081101561010457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610649565b6040518082815260200191505060405180910390f35b6101726004803603602081101561015c57600080fd5b8101908080359060200190929190505050610661565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff166bffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b610297600480360360208110156101f457600080fd5b810190808035906020019064010000000081111561021157600080fd5b82018360208201111561022357600080fd5b8035906020019184600183028401116401000000008311171561024557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506106c3565b005b6102c5600480360360208110156102af57600080fd5b810190808035906020019092919050505061087d565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff166bffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b6103396108df565b6040518082815260200191505060405180910390f35b6103576108e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103a161090d565b604051808215151515815260200191505060405180910390f35b61049e600480360360608110156103d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561041857600080fd5b82018360208201111561042a57600080fd5b8035906020019184600183028401116401000000008311171561044c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610964565b005b6104a8610a71565b6040518082815260200191505060405180910390f35b610521600480360360408110156104d457600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610a76565b6040518082815260200191505060405180910390f35b610597600480360360a081101561054d57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060400190919291929080359060200190929190505050610ace565b005b6105a1610e6d565b6040518082815260200191505060405180910390f35b6105f9600480360360208110156105cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e73565b005b6106476004803603604081101561061157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ef9565b005b60056020528060005260406000206000915090505481565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a90046bffffffffffffffffffffffff16908060010154905083565b60006106cd61330c565b6000806106d985611133565b935093509350935060006004600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061078084602001516bffffffffffffffffffffffff16600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461159590919063ffffffff16565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060036000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055600182016000905550506108368383866000015161161d565b7fa2e7a402243ebda4a69ceeb3dfb682943b7a9b3ac66d6eefa8db65894009611c8383604051808381526020018281526020019250505060405180910390a1505050505050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a90046bffffffffffffffffffffffff16908060010154905083565b602081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d75737420757365204c494e4b20746f6b656e0000000000000000000000000081525060200191505060405180910390fd5b600080828060200190516040811015610a3f57600080fd5b81019080805190602001909291908051906020019092919050505091509150610a6a828286886117e0565b5050505050565b60e081565b6000816040516020018082600260200280838360005b83811015610aa7578082015181840152602081019050610a8c565b50505050905001915050604051602081830303815290604052805190602001209050919050565b610ad661090d565b610b48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000610b8a836002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050610a76565b905060006004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f706c656173652072656769737465722061206e6577206b65790000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610d0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5f6f7261636c65206d757374206e6f742062652030783000000000000000000081525060200191505060405180910390fd5b846004600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260046000848152602001908152602001600020600101819055506b033b2e3c9fd0803ce8000000861115610de1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c815260200180613403603c913960400191505060405180910390fd5b856004600084815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055507fae189157e0628c1e62315e9179156e1ea10e90e9c15060002f7021e907dc2cfe8287604051808381526020018281526020019250505060405180910390a1505050505050565b6101a081565b610e7b61090d565b610eed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610ef681611bc8565b50565b8080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610faf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f63616e2774207769746864726177206d6f7265207468616e2062616c616e636581525060200191505060405180910390fd5b61100182600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d0c90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156110ed57600080fd5b505af1158015611101573d6000803e3d6000fd5b505050506040513d602081101561111757600080fd5b810190808051906020019092919050505061112e57fe5b505050565b600061113d61330c565b60008060006101a06020019050808651146111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f77726f6e672070726f6f66206c656e677468000000000000000000000000000081525060200191505060405180910390fd5b6111c8613354565b60008060208901925060e089015191508389015190506111e783610a76565b97506111f38883611d95565b9550600360008781526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016001820154815250509650600073ffffffffffffffffffffffffffffffffffffffff16876000015173ffffffffffffffffffffffffffffffffffffffff16141561135a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6e6f20636f72726573706f6e64696e672072657175657374000000000000000081525060200191505060405180910390fd5b8181604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120876040015114611401576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f77726f6e672070726553656564206f7220626c6f636b206e756d00000000000081525060200191505060405180910390fd5b6000814090506000801b81141561153c57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9413d38836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561148557600080fd5b505afa158015611499573d6000803e3d6000fd5b505050506040513d60208110156114af57600080fd5b810190808051906020019092919050505090506000801b81141561153b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f706c656173652070726f766520626c6f636b686173680000000000000000000081525060200191505060405180910390fd5b5b6000838260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012060001c90508060e08c01526101a08b526115868b611dce565b96505050505050509193509193565b600080828401905083811015611613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600060606394985ddd60e01b85856040516024018083815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000620324b09050805a101561171f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6e6f7420656e6f7567682067617320666f7220636f6e73756d6572000000000081525060200191505060405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b6020831061176c5780518252602082019150602081019050602083039250611749565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146117ce576040519150601f19603f3d011682016040523d82523d6000602084013e6117d3565b606091505b5050905050505050505050565b81846004600082815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16821015611894576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f42656c6f7720616772656564207061796d656e7400000000000000000000000081525060200191505060405180910390fd5b60006006600088815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006118f788888785611f8f565b905060006119058983611d95565b9050600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461197357fe5b856003600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b033b2e3c9fd0803ce800000087106119dd57fe5b866003600083815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555081436040516020018083815260200182815260200192505050604051602081830303815290604052805190602001206003600083815260200190815260200160002060010181905550600460008a8152602001908152602001600020600101547f56bd374744a66d531874338def36c906e3a6cf31176eb1e9afd9f1de69725d518a84898b86604051808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019550505050505060405180910390a2611b696001600660008c815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461159590919063ffffffff16565b600660008b815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806133dd6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115611d84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b60008282604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120905092915050565b60006101a0825114611e48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f77726f6e672070726f6f66206c656e677468000000000000000000000000000081525060200191505060405180910390fd5b611e50613354565b611e58613354565b611e60613376565b6000611e6a613354565b611e72613354565b6000888060200190516101a0811015611e8a57600080fd5b810190809190826040019190826040019190826060018051906020019092919091908260400191908260400180519060200190929190505050839350809750819850829950839a50849b50859c50869d5050505050505050611f26878787600060038110611ef457fe5b602002015188600160038110611f0657fe5b602002015189600260038110611f1857fe5b602002015189898989612009565b6003866040516020018083815260200182600260200280838360005b83811015611f5d578082015181840152602081019050611f42565b50505050905001925050506040516020818303038152906040528051906020012060001c975050505050505050919050565b600084848484604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019450505050506040516020818303038152906040528051906020012060001c9050949350505050565b61201289612334565b612084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7075626c6963206b6579206973206e6f74206f6e20637572766500000000000081525060200191505060405180910390fd5b61208d88612334565b6120ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f67616d6d61206973206e6f74206f6e206375727665000000000000000000000081525060200191505060405180910390fd5b61210883612334565b61217a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6347616d6d615769746e657373206973206e6f74206f6e20637572766500000081525060200191505060405180910390fd5b61218382612334565b6121f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f73486173685769746e657373206973206e6f74206f6e2063757276650000000081525060200191505060405180910390fd5b612201878a88876123a5565b612273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6164647228632a706b2b732a6729e289a05f755769746e65737300000000000081525060200191505060405180910390fd5b61227b613354565b6122858a876125dd565b905061228f613354565b61229e898b878b86898961269c565b905060006122af838d8d8a86612840565b9050808a14612326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c69642070726f6f660000000000000000000000000000000000000081525060200191505060405180910390fd5b505050505050505050505050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061235e57fe5b8260016002811061236b57fe5b60200201518360016002811061237d57fe5b60200201510961239d8360006002811061239357fe5b602002015161296f565b149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f626164207769746e65737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060028660016002811061245b57fe5b60200201518161246757fe5b061461247457601c612477565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141806124a357fe5b85876000600281106124b157fe5b6020020151097ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641410360001b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418061250857fe5b8760006002811061251557fe5b6020020151890960001b90506000600183858a60006002811061253457fe5b602002015160001b8560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612594573d6000803e3d6000fd5b5050506020604051035190508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614945050505050949350505050565b6125e5613354565b612646600184846040516020018084815260200183600260200280838360005b83811015612620578082015181840152602081019050612605565b5050505090500182815260200193505050506040516020818303038152906040526129fd565b90505b61265281612334565b6126965761268f8160006002811061266657fe5b6020020151604051602001808281526020019150506040516020818303038152906040526129fd565b9050612649565b92915050565b6126a4613354565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f846000600281106126d457fe5b6020020151886000600281106126e657fe5b602002015103816126f357fe5b061415612768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f706f696e747320696e2073756d206d7573742062652064697374696e6374000081525060200191505060405180910390fd5b612773878988612ad0565b6127c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061343f6021913960400191505060405180910390fd5b6127d3848685612ad0565b612828576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806134606022913960400191505060405180910390fd5b612833868484612c5b565b9050979650505050505050565b6000600286868685876040516020018087815260200186600260200280838360005b8381101561287d578082015181840152602081019050612862565b5050505090500185600260200280838360005b838110156128ab578082015181840152602081019050612890565b5050505090500184600260200280838360005b838110156128d95780820151818401526020810190506128be565b5050505090500183600260200280838360005b838110156129075780820151818401526020810190506128ec565b505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140196505050505050506040516020818303038152906040528051906020012060001c905095945050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061299a57fe5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806129c257fe5b848509840990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806129f157fe5b60078208915050919050565b612a05613354565b612a0e82612dd9565b81600060028110612a1b57fe5b602002018181525050612a46612a4182600060028110612a3757fe5b602002015161296f565b612e46565b81600160028110612a5357fe5b6020020181815250506001600282600160028110612a6d57fe5b602002015181612a7957fe5b061415612acb5780600160028110612a8d57fe5b60200201517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f0381600160028110612ac157fe5b6020020181815250505b919050565b600080831415612adf57600080fd5b600084600060028110612aee57fe5b60200201519050600080600287600160028110612b0757fe5b602002015181612b1357fe5b0614612b2057601c612b23565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414180612b4f57fe5b83870960001b9050600060016000801b848660001b8560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612bbc573d6000803e3d6000fd5b5050506020604051035190506000866040516020018082600260200280838360005b83811015612bf9578082015181840152602081019050612bde565b505050509050019150506040516020818303038152906040528051906020012060001c90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614955050505050509392505050565b612c63613354565b6000806000612cb887600060028110612c7857fe5b602002015188600160028110612c8a57fe5b602002015188600060028110612c9c57fe5b602002015189600160028110612cae57fe5b6020020151612e80565b80935081945082955050505060017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612cee57fe5b86830914612d64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e765a206d75737420626520696e7665727365206f66207a0000000000000081525060200191505060405180910390fd5b60405180604001604052807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612d9757fe5b87860981526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612dc757fe5b87850981525093505050509392505050565b6000818051906020012060001c90505b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8110612e415780604051602001808281526020019150506040516020818303038152906040528051906020012060001c9050612de9565b919050565b6000612e7982600260017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f01901c613054565b9050919050565b60008060008060006001809150915060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612eb957fe5b897ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038808905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612f0a57fe5b8b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038a0890506000612f3f838385856131b6565b8092508199505050612f5388828e88613220565b8092508199505050612f6788828c87613220565b80925081995050506000612f7d8d878b85613220565b8092508199505050612f91888286866131b6565b8092508199505050612fa588828e89613220565b8092508199505050808214613040577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612fdc57fe5b818a0998507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061300957fe5b82890997507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061303657fe5b8183099650613044565b8196505b5050505050509450945094915050565b60008061305f613398565b60208160006006811061306e57fe5b60200201818152505060208160016006811061308657fe5b60200201818152505060208160026006811061309e57fe5b60200201818152505084816003600681106130b557fe5b60200201818152505083816004600681106130cc57fe5b6020020181815250507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8160056006811061310357fe5b6020020181815250506131146133ba565b60208160c0846005600019fa92506000831415613199576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6269674d6f64457870206661696c75726521000000000000000000000000000081525060200191505060405180910390fd5b806000600181106131a657fe5b6020020151935050505092915050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806131e157fe5b8487097ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061320c57fe5b848709809250819350505094509492505050565b60008060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061324d57fe5b878509905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061327c57fe5b87877ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f030990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806132cb57fe5b8183087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806132f657fe5b8689098094508195505050505094509492505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600080191681525090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060c00160405280600690602082028036833780820191505090505090565b604051806020016040528060019060208202803683378082019150509050509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373796f752063616e277420636861726765206d6f7265207468616e20616c6c20746865204c494e4b20696e2074686520776f726c642c206772656564794669727374206d756c7469706c69636174696f6e20636865636b206661696c65645365636f6e64206d756c7469706c69636174696f6e20636865636b206661696c6564a2646970667358221220035a491d441a550389714fe5f97d27863888ecac4898141e0ad30360c623833264736f6c63430006060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3654 CODESIZE SUB DUP1 PUSH2 0x3654 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH2 0x34B7 DUP1 PUSH2 0x19D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA4C0ED36 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD8340209 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD8340209 EQ PUSH2 0x537 JUMPI DUP1 PUSH4 0xE911439C EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5B7 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x5FB JUMPI PUSH2 0xE9 JUMP JUMPDEST DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0xB415F4F5 EQ PUSH2 0x4A0 JUMPI DUP1 PUSH4 0xCAF70C4A EQ PUSH2 0x4BE JUMPI PUSH2 0xE9 JUMP JUMPDEST DUP1 PUSH4 0x75D35070 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x75D35070 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x8AA7927B EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x399 JUMPI PUSH2 0xE9 JUMP JUMPDEST DUP1 PUSH3 0x6F6AD0 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0x21F36509 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x5E1C1059 EQ PUSH2 0x1DE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x649 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x172 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x661 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x297 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x211 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x6C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x87D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x339 PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x357 PUSH2 0x8E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x49E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x964 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A8 PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x521 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 PUSH1 0x40 ADD SWAP1 PUSH1 0x2 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x597 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x54D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 PUSH1 0x40 ADD SWAP1 SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xACE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5A1 PUSH2 0xE6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE73 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x647 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xEF9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6CD PUSH2 0x330C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6D9 DUP6 PUSH2 0x1133 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x780 DUP5 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1595 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP PUSH2 0x836 DUP4 DUP4 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x161D JUMP JUMPDEST PUSH32 0xA2E7A402243EBDA4A69CEEB3DFB682943B7A9B3AC66D6EEFA8DB65894009611C DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x20 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D75737420757365204C494E4B20746F6B656E00000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP2 POP SWAP2 POP PUSH2 0xA6A DUP3 DUP3 DUP7 DUP9 PUSH2 0x17E0 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAA7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA8C JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0x90D JUMP JUMPDEST PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB8A DUP4 PUSH1 0x2 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP PUSH2 0xA76 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x706C656173652072656769737465722061206E6577206B657900000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD0C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5F6F7261636C65206D757374206E6F7420626520307830000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH12 0x33B2E3C9FD0803CE8000000 DUP7 GT ISZERO PUSH2 0xDE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3403 PUSH1 0x3C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xAE189157E0628C1E62315E9179156E1EA10E90E9C15060002F7021E907DC2CFE DUP3 DUP8 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1A0 DUP2 JUMP JUMPDEST PUSH2 0xE7B PUSH2 0x90D JUMP JUMPDEST PUSH2 0xEED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF6 DUP2 PUSH2 0x1BC8 JUMP JUMPDEST POP JUMP JUMPDEST DUP1 DUP1 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E2774207769746864726177206D6F7265207468616E2062616C616E6365 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1001 DUP3 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1D0C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1101 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x112E JUMPI INVALID JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x113D PUSH2 0x330C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A0 PUSH1 0x20 ADD SWAP1 POP DUP1 DUP7 MLOAD EQ PUSH2 0x11C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x77726F6E672070726F6F66206C656E6774680000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11C8 PUSH2 0x3354 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP10 ADD SWAP3 POP PUSH1 0xE0 DUP10 ADD MLOAD SWAP2 POP DUP4 DUP10 ADD MLOAD SWAP1 POP PUSH2 0x11E7 DUP4 PUSH2 0xA76 JUMP JUMPDEST SWAP8 POP PUSH2 0x11F3 DUP9 DUP4 PUSH2 0x1D95 JUMP JUMPDEST SWAP6 POP PUSH1 0x3 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP7 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x135A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6E6F20636F72726573706F6E64696E6720726571756573740000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP8 PUSH1 0x40 ADD MLOAD EQ PUSH2 0x1401 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x77726F6E672070726553656564206F7220626C6F636B206E756D000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 BLOCKHASH SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x153C JUMPI PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE9413D38 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1499 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x153B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x706C656173652070726F766520626C6F636B6861736800000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x0 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP1 PUSH1 0xE0 DUP13 ADD MSTORE PUSH2 0x1A0 DUP12 MSTORE PUSH2 0x1586 DUP12 PUSH2 0x1DCE JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1613 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH4 0x94985DDD PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH3 0x324B0 SWAP1 POP DUP1 GAS LT ISZERO PUSH2 0x171F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x176C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x1749 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17CE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17D3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP5 PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 LT ISZERO PUSH2 0x1894 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x42656C6F7720616772656564207061796D656E74000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x18F7 DUP9 DUP9 DUP8 DUP6 PUSH2 0x1F8F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1905 DUP10 DUP4 PUSH2 0x1D95 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1973 JUMPI INVALID JUMPDEST DUP6 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH12 0x33B2E3C9FD0803CE8000000 DUP8 LT PUSH2 0x19DD JUMPI INVALID JUMPDEST DUP7 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x4 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH32 0x56BD374744A66D531874338DEF36C906E3A6CF31176EB1E9AFD9F1DE69725D51 DUP11 DUP5 DUP10 DUP12 DUP7 PUSH1 0x40 MLOAD DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x1B69 PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1595 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1C4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x33DD PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1D84 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0 DUP3 MLOAD EQ PUSH2 0x1E48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x77726F6E672070726F6F66206C656E6774680000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E50 PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x1E58 PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x1E60 PUSH2 0x3376 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E6A PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x1E72 PUSH2 0x3354 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1A0 DUP2 LT ISZERO PUSH2 0x1E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 SWAP2 SWAP1 DUP3 PUSH1 0x40 ADD SWAP2 SWAP1 DUP3 PUSH1 0x40 ADD SWAP2 SWAP1 DUP3 PUSH1 0x60 ADD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 SWAP2 SWAP1 DUP3 PUSH1 0x40 ADD SWAP2 SWAP1 DUP3 PUSH1 0x40 ADD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP4 SWAP4 POP DUP1 SWAP8 POP DUP2 SWAP9 POP DUP3 SWAP10 POP DUP4 SWAP11 POP DUP5 SWAP12 POP DUP6 SWAP13 POP DUP7 SWAP14 POP POP POP POP POP POP POP POP PUSH2 0x1F26 DUP8 DUP8 DUP8 PUSH1 0x0 PUSH1 0x3 DUP2 LT PUSH2 0x1EF4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x1 PUSH1 0x3 DUP2 LT PUSH2 0x1F06 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 PUSH1 0x2 PUSH1 0x3 DUP2 LT PUSH2 0x1F18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 DUP10 DUP10 DUP10 PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F5D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1F42 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP8 POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2012 DUP10 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x2084 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7075626C6963206B6579206973206E6F74206F6E206375727665000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x208D DUP9 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x20FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x67616D6D61206973206E6F74206F6E2063757276650000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2108 DUP4 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x217A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6347616D6D615769746E657373206973206E6F74206F6E206375727665000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2183 DUP3 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x21F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x73486173685769746E657373206973206E6F74206F6E20637572766500000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2201 DUP8 DUP11 DUP9 DUP8 PUSH2 0x23A5 JUMP JUMPDEST PUSH2 0x2273 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6164647228632A706B2B732A6729E289A05F755769746E657373000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x227B PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x2285 DUP11 DUP8 PUSH2 0x25DD JUMP JUMPDEST SWAP1 POP PUSH2 0x228F PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x229E DUP10 DUP12 DUP8 DUP12 DUP7 DUP10 DUP10 PUSH2 0x269C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22AF DUP4 DUP14 DUP14 DUP11 DUP7 PUSH2 0x2840 JUMP JUMPDEST SWAP1 POP DUP1 DUP11 EQ PUSH2 0x2326 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E76616C69642070726F6F6600000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x235E JUMPI INVALID JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x236B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x237D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD MULMOD PUSH2 0x239D DUP4 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2393 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x296F JUMP JUMPDEST EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2449 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x626164207769746E657373000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 DUP7 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x245B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH2 0x2467 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x2474 JUMPI PUSH1 0x1C PUSH2 0x2477 JUMP JUMPDEST PUSH1 0x1B JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP1 PUSH2 0x24A3 JUMPI INVALID JUMPDEST DUP6 DUP8 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x24B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD MULMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 SUB PUSH1 0x0 SHL SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP1 PUSH2 0x2508 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2515 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 MULMOD PUSH1 0x0 SHL SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 DUP6 DUP11 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2534 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2594 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP5 POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x25E5 PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x2646 PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2620 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2605 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x29FD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x2652 DUP2 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x2696 JUMPI PUSH2 0x268F DUP2 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2666 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x29FD JUMP JUMPDEST SWAP1 POP PUSH2 0x2649 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x26A4 PUSH2 0x3354 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP5 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x26D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x26E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SUB DUP2 PUSH2 0x26F3 JUMPI INVALID JUMPDEST MOD EQ ISZERO PUSH2 0x2768 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x706F696E747320696E2073756D206D7573742062652064697374696E63740000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2773 DUP8 DUP10 DUP9 PUSH2 0x2AD0 JUMP JUMPDEST PUSH2 0x27C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x343F PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x27D3 DUP5 DUP7 DUP6 PUSH2 0x2AD0 JUMP JUMPDEST PUSH2 0x2828 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3460 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2833 DUP7 DUP5 DUP5 PUSH2 0x2C5B JUMP JUMPDEST SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP7 DUP7 DUP7 DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x287D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2862 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP6 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28AB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2890 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28D9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x28BE JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2907 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x28EC JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x299A JUMPI INVALID JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x29C2 JUMPI INVALID JUMPDEST DUP5 DUP6 MULMOD DUP5 MULMOD SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x29F1 JUMPI INVALID JUMPDEST PUSH1 0x7 DUP3 ADDMOD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A05 PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x2A0E DUP3 PUSH2 0x2DD9 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2A1B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x2A46 PUSH2 0x2A41 DUP3 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2A37 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x296F JUMP JUMPDEST PUSH2 0x2E46 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2A53 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x2 DUP3 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2A6D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH2 0x2A79 JUMPI INVALID JUMPDEST MOD EQ ISZERO PUSH2 0x2ACB JUMPI DUP1 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2A8D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP2 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x2ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2AEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x2 DUP8 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2B07 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH2 0x2B13 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x2B20 JUMPI PUSH1 0x1C PUSH2 0x2B23 JUMP JUMPDEST PUSH1 0x1B JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP1 PUSH2 0x2B4F JUMPI INVALID JUMPDEST DUP4 DUP8 MULMOD PUSH1 0x0 SHL SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 SHL DUP5 DUP7 PUSH1 0x0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BBC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2BF9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2BDE JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2C63 PUSH2 0x3354 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2CB8 DUP8 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2C78 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2C8A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2C9C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2CAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x2E80 JUMP JUMPDEST DUP1 SWAP4 POP DUP2 SWAP5 POP DUP3 SWAP6 POP POP POP POP PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2CEE JUMPI INVALID JUMPDEST DUP7 DUP4 MULMOD EQ PUSH2 0x2D64 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E765A206D75737420626520696E7665727365206F66207A00000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2D97 JUMPI INVALID JUMPDEST DUP8 DUP7 MULMOD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2DC7 JUMPI INVALID JUMPDEST DUP8 DUP6 MULMOD DUP2 MSTORE POP SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 LT PUSH2 0x2E41 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP PUSH2 0x2DE9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E79 DUP3 PUSH1 0x2 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F ADD SWAP1 SHR PUSH2 0x3054 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x1 DUP1 SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2EB9 JUMPI INVALID JUMPDEST DUP10 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP9 ADDMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2F0A JUMPI INVALID JUMPDEST DUP12 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP11 ADDMOD SWAP1 POP PUSH1 0x0 PUSH2 0x2F3F DUP4 DUP4 DUP6 DUP6 PUSH2 0x31B6 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH2 0x2F53 DUP9 DUP3 DUP15 DUP9 PUSH2 0x3220 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH2 0x2F67 DUP9 DUP3 DUP13 DUP8 PUSH2 0x3220 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH1 0x0 PUSH2 0x2F7D DUP14 DUP8 DUP12 DUP6 PUSH2 0x3220 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH2 0x2F91 DUP9 DUP3 DUP7 DUP7 PUSH2 0x31B6 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH2 0x2FA5 DUP9 DUP3 DUP15 DUP10 PUSH2 0x3220 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP DUP1 DUP3 EQ PUSH2 0x3040 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2FDC JUMPI INVALID JUMPDEST DUP2 DUP11 MULMOD SWAP9 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x3009 JUMPI INVALID JUMPDEST DUP3 DUP10 MULMOD SWAP8 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x3036 JUMPI INVALID JUMPDEST DUP2 DUP4 MULMOD SWAP7 POP PUSH2 0x3044 JUMP JUMPDEST DUP2 SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x305F PUSH2 0x3398 JUMP JUMPDEST PUSH1 0x20 DUP2 PUSH1 0x0 PUSH1 0x6 DUP2 LT PUSH2 0x306E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x20 DUP2 PUSH1 0x1 PUSH1 0x6 DUP2 LT PUSH2 0x3086 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x20 DUP2 PUSH1 0x2 PUSH1 0x6 DUP2 LT PUSH2 0x309E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x3 PUSH1 0x6 DUP2 LT PUSH2 0x30B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP2 PUSH1 0x4 PUSH1 0x6 DUP2 LT PUSH2 0x30CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 PUSH1 0x5 PUSH1 0x6 DUP2 LT PUSH2 0x3103 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x3114 PUSH2 0x33BA JUMP JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xC0 DUP5 PUSH1 0x5 PUSH1 0x0 NOT STATICCALL SWAP3 POP PUSH1 0x0 DUP4 EQ ISZERO PUSH2 0x3199 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6269674D6F64457870206661696C757265210000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 PUSH1 0x1 DUP2 LT PUSH2 0x31A6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x31E1 JUMPI INVALID JUMPDEST DUP5 DUP8 MULMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x320C JUMPI INVALID JUMPDEST DUP5 DUP8 MULMOD DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x324D JUMPI INVALID JUMPDEST DUP8 DUP6 MULMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x327C JUMPI INVALID JUMPDEST DUP8 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB MULMOD SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x32CB JUMPI INVALID JUMPDEST DUP2 DUP4 ADDMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x32F6 JUMPI INVALID JUMPDEST DUP7 DUP10 MULMOD DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373796F752063616E277420636861726765 KECCAK256 PUSH14 0x6F7265207468616E20616C6C2074 PUSH9 0x65204C494E4B20696E KECCAK256 PUSH21 0x686520776F726C642C206772656564794669727374 KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH4 0x6865636B KECCAK256 PUSH7 0x61696C65645365 PUSH4 0x6F6E6420 PUSH14 0x756C7469706C69636174696F6E20 PUSH4 0x6865636B KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220035A49 SAR DIFFICULTY BYTE SSTORE SUB DUP10 PUSH18 0x4FE5F97D27863888ECAC4898141E0AD30360 0xC6 0x23 DUP4 ORIGIN PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ","sourceMap":"434:12085:2:-:0;;;625:165;5:9:-1;2:2;;;27:1;24;17:12;2:2;625:165:2;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;625:165:2;;;;;;;;;;;;;;;;;;;;;;;;;759:10:6;750:6;;:19;;;;;;;;;;;;;;;;;;813:6;;;;;;;;;;;780:40;;809:1;780:40;;;;;;;;;;;;716:5:2;690:4;;:32;;;;;;;;;;;;;;;;;;769:15;728:14;;:57;;;;;;;;;;;;;;;;;;625:165;;434:12085;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100e95760003560e01c8063a4c0ed361161008c578063d834020911610066578063d834020914610537578063e911439c14610599578063f2fde38b146105b7578063f3fef3a3146105fb576100e9565b8063a4c0ed36146103bb578063b415f4f5146104a0578063caf70c4a146104be576100e9565b806375d35070116100c857806375d35070146102995780638aa7927b146103315780638da5cb5b1461034f5780638f32d59b14610399576100e9565b80626f6ad0146100ee57806321f36509146101465780635e1c1059146101de575b600080fd5b6101306004803603602081101561010457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610649565b6040518082815260200191505060405180910390f35b6101726004803603602081101561015c57600080fd5b8101908080359060200190929190505050610661565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff166bffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b610297600480360360208110156101f457600080fd5b810190808035906020019064010000000081111561021157600080fd5b82018360208201111561022357600080fd5b8035906020019184600183028401116401000000008311171561024557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506106c3565b005b6102c5600480360360208110156102af57600080fd5b810190808035906020019092919050505061087d565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff166bffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b6103396108df565b6040518082815260200191505060405180910390f35b6103576108e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103a161090d565b604051808215151515815260200191505060405180910390f35b61049e600480360360608110156103d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561041857600080fd5b82018360208201111561042a57600080fd5b8035906020019184600183028401116401000000008311171561044c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610964565b005b6104a8610a71565b6040518082815260200191505060405180910390f35b610521600480360360408110156104d457600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610a76565b6040518082815260200191505060405180910390f35b610597600480360360a081101561054d57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060400190919291929080359060200190929190505050610ace565b005b6105a1610e6d565b6040518082815260200191505060405180910390f35b6105f9600480360360208110156105cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e73565b005b6106476004803603604081101561061157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ef9565b005b60056020528060005260406000206000915090505481565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a90046bffffffffffffffffffffffff16908060010154905083565b60006106cd61330c565b6000806106d985611133565b935093509350935060006004600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061078084602001516bffffffffffffffffffffffff16600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461159590919063ffffffff16565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060036000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055600182016000905550506108368383866000015161161d565b7fa2e7a402243ebda4a69ceeb3dfb682943b7a9b3ac66d6eefa8db65894009611c8383604051808381526020018281526020019250505060405180910390a1505050505050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a90046bffffffffffffffffffffffff16908060010154905083565b602081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d75737420757365204c494e4b20746f6b656e0000000000000000000000000081525060200191505060405180910390fd5b600080828060200190516040811015610a3f57600080fd5b81019080805190602001909291908051906020019092919050505091509150610a6a828286886117e0565b5050505050565b60e081565b6000816040516020018082600260200280838360005b83811015610aa7578082015181840152602081019050610a8c565b50505050905001915050604051602081830303815290604052805190602001209050919050565b610ad661090d565b610b48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000610b8a836002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050610a76565b905060006004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f706c656173652072656769737465722061206e6577206b65790000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610d0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5f6f7261636c65206d757374206e6f742062652030783000000000000000000081525060200191505060405180910390fd5b846004600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260046000848152602001908152602001600020600101819055506b033b2e3c9fd0803ce8000000861115610de1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c815260200180613403603c913960400191505060405180910390fd5b856004600084815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055507fae189157e0628c1e62315e9179156e1ea10e90e9c15060002f7021e907dc2cfe8287604051808381526020018281526020019250505060405180910390a1505050505050565b6101a081565b610e7b61090d565b610eed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610ef681611bc8565b50565b8080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610faf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f63616e2774207769746864726177206d6f7265207468616e2062616c616e636581525060200191505060405180910390fd5b61100182600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d0c90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156110ed57600080fd5b505af1158015611101573d6000803e3d6000fd5b505050506040513d602081101561111757600080fd5b810190808051906020019092919050505061112e57fe5b505050565b600061113d61330c565b60008060006101a06020019050808651146111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f77726f6e672070726f6f66206c656e677468000000000000000000000000000081525060200191505060405180910390fd5b6111c8613354565b60008060208901925060e089015191508389015190506111e783610a76565b97506111f38883611d95565b9550600360008781526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016001820154815250509650600073ffffffffffffffffffffffffffffffffffffffff16876000015173ffffffffffffffffffffffffffffffffffffffff16141561135a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6e6f20636f72726573706f6e64696e672072657175657374000000000000000081525060200191505060405180910390fd5b8181604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120876040015114611401576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f77726f6e672070726553656564206f7220626c6f636b206e756d00000000000081525060200191505060405180910390fd5b6000814090506000801b81141561153c57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9413d38836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561148557600080fd5b505afa158015611499573d6000803e3d6000fd5b505050506040513d60208110156114af57600080fd5b810190808051906020019092919050505090506000801b81141561153b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f706c656173652070726f766520626c6f636b686173680000000000000000000081525060200191505060405180910390fd5b5b6000838260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012060001c90508060e08c01526101a08b526115868b611dce565b96505050505050509193509193565b600080828401905083811015611613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600060606394985ddd60e01b85856040516024018083815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000620324b09050805a101561171f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6e6f7420656e6f7567682067617320666f7220636f6e73756d6572000000000081525060200191505060405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b6020831061176c5780518252602082019150602081019050602083039250611749565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146117ce576040519150601f19603f3d011682016040523d82523d6000602084013e6117d3565b606091505b5050905050505050505050565b81846004600082815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16821015611894576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f42656c6f7720616772656564207061796d656e7400000000000000000000000081525060200191505060405180910390fd5b60006006600088815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006118f788888785611f8f565b905060006119058983611d95565b9050600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461197357fe5b856003600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b033b2e3c9fd0803ce800000087106119dd57fe5b866003600083815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555081436040516020018083815260200182815260200192505050604051602081830303815290604052805190602001206003600083815260200190815260200160002060010181905550600460008a8152602001908152602001600020600101547f56bd374744a66d531874338def36c906e3a6cf31176eb1e9afd9f1de69725d518a84898b86604051808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019550505050505060405180910390a2611b696001600660008c815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461159590919063ffffffff16565b600660008b815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806133dd6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115611d84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b60008282604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120905092915050565b60006101a0825114611e48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f77726f6e672070726f6f66206c656e677468000000000000000000000000000081525060200191505060405180910390fd5b611e50613354565b611e58613354565b611e60613376565b6000611e6a613354565b611e72613354565b6000888060200190516101a0811015611e8a57600080fd5b810190809190826040019190826040019190826060018051906020019092919091908260400191908260400180519060200190929190505050839350809750819850829950839a50849b50859c50869d5050505050505050611f26878787600060038110611ef457fe5b602002015188600160038110611f0657fe5b602002015189600260038110611f1857fe5b602002015189898989612009565b6003866040516020018083815260200182600260200280838360005b83811015611f5d578082015181840152602081019050611f42565b50505050905001925050506040516020818303038152906040528051906020012060001c975050505050505050919050565b600084848484604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019450505050506040516020818303038152906040528051906020012060001c9050949350505050565b61201289612334565b612084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7075626c6963206b6579206973206e6f74206f6e20637572766500000000000081525060200191505060405180910390fd5b61208d88612334565b6120ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f67616d6d61206973206e6f74206f6e206375727665000000000000000000000081525060200191505060405180910390fd5b61210883612334565b61217a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6347616d6d615769746e657373206973206e6f74206f6e20637572766500000081525060200191505060405180910390fd5b61218382612334565b6121f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f73486173685769746e657373206973206e6f74206f6e2063757276650000000081525060200191505060405180910390fd5b612201878a88876123a5565b612273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6164647228632a706b2b732a6729e289a05f755769746e65737300000000000081525060200191505060405180910390fd5b61227b613354565b6122858a876125dd565b905061228f613354565b61229e898b878b86898961269c565b905060006122af838d8d8a86612840565b9050808a14612326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c69642070726f6f660000000000000000000000000000000000000081525060200191505060405180910390fd5b505050505050505050505050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061235e57fe5b8260016002811061236b57fe5b60200201518360016002811061237d57fe5b60200201510961239d8360006002811061239357fe5b602002015161296f565b149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f626164207769746e65737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060028660016002811061245b57fe5b60200201518161246757fe5b061461247457601c612477565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141806124a357fe5b85876000600281106124b157fe5b6020020151097ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641410360001b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418061250857fe5b8760006002811061251557fe5b6020020151890960001b90506000600183858a60006002811061253457fe5b602002015160001b8560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612594573d6000803e3d6000fd5b5050506020604051035190508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614945050505050949350505050565b6125e5613354565b612646600184846040516020018084815260200183600260200280838360005b83811015612620578082015181840152602081019050612605565b5050505090500182815260200193505050506040516020818303038152906040526129fd565b90505b61265281612334565b6126965761268f8160006002811061266657fe5b6020020151604051602001808281526020019150506040516020818303038152906040526129fd565b9050612649565b92915050565b6126a4613354565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f846000600281106126d457fe5b6020020151886000600281106126e657fe5b602002015103816126f357fe5b061415612768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f706f696e747320696e2073756d206d7573742062652064697374696e6374000081525060200191505060405180910390fd5b612773878988612ad0565b6127c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061343f6021913960400191505060405180910390fd5b6127d3848685612ad0565b612828576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806134606022913960400191505060405180910390fd5b612833868484612c5b565b9050979650505050505050565b6000600286868685876040516020018087815260200186600260200280838360005b8381101561287d578082015181840152602081019050612862565b5050505090500185600260200280838360005b838110156128ab578082015181840152602081019050612890565b5050505090500184600260200280838360005b838110156128d95780820151818401526020810190506128be565b5050505090500183600260200280838360005b838110156129075780820151818401526020810190506128ec565b505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140196505050505050506040516020818303038152906040528051906020012060001c905095945050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061299a57fe5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806129c257fe5b848509840990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806129f157fe5b60078208915050919050565b612a05613354565b612a0e82612dd9565b81600060028110612a1b57fe5b602002018181525050612a46612a4182600060028110612a3757fe5b602002015161296f565b612e46565b81600160028110612a5357fe5b6020020181815250506001600282600160028110612a6d57fe5b602002015181612a7957fe5b061415612acb5780600160028110612a8d57fe5b60200201517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f0381600160028110612ac157fe5b6020020181815250505b919050565b600080831415612adf57600080fd5b600084600060028110612aee57fe5b60200201519050600080600287600160028110612b0757fe5b602002015181612b1357fe5b0614612b2057601c612b23565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414180612b4f57fe5b83870960001b9050600060016000801b848660001b8560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612bbc573d6000803e3d6000fd5b5050506020604051035190506000866040516020018082600260200280838360005b83811015612bf9578082015181840152602081019050612bde565b505050509050019150506040516020818303038152906040528051906020012060001c90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614955050505050509392505050565b612c63613354565b6000806000612cb887600060028110612c7857fe5b602002015188600160028110612c8a57fe5b602002015188600060028110612c9c57fe5b602002015189600160028110612cae57fe5b6020020151612e80565b80935081945082955050505060017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612cee57fe5b86830914612d64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e765a206d75737420626520696e7665727365206f66207a0000000000000081525060200191505060405180910390fd5b60405180604001604052807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612d9757fe5b87860981526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612dc757fe5b87850981525093505050509392505050565b6000818051906020012060001c90505b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8110612e415780604051602001808281526020019150506040516020818303038152906040528051906020012060001c9050612de9565b919050565b6000612e7982600260017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f01901c613054565b9050919050565b60008060008060006001809150915060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612eb957fe5b897ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038808905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612f0a57fe5b8b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038a0890506000612f3f838385856131b6565b8092508199505050612f5388828e88613220565b8092508199505050612f6788828c87613220565b80925081995050506000612f7d8d878b85613220565b8092508199505050612f91888286866131b6565b8092508199505050612fa588828e89613220565b8092508199505050808214613040577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612fdc57fe5b818a0998507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061300957fe5b82890997507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061303657fe5b8183099650613044565b8196505b5050505050509450945094915050565b60008061305f613398565b60208160006006811061306e57fe5b60200201818152505060208160016006811061308657fe5b60200201818152505060208160026006811061309e57fe5b60200201818152505084816003600681106130b557fe5b60200201818152505083816004600681106130cc57fe5b6020020181815250507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8160056006811061310357fe5b6020020181815250506131146133ba565b60208160c0846005600019fa92506000831415613199576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6269674d6f64457870206661696c75726521000000000000000000000000000081525060200191505060405180910390fd5b806000600181106131a657fe5b6020020151935050505092915050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806131e157fe5b8487097ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061320c57fe5b848709809250819350505094509492505050565b60008060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061324d57fe5b878509905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061327c57fe5b87877ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f030990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806132cb57fe5b8183087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806132f657fe5b8689098094508195505050505094509492505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600080191681525090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060c00160405280600690602082028036833780820191505090505090565b604051806020016040528060019060208202803683378082019150509050509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373796f752063616e277420636861726765206d6f7265207468616e20616c6c20746865204c494e4b20696e2074686520776f726c642c206772656564794669727374206d756c7469706c69636174696f6e20636865636b206661696c65645365636f6e64206d756c7469706c69636174696f6e20636865636b206661696c6564a2646970667358221220035a491d441a550389714fe5f97d27863888ecac4898141e0ad30360c623833264736f6c63430006060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA4C0ED36 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD8340209 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD8340209 EQ PUSH2 0x537 JUMPI DUP1 PUSH4 0xE911439C EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5B7 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x5FB JUMPI PUSH2 0xE9 JUMP JUMPDEST DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0xB415F4F5 EQ PUSH2 0x4A0 JUMPI DUP1 PUSH4 0xCAF70C4A EQ PUSH2 0x4BE JUMPI PUSH2 0xE9 JUMP JUMPDEST DUP1 PUSH4 0x75D35070 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x75D35070 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x8AA7927B EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x399 JUMPI PUSH2 0xE9 JUMP JUMPDEST DUP1 PUSH3 0x6F6AD0 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0x21F36509 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x5E1C1059 EQ PUSH2 0x1DE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x649 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x172 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x661 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x297 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x211 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x6C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x87D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x339 PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x357 PUSH2 0x8E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3A1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x49E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x964 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A8 PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x521 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 PUSH1 0x40 ADD SWAP1 PUSH1 0x2 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x597 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x54D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 PUSH1 0x40 ADD SWAP1 SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xACE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5A1 PUSH2 0xE6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE73 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x647 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xEF9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6CD PUSH2 0x330C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6D9 DUP6 PUSH2 0x1133 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x780 DUP5 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1595 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP PUSH2 0x836 DUP4 DUP4 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x161D JUMP JUMPDEST PUSH32 0xA2E7A402243EBDA4A69CEEB3DFB682943B7A9B3AC66D6EEFA8DB65894009611C DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x20 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D75737420757365204C494E4B20746F6B656E00000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP2 POP SWAP2 POP PUSH2 0xA6A DUP3 DUP3 DUP7 DUP9 PUSH2 0x17E0 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAA7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA8C JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0x90D JUMP JUMPDEST PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB8A DUP4 PUSH1 0x2 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP PUSH2 0xA76 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x706C656173652072656769737465722061206E6577206B657900000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD0C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5F6F7261636C65206D757374206E6F7420626520307830000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH12 0x33B2E3C9FD0803CE8000000 DUP7 GT ISZERO PUSH2 0xDE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3403 PUSH1 0x3C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xAE189157E0628C1E62315E9179156E1EA10E90E9C15060002F7021E907DC2CFE DUP3 DUP8 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1A0 DUP2 JUMP JUMPDEST PUSH2 0xE7B PUSH2 0x90D JUMP JUMPDEST PUSH2 0xEED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF6 DUP2 PUSH2 0x1BC8 JUMP JUMPDEST POP JUMP JUMPDEST DUP1 DUP1 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E2774207769746864726177206D6F7265207468616E2062616C616E6365 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1001 DUP3 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1D0C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1101 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x112E JUMPI INVALID JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x113D PUSH2 0x330C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A0 PUSH1 0x20 ADD SWAP1 POP DUP1 DUP7 MLOAD EQ PUSH2 0x11C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x77726F6E672070726F6F66206C656E6774680000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11C8 PUSH2 0x3354 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP10 ADD SWAP3 POP PUSH1 0xE0 DUP10 ADD MLOAD SWAP2 POP DUP4 DUP10 ADD MLOAD SWAP1 POP PUSH2 0x11E7 DUP4 PUSH2 0xA76 JUMP JUMPDEST SWAP8 POP PUSH2 0x11F3 DUP9 DUP4 PUSH2 0x1D95 JUMP JUMPDEST SWAP6 POP PUSH1 0x3 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP7 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x135A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6E6F20636F72726573706F6E64696E6720726571756573740000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP8 PUSH1 0x40 ADD MLOAD EQ PUSH2 0x1401 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x77726F6E672070726553656564206F7220626C6F636B206E756D000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 BLOCKHASH SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x153C JUMPI PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE9413D38 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1499 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x153B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x706C656173652070726F766520626C6F636B6861736800000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x0 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP1 PUSH1 0xE0 DUP13 ADD MSTORE PUSH2 0x1A0 DUP12 MSTORE PUSH2 0x1586 DUP12 PUSH2 0x1DCE JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1613 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH4 0x94985DDD PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH3 0x324B0 SWAP1 POP DUP1 GAS LT ISZERO PUSH2 0x171F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x176C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x1749 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17CE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17D3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP5 PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 LT ISZERO PUSH2 0x1894 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x42656C6F7720616772656564207061796D656E74000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x18F7 DUP9 DUP9 DUP8 DUP6 PUSH2 0x1F8F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1905 DUP10 DUP4 PUSH2 0x1D95 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1973 JUMPI INVALID JUMPDEST DUP6 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH12 0x33B2E3C9FD0803CE8000000 DUP8 LT PUSH2 0x19DD JUMPI INVALID JUMPDEST DUP7 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x4 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH32 0x56BD374744A66D531874338DEF36C906E3A6CF31176EB1E9AFD9F1DE69725D51 DUP11 DUP5 DUP10 DUP12 DUP7 PUSH1 0x40 MLOAD DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x1B69 PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1595 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1C4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x33DD PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1D84 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0 DUP3 MLOAD EQ PUSH2 0x1E48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x77726F6E672070726F6F66206C656E6774680000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E50 PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x1E58 PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x1E60 PUSH2 0x3376 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E6A PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x1E72 PUSH2 0x3354 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1A0 DUP2 LT ISZERO PUSH2 0x1E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 SWAP2 SWAP1 DUP3 PUSH1 0x40 ADD SWAP2 SWAP1 DUP3 PUSH1 0x40 ADD SWAP2 SWAP1 DUP3 PUSH1 0x60 ADD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 SWAP2 SWAP1 DUP3 PUSH1 0x40 ADD SWAP2 SWAP1 DUP3 PUSH1 0x40 ADD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP4 SWAP4 POP DUP1 SWAP8 POP DUP2 SWAP9 POP DUP3 SWAP10 POP DUP4 SWAP11 POP DUP5 SWAP12 POP DUP6 SWAP13 POP DUP7 SWAP14 POP POP POP POP POP POP POP POP PUSH2 0x1F26 DUP8 DUP8 DUP8 PUSH1 0x0 PUSH1 0x3 DUP2 LT PUSH2 0x1EF4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x1 PUSH1 0x3 DUP2 LT PUSH2 0x1F06 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 PUSH1 0x2 PUSH1 0x3 DUP2 LT PUSH2 0x1F18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 DUP10 DUP10 DUP10 PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F5D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1F42 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP8 POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2012 DUP10 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x2084 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7075626C6963206B6579206973206E6F74206F6E206375727665000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x208D DUP9 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x20FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x67616D6D61206973206E6F74206F6E2063757276650000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2108 DUP4 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x217A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6347616D6D615769746E657373206973206E6F74206F6E206375727665000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2183 DUP3 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x21F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x73486173685769746E657373206973206E6F74206F6E20637572766500000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2201 DUP8 DUP11 DUP9 DUP8 PUSH2 0x23A5 JUMP JUMPDEST PUSH2 0x2273 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6164647228632A706B2B732A6729E289A05F755769746E657373000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x227B PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x2285 DUP11 DUP8 PUSH2 0x25DD JUMP JUMPDEST SWAP1 POP PUSH2 0x228F PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x229E DUP10 DUP12 DUP8 DUP12 DUP7 DUP10 DUP10 PUSH2 0x269C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22AF DUP4 DUP14 DUP14 DUP11 DUP7 PUSH2 0x2840 JUMP JUMPDEST SWAP1 POP DUP1 DUP11 EQ PUSH2 0x2326 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E76616C69642070726F6F6600000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x235E JUMPI INVALID JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x236B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x237D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD MULMOD PUSH2 0x239D DUP4 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2393 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x296F JUMP JUMPDEST EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2449 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x626164207769746E657373000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 DUP7 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x245B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH2 0x2467 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x2474 JUMPI PUSH1 0x1C PUSH2 0x2477 JUMP JUMPDEST PUSH1 0x1B JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP1 PUSH2 0x24A3 JUMPI INVALID JUMPDEST DUP6 DUP8 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x24B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD MULMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 SUB PUSH1 0x0 SHL SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP1 PUSH2 0x2508 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2515 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 MULMOD PUSH1 0x0 SHL SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 DUP6 DUP11 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2534 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2594 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP5 POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x25E5 PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x2646 PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2620 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2605 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x29FD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x2652 DUP2 PUSH2 0x2334 JUMP JUMPDEST PUSH2 0x2696 JUMPI PUSH2 0x268F DUP2 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2666 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x29FD JUMP JUMPDEST SWAP1 POP PUSH2 0x2649 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x26A4 PUSH2 0x3354 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP5 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x26D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x26E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SUB DUP2 PUSH2 0x26F3 JUMPI INVALID JUMPDEST MOD EQ ISZERO PUSH2 0x2768 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x706F696E747320696E2073756D206D7573742062652064697374696E63740000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2773 DUP8 DUP10 DUP9 PUSH2 0x2AD0 JUMP JUMPDEST PUSH2 0x27C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x343F PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x27D3 DUP5 DUP7 DUP6 PUSH2 0x2AD0 JUMP JUMPDEST PUSH2 0x2828 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3460 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2833 DUP7 DUP5 DUP5 PUSH2 0x2C5B JUMP JUMPDEST SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP7 DUP7 DUP7 DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x287D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2862 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP6 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28AB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2890 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28D9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x28BE JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2907 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x28EC JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x299A JUMPI INVALID JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x29C2 JUMPI INVALID JUMPDEST DUP5 DUP6 MULMOD DUP5 MULMOD SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x29F1 JUMPI INVALID JUMPDEST PUSH1 0x7 DUP3 ADDMOD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A05 PUSH2 0x3354 JUMP JUMPDEST PUSH2 0x2A0E DUP3 PUSH2 0x2DD9 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2A1B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x2A46 PUSH2 0x2A41 DUP3 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2A37 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x296F JUMP JUMPDEST PUSH2 0x2E46 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2A53 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x2 DUP3 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2A6D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH2 0x2A79 JUMPI INVALID JUMPDEST MOD EQ ISZERO PUSH2 0x2ACB JUMPI DUP1 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2A8D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP2 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x2ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2AEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x2 DUP8 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2B07 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH2 0x2B13 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x2B20 JUMPI PUSH1 0x1C PUSH2 0x2B23 JUMP JUMPDEST PUSH1 0x1B JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP1 PUSH2 0x2B4F JUMPI INVALID JUMPDEST DUP4 DUP8 MULMOD PUSH1 0x0 SHL SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 SHL DUP5 DUP7 PUSH1 0x0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BBC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2BF9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2BDE JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2C63 PUSH2 0x3354 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2CB8 DUP8 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2C78 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2C8A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x2C9C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x2CAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x2E80 JUMP JUMPDEST DUP1 SWAP4 POP DUP2 SWAP5 POP DUP3 SWAP6 POP POP POP POP PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2CEE JUMPI INVALID JUMPDEST DUP7 DUP4 MULMOD EQ PUSH2 0x2D64 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E765A206D75737420626520696E7665727365206F66207A00000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2D97 JUMPI INVALID JUMPDEST DUP8 DUP7 MULMOD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2DC7 JUMPI INVALID JUMPDEST DUP8 DUP6 MULMOD DUP2 MSTORE POP SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 LT PUSH2 0x2E41 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP PUSH2 0x2DE9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E79 DUP3 PUSH1 0x2 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F ADD SWAP1 SHR PUSH2 0x3054 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x1 DUP1 SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2EB9 JUMPI INVALID JUMPDEST DUP10 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP9 ADDMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2F0A JUMPI INVALID JUMPDEST DUP12 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP11 ADDMOD SWAP1 POP PUSH1 0x0 PUSH2 0x2F3F DUP4 DUP4 DUP6 DUP6 PUSH2 0x31B6 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH2 0x2F53 DUP9 DUP3 DUP15 DUP9 PUSH2 0x3220 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH2 0x2F67 DUP9 DUP3 DUP13 DUP8 PUSH2 0x3220 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH1 0x0 PUSH2 0x2F7D DUP14 DUP8 DUP12 DUP6 PUSH2 0x3220 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH2 0x2F91 DUP9 DUP3 DUP7 DUP7 PUSH2 0x31B6 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP PUSH2 0x2FA5 DUP9 DUP3 DUP15 DUP10 PUSH2 0x3220 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP10 POP POP POP DUP1 DUP3 EQ PUSH2 0x3040 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x2FDC JUMPI INVALID JUMPDEST DUP2 DUP11 MULMOD SWAP9 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x3009 JUMPI INVALID JUMPDEST DUP3 DUP10 MULMOD SWAP8 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x3036 JUMPI INVALID JUMPDEST DUP2 DUP4 MULMOD SWAP7 POP PUSH2 0x3044 JUMP JUMPDEST DUP2 SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x305F PUSH2 0x3398 JUMP JUMPDEST PUSH1 0x20 DUP2 PUSH1 0x0 PUSH1 0x6 DUP2 LT PUSH2 0x306E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x20 DUP2 PUSH1 0x1 PUSH1 0x6 DUP2 LT PUSH2 0x3086 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x20 DUP2 PUSH1 0x2 PUSH1 0x6 DUP2 LT PUSH2 0x309E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x3 PUSH1 0x6 DUP2 LT PUSH2 0x30B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP2 PUSH1 0x4 PUSH1 0x6 DUP2 LT PUSH2 0x30CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 PUSH1 0x5 PUSH1 0x6 DUP2 LT PUSH2 0x3103 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x3114 PUSH2 0x33BA JUMP JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xC0 DUP5 PUSH1 0x5 PUSH1 0x0 NOT STATICCALL SWAP3 POP PUSH1 0x0 DUP4 EQ ISZERO PUSH2 0x3199 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6269674D6F64457870206661696C757265210000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 PUSH1 0x1 DUP2 LT PUSH2 0x31A6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x31E1 JUMPI INVALID JUMPDEST DUP5 DUP8 MULMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x320C JUMPI INVALID JUMPDEST DUP5 DUP8 MULMOD DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x324D JUMPI INVALID JUMPDEST DUP8 DUP6 MULMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x327C JUMPI INVALID JUMPDEST DUP8 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB MULMOD SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x32CB JUMPI INVALID JUMPDEST DUP2 DUP4 ADDMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x32F6 JUMPI INVALID JUMPDEST DUP7 DUP10 MULMOD DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373796F752063616E277420636861726765 KECCAK256 PUSH14 0x6F7265207468616E20616C6C2074 PUSH9 0x65204C494E4B20696E KECCAK256 PUSH21 0x686520776F726C642C206772656564794669727374 KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH4 0x6865636B KECCAK256 PUSH7 0x61696C65645365 PUSH4 0x6F6E6420 PUSH14 0x756C7469706C69636174696F6E20 PUSH4 0x6865636B KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220035A49 SAR DIFFICULTY BYTE SSTORE SUB DUP10 PUSH18 0x4FE5F97D27863888ECAC4898141E0AD30360 0xC6 0x23 DUP4 ORIGIN PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ","sourceMap":"434:12085:2:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;434:12085:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;1912:89:2;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;1912:89:2;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1752:70;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;1752:70:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7042:615;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;7042:615:2;;;;;;;;;;27:11:-1;14;11:28;8:2;;;52:1;49;42:12;8:2;7042:615:2;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;7042:615:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7042:615:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7042:615:2;;;;;;;;;;;;;;;:::i;:::-;;1826:82;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;1826:82:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6453:48;;;:::i;:::-;;;;;;;;;;;;;;;;;;;893:71:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1212:84;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4372:237:2;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;4372:237:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:11:-1;14;11:28;8:2;;;52:1;49;42:12;8:2;4372:237:2;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;4372:237:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4372:237:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4372:237:2;;;;;;;;;;;;;;;:::i;:::-;;6575:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11545:136;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;11545:136:2;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;11545:136:2;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2953:759;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;2953:759:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;24626:351:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1435:101:6;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;1435:101:6;;;;;;;;;;;;;;;;;;;:::i;:::-;;11157:236:2;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;11157:236:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1912:89;;;;;;;;;;;;;;;;;:::o;1752:70::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7042:615::-;7111:22;7135:24;;:::i;:::-;7161:17;7185:18;7207:30;7230:6;7207:22;:30::i;:::-;7110:127;;;;;;;;7262:12;7277:17;:33;7295:14;7277:33;;;;;;;;;;;:43;;;;;;;;;;;;7262:58;;7353:59;7389:8;:22;;;7353:59;;:18;:24;7372:4;7353:24;;;;;;;;;;;;;;;;:28;;:59;;;;:::i;:::-;7326:18;:24;7345:4;7326:24;;;;;;;;;;;;;;;:86;;;;7493:9;:20;7503:9;7493:20;;;;;;;;;;;;7486:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7519:72;7542:9;7553:10;7565:8;:25;;;7519:22;:72::i;:::-;7603:49;7630:9;7641:10;7603:49;;;;;;;;;;;;;;;;;;;;;;;;7042:615;;;;;;:::o;1826:82::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6453:48::-;6497:4;6453:48;:::o;893:71:6:-;931:7;953:6;;;;;;;;;;;946:13;;893:71;:::o;1212:84::-;1252:4;1285:6;;;;;;;;;;;1271:20;;:10;:20;;;1264:27;;1212:84;:::o;4372:237:2:-;12164:4;;;;;;;;;;;12142:27;;:10;:27;;;12134:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4481:15:::1;4498:12:::0;4525:5:::1;4514:37;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;4514:37:2;;;;;;;;;;;;;;;;;;;;;;;;;4480:71;;;;4557:47;4575:7;4584:4;4590;4596:7;4557:17;:47::i;:::-;12199:1;;4372:237:::0;;;:::o;6575:45::-;6616:4;6575:45;:::o;11545:136::-;11615:7;11664:10;11647:28;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11647:28:2;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;11647:28:2;;;11637:39;;;;;;11630:46;;11545:136;;;:::o;2953:759::-;1079:9:6;:7;:9::i;:::-;1071:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3112:15:2::1;3130:28;3140:17;3130:28;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3130:28:2;;;;;:9;:28::i;:::-;3112:46;;3164:20;3187:17;:26;3205:7;3187:26;;;;;;;;;;;:36;;;;;;;;;;;;3164:59;;3261:1;3237:26;;:12;:26;;;3229:64;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;3326:1;3307:21;;:7;:21;;;;3299:57;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;3401:7;3362:17;:26;3380:7;3362:26;;;;;;;;;;;:36;;;:46;;;;;;;;;;;;;;;;;;3449:6;3414:17;:26;3432:7;3414:26;;;;;;;;;;;:32;;:41;;;;3531:9;3523:4;:17;;3515:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3657:4;3617:17;:26;3635:7;3617:26;;;;;;;;;;;:30;;;:45;;;;;;;;;;;;;;;;;;3673:34;3693:7;3702:4;3673:34;;;;;;;;;;;;;;;;;;;;;;;;1131:1:6;;2953:759:2::0;;;;:::o;24626:351:0:-;24662:315;24626:351;:::o;1435:101:6:-;1079:9;:7;:9::i;:::-;1071:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1503:28:::1;1522:8;1503:18;:28::i;:::-;1435:101:::0;:::o;11157:236:2:-;11247:7;12460;12426:18;:30;12445:10;12426:30;;;;;;;;;;;;;;;;:41;;12418:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11297:43:::1;11332:7;11297:18;:30;11316:10;11297:30;;;;;;;;;;;;;;;;:34;;:43;;;;:::i;:::-;11264:18;:30;11283:10;11264:30;;;;;;;;;;;;;;;:76;;;;11353:4;;;;;;;;;;;:13;;;11367:10;11379:7;11353:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;11353:34:2;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;11353:34:2;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;11353:34:2;;;;;;;;;;;;;;;;11346:42;;;;11157:236:::0;;;:::o;9054:1879::-;9134:22;9158:24;;:::i;:::-;9190:17;9209:18;9387:23;24662:315:0;9413:4:2;:19;9387:45;;9587:15;9570:6;:13;:32;9562:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9631:27;;:::i;:::-;9664:15;9685:16;9792:17;9784:6;9780:30;9767:43;;9846:14;9838:6;9834:27;9828:34;9817:45;;9899:15;9891:6;9887:28;9881:35;9869:47;;9944:20;9954:9;9944;:20::i;:::-;9927:37;;9982:38;9996:14;10012:7;9982:13;:38::i;:::-;9970:50;;10037:9;:20;10047:9;10037:20;;;;;;;;;;;10026:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10108:1;10071:39;;:8;:25;;;:39;;;;10063:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10208:7;10223:8;10191:41;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10191:41:2;;;10181:52;;;;;;10153:8;:24;;;:80;10145:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10271:17;10301:8;10291:19;10271:39;;10341:1;10333:10;;10320:9;:23;10316:159;;;10365:14;;;;;;;;;;;:27;;;10393:8;10365:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;10365:37:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10365:37:2;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;10365:37:2;;;;;;;;;;;;;;;;10353:49;;10439:1;10431:10;;10418:9;:23;;10410:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10316:159;10556:18;10612:7;10621:9;10595:36;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10595:36:2;;;10585:47;;;;;;10577:56;;10556:77;;10801:10;10784:14;10776:6;10772:27;10765:47;10834:12;10826:6;10819:28;10871:35;10899:6;10871:27;:35::i;:::-;10858:48;;9054:1879;;;;;;;;;;;:::o;863:162:7:-;921:7;936:9;952:1;948;:5;936:17;;972:1;967;:6;;959:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1019:1;1012:8;;;863:162;;;;:::o;7661:1389:2:-;7930:17;7953;8003:31;;;8036:9;8047:10;7973:85;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7973:85:2;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;7973:85:2;7953:105;;8327:9;8339:6;8327:18;;8372:1;8359:9;:14;;8351:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8830:12;8847:16;:21;;8869:4;8847:27;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8847:27:2;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;8829:45:2;;;7661:1389;;;;;;;:::o;5357:966::-;5512:8;5522;11976:17;:27;11994:8;11976:27;;;;;;;;;;;:31;;;;;;;;;;;;11964:43;;:8;:43;;11956:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5540:13:::1;5556:6;:16;5563:8;5556:16;;;;;;;;;;;:25;5573:7;5556:25;;;;;;;;;;;;;;;;5540:41;;5587:15;5605:57;5622:8;5632:13;5647:7;5656:5;5605:16;:57::i;:::-;5587:75;;5668:17;5688:32;5702:8;5712:7;5688:13;:32::i;:::-;5668:52;;5859:1;5810:51;;:9;:20;5820:9;5810:20;;;;;;;;;;;:37;;;;;;;;;;;;:51;;;5803:59;;;;5908:7;5868:9;:20;5878:9;5868:20;;;;;;;;;;;:37;;;:47;;;;;;;;;;;;;;;;;;5939:4;5928:8;:15;5921:23;;;;6023:8;5979:9;:20;5989:9;5979:20;;;;;;;;;;;:34;;;:53;;;;;;;;;;;;;;;;;;6111:7;6120:12;6087:46;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6087:46:2;;;6077:57;;;;;;6038:9;:20;6048:9;6038:20;;;;;;;;;;;:36;;:96;;;;6182:17;:27;6200:8;6182:27;;;;;;;;;;;:33;;;6145:107;6163:8;6173:7;6223;6232:8;6242:9;6145:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6286:32;6316:1;6286:6;:16;6293:8;6286:16;;;;;;;;;;;:25;6303:7;6286:25;;;;;;;;;;;;;;;;:29;;:32;;;;:::i;:::-;6258:6;:16;6265:8;6258:16;;;;;;;;;;;:25;6275:7;6258:25;;;;;;;;;;;;;;;:60;;;;12038:1;;;5357:966:::0;;;;;;:::o;1629:211:6:-;1718:1;1698:22;;:8;:22;;;;1690:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1803:8;1774:38;;1795:6;;;;;;;;;;;1774:38;;;;;;;;;;;;1827:8;1818:6;;:17;;;;;;;;;;;;;;;;;;1629:211;:::o;1277:165:7:-;1335:7;1363:1;1358;:6;;1350:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1405:9;1421:1;1417;:5;1405:17;;1436:1;1429:8;;;1277:165;;;;:::o;1408:171:3:-;1500:7;1549:8;1559:13;1532:41;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1532:41:3;;;1522:52;;;;;;1515:59;;1408:171;;;;:::o;25581:997:0:-;25661:14;24662:315;25693:5;:12;:28;25685:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25753:20;;:::i;:::-;25826:23;;:::i;:::-;25935:24;;:::i;:::-;25967:16;25991:31;;:::i;:::-;26030:30;;:::i;:::-;26068:12;26175:5;26155:122;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;26155:122:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26088:189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26285:201;26309:2;26321:5;26336:6;26343:1;26336:9;;;;;;;;;;;26360:6;26367:1;26360:9;;;;;;;;;;;26384:6;26391:1;26384:9;;;;;;;;;;;26411:8;26429:13;26452:12;26474:4;26285:14;:201::i;:::-;24551:1;26563:5;26521:48;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;26521:48:0;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;26521:48:0;;;26511:59;;;;;;26503:68;;26494:77;;25581:997;;;;;;;;;;:::o;797:231:3:-;927:7;981:8;991:9;1002:10;1014:6;970:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;970:51:3;;;960:62;;;;;;952:71;;944:79;;797:231;;;;;;:::o;22851:1521:0:-;23102:13;23112:2;23102:9;:13::i;:::-;23094:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23162:16;23172:5;23162:9;:16::i;:::-;23154:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23220:24;23230:13;23220:9;:24::i;:::-;23212:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23294:23;23304:12;23294:9;:23::i;:::-;23286:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23752:56;23789:1;23792:2;23796:1;23799:8;23752:36;:56::i;:::-;23735:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23949:22;;:::i;:::-;23974:21;23986:2;23990:4;23974:11;:21::i;:::-;23949:46;;24087:19;;:::i;:::-;24109:80;24136:1;24139:5;24146:13;24161:1;24164:4;24170:12;24184:4;24109:17;:80::i;:::-;24087:102;;24248:16;24267:51;24289:4;24295:2;24299:5;24306:8;24316:1;24267:21;:51::i;:::-;24248:70;;24339:8;24334:1;:13;24326:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22851:1521;;;;;;;;;;;;:::o;9690:135::-;9753:4;7620:66;9790:30;;;;;9803:1;9805;9803:4;;;;;;;;;;;9797:1;9799;9797:4;;;;;;;;;;;9790:30;9772:14;9781:1;9783;9781:4;;;;;;;;;;;9772:8;:14::i;:::-;:48;9765:55;;9690:135;;;:::o;18904:1044::-;19044:4;19153:1;19132:23;;:9;:23;;;;19124:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19179:7;19202:1;19197;19190;19192;19190:4;;;;;;;;;;;:8;;;;;;:13;19189:25;;19212:2;19189:25;;;19207:2;19189:25;19179:35;;19251:18;7386:66;19294:28;;;;;19307:1;19301;19303;19301:4;;;;;;;;;;;19294:28;7386:66;19280:42;19272:51;;19251:72;;19342:23;7386:66;19376:28;;;;;19386:1;19388;19386:4;;;;;;;;;;;19383:1;19376:28;19368:37;;19342:63;;19830:16;19849:56;19859:10;19871:1;19882;19884;19882:4;;;;;;;;;;;19874:13;;19889:15;19849:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;19849:56:0;;;;;;;;19830:75;;19932:9;19920:21;;:8;:21;;;19913:28;;;;;;18904:1044;;;;;;:::o;11864:369::-;11949:20;;:::i;:::-;11984:137;11090:1;12110:2;12114:5;12011:109;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12011:109:0;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;12011:109:0;;;11984:26;:137::i;:::-;11979:142;;12129:98;12137:13;12147:2;12137:9;:13::i;:::-;12129:98;;12167:51;12211:2;12214:1;12211:5;;;;;;;;;;;12194:23;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;12194:23:0;;;12167:26;:51::i;:::-;12162:56;;12129:98;;;11864:369;;;;:::o;20431:572::-;20638:17;;:::i;:::-;20721:1;7620:66;20690:10;20701:1;20690:13;;;;;;;;;;;20674:10;20685:1;20674:13;;;;;;;;;;;:29;20673:44;;;;;;:49;;20665:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20787:30;20799:2;20803:1;20806:10;20787:11;:30::i;:::-;20779:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20871:30;20883:2;20887:1;20890:10;20871:11;:30::i;:::-;20863:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20955:41;20967:10;20979;20991:4;20955:11;:41::i;:::-;20948:48;;20431:572;;;;;;;;;:::o;21910:358::-;22087:9;21191:1;22230:4;22236:2;22240:5;22247:1;22250:8;22140:119;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;22140:119:0;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;22140:119:0;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;22140:119:0;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;22140:119:0;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;22140:119:0;;;22130:130;;;;;;22113:148;;22106:155;;21910:358;;;;;;;:::o;9395:259::-;9447:7;9543:14;7620:66;9560:47;;;;;7620:66;9570:24;;;;;9580:1;9577;9570:24;9567:1;9560:47;9543:64;;7620:66;9620:29;;;;;9635:1;9627:6;9620:29;9613:36;;;9395:259;;;:::o;10688:244::-;10767:19;;:::i;:::-;10803:12;10813:1;10803:9;:12::i;:::-;10796:1;10798;10796:4;;;;;;;;;;:19;;;;;10830:26;10841:14;10850:1;10852;10850:4;;;;;;;;;;;10841:8;:14::i;:::-;10830:10;:26::i;:::-;10823:1;10825;10823:4;;;;;;;;;;:33;;;;;10880:1;10875;10868;10870;10868:4;;;;;;;;;;;:8;;;;;;:13;10864:62;;;10913:1;10915;10913:4;;;;;;;;;;;7620:66;10900:17;10893:1;10895;10893:4;;;;;;;;;;:24;;;;;10864:62;10688:244;;;:::o;12725:978::-;12847:13;12888:1;12878:6;:11;;12870:20;;12:1:-1;9;2:12;12870:20:0;12935:9;12947:12;12960:1;12947:15;;;;;;;;;;;12935:27;;12998:7;13031:1;13026;13008:12;13021:1;13008:15;;;;;;;;;;;:19;;;;;;:24;:34;;13040:2;13008:34;;;13035:2;13008:34;12998:44;;13391:20;7386:66;13422:30;;;;;13437:1;13429:6;13422:30;13414:39;;13391:62;;13459:14;13476:50;13494:1;13486:10;;13498:1;13509;13501:10;;13513:12;13476:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13476:50:0;;;;;;;;13459:67;;13592:16;13654:7;13637:25;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13637:25:0;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;13637:25:0;;;13627:36;;;;;;13619:45;;13592:73;;13689:8;13679:18;;:6;:18;;;13671:27;;;;;;;12725:978;;;;;:::o;18266:519::-;18377:17;;:::i;:::-;18402:9;18417;18432;18459:43;18475:2;18478:1;18475:5;;;;;;;;;;;18482:2;18485:1;18482:5;;;;;;;;;;;18489:2;18492:1;18489:5;;;;;;;;;;;18496:2;18499:1;18496:5;;;;;;;;;;;18459:15;:43::i;:::-;18447:55;;;;;;;;;;;;18547:1;7620:66;18516:27;;;;;18526:4;18523:1;18516:27;:32;18508:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18715:65;;;;;;;;7620:66;18723:27;;;;;18733:4;18730:1;18723:27;18715:65;;;;7620:66;18752:27;;;;;18762:4;18759:1;18752:27;18715:65;;;;;;;;18266:519;;;;;:::o;9880:394::-;9938:10;9979:1;9969:12;;;;;;9961:21;;9956:26;;10185:85;7620:66;10192:2;:16;10185:85;;10258:2;10241:20;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10241:20:0;;;10231:31;;;;;;10223:40;;10218:45;;10185:85;;;9880:394;;;:::o;9230:105::-;9284:7;9306:24;9316:1;9164;9158;7620:66;9145:14;9144:21;;9306:9;:24::i;:::-;9299:31;;9230:105;;;:::o;16001:1996::-;16100:10;16112;16124;16815;16827;16842:1;16845;16814:33;;;;16924:10;7620:66;16937:39;;;;;16961:2;7620:66;16948:15;16944:2;16937:39;16924:52;;16984:10;7620:66;16997:39;;;;;17021:2;7620:66;17008:15;17004:2;16997:39;16984:52;;17045:10;17159:29;17173:2;17177;17181;17185;17159:13;:29::i;:::-;17148:40;;;;;;;;17230:29;17244:2;17248;17252;17256;17230:13;:29::i;:::-;17219:40;;;;;;;;17304:29;17318:2;17322;17326;17330;17304:13;:29::i;:::-;17293:40;;;;;;;;17371:10;17487:29;17501:2;17505;17509;17513;17487:13;:29::i;:::-;17476:40;;;;;;;;17544:29;17558:2;17562;17566;17570;17544:13;:29::i;:::-;17533:40;;;;;;;;17620:29;17634:2;17638;17642;17646;17620:13;:29::i;:::-;17609:40;;;;;;;;17699:2;17693;:8;17689:302;;7620:66;17780:26;;;;;17791:2;17787;17780:26;17775:31;;7620:66;17821:26;;;;;17832:2;17828;17821:26;17816:31;;7620:66;17862:26;;;;;17873:2;17869;17862:26;17857:31;;17689:302;;;17980:2;17975:7;;17689:302;16001:1996;;;;;;;;;;;;;;:::o;7859:1072::-;7937:22;7969:18;7995:41;;:::i;:::-;7735:4;8044:23;8068:1;8044:26;;;;;;;;;;:46;;;;;7735:4;8117:23;8141:1;8117:26;;;;;;;;;;:46;;;;;7735:4;8194:23;8218:1;8194:26;;;;;;;;;;:46;;;;;8299:4;8270:23;8294:1;8270:26;;;;;;;;;;:33;;;;;8340:8;8311:23;8335:1;8311:26;;;;;;;;;;:37;;;;;7620:66;8356:23;8380:1;8356:26;;;;;;;;;;:39;;;;;8403:24;;:::i;:::-;8773:4;8757:6;8682:4;8649:23;8585:4;8533:1;8529:6;8509:325;8495:339;;8867:1;8853:10;:15;8849:52;;;8871:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8849:52;8915:6;8922:1;8915:9;;;;;;;;;;;8908:16;;;;;7859:1072;;;;:::o;14197:203::-;14294:10;14306;7620:66;14338:26;;;;;14349:2;14345;14338:26;7620:66;14366:26;;;;;14377:2;14373;14366:26;14326:67;;;;;;;;14197:203;;;;;;;:::o;13793:318::-;13890:10;13902;13922:12;7620:66;13937:26;;;;;13948:2;13944;13937:26;13922:41;;13971:12;7620:66;13986:39;;;;;14010:2;14006;7620:66;13993:15;13986:39;13971:54;;7620:66;14045:30;;;;;14058:4;14052;14045:30;7620:66;14077:26;;;;;14088:2;14084;14077:26;14033:71;;;;;;;;13793:318;;;;;;;;;:::o;434:12085:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;156:4;148:6;144:17;134:27;;0:165;434:12085:2;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;156:4;148:6;144:17;134:27;;0:165;434:12085:2;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;156:4;148:6;144:17;134:27;;0:165;434:12085:2;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;156:4;148:6;144:17;134:27;;0:165;434:12085:2;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2699000","executionCost":"infinite","totalCost":"infinite"},"external":{"PRESEED_OFFSET()":"250","PROOF_LENGTH()":"249","PUBLIC_KEY_OFFSET()":"250","callbacks(bytes32)":"3033","fulfillRandomnessRequest(bytes)":"infinite","hashOfKey(uint256[2])":"infinite","isOwner()":"1167","onTokenTransfer(address,uint256,bytes)":"infinite","owner()":"1128","registerProvingKey(uint256,address,uint256[2],bytes32)":"infinite","serviceAgreements(bytes32)":"3010","transferOwnership(address)":"infinite","withdraw(address,uint256)":"infinite","withdrawableTokens(address)":"1193"},"internal":{"callBackWithRandomness(bytes32,uint256,address)":"infinite","getRandomnessFromProof(bytes memory)":"infinite","randomnessRequest(bytes32,uint256,uint256,address)":"infinite"}},"methodIdentifiers":{"PRESEED_OFFSET()":"b415f4f5","PROOF_LENGTH()":"e911439c","PUBLIC_KEY_OFFSET()":"8aa7927b","callbacks(bytes32)":"21f36509","fulfillRandomnessRequest(bytes)":"5e1c1059","hashOfKey(uint256[2])":"caf70c4a","isOwner()":"8f32d59b","onTokenTransfer(address,uint256,bytes)":"a4c0ed36","owner()":"8da5cb5b","registerProvingKey(uint256,address,uint256[2],bytes32)":"d8340209","serviceAgreements(bytes32)":"75d35070","transferOwnership(address)":"f2fde38b","withdraw(address,uint256)":"f3fef3a3","withdrawableTokens(address)":"006f6ad0"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockHashStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewServiceAgreement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"jobID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequestFulfilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRESEED_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROOF_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"callbacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"randomnessFee\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"seedAndBlockNum\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomnessRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"hashOfKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_publicProvingKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"_jobID\",\"type\":\"bytes32\"}],\"name\":\"registerProvingKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"serviceAgreements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vRFOracle\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"jobID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"fulfillRandomnessRequest(bytes)\":{\"details\":\"The structure of _proof corresponds to vrf.MarshaledOnChainResponse,in the node source code. I.e., it is a vrf.MarshaledProof with theseed replaced by the preSeed, followed by the hash of the requestingblock.\",\"params\":{\"_proof\":\"the proof of randomness. Actual random output built from this\"}},\"hashOfKey(uint256[2])\":{\"params\":{\"_publicKey\":\"the key to return the address for\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"To invoke this, use the requestRandomness method in VRFConsumerBase.The VRFCoordinator will call back to the calling contract when theoracle responds, on the method fulfillRandomness. SeeVRFConsumerBase.fulfilRandomness for its signature. Your consumingcontract should inherit from VRFConsumerBase, and implementfulfilRandomness.\",\"params\":{\"_data\":\"abi-encoded call to randomnessRequest\",\"_fee\":\"amount of LINK sent\",\"_sender\":\"address: who sent the LINK (must be a contract)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerProvingKey(uint256,address,uint256[2],bytes32)\":{\"params\":{\"_fee\":\"minimum LINK payment required to serve randomness\",\"_jobID\":\"ID of the corresponding chainlink job in the oracle's db\",\"_oracle\":\"the address of the Chainlink node with the proving key and job\",\"_publicProvingKey\":\"public key used to prove randomness\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"Allows the oracle operator to withdraw their LINK\",\"params\":{\"_amount\":\"is the amount of LINK transferred from the Coordinator contract\",\"_recipient\":\"is the address the funds will be sent to\"}}},\"title\":\"VRFCoordinator coordinates on-chain verifiable-randomness requestswith off-chain responses\"},\"userdoc\":{\"methods\":{\"fulfillRandomnessRequest(bytes)\":{\"notice\":\"Called by the chainlink node to fulfill requests\"},\"hashOfKey(uint256[2])\":{\"notice\":\"Returns the serviceAgreements key associated with this public key\"},\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"Called by LINK.transferAndCall, on successful LINK transfer\"},\"registerProvingKey(uint256,address,uint256[2],bytes32)\":{\"notice\":\"Commits calling address to serve randomness\"}}}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/VRFCoordinator.sol\":\"VRFCoordinator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\n/** ****************************************************************************\\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\\n\\n  * @dev Bibliographic references:\\n\\n  * @dev Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draft\\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\\n\\n  * @dev Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", Cryptology\\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\\n  * ****************************************************************************\\n  * @dev USAGE\\n\\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\\n  * ****************************************************************************\\n  * @dev PURPOSE\\n\\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\\n  * @dev Reggie, he gives back a value which is computed completely\\n  * @dev deterministically from the seed and the secret key.\\n\\n  * @dev Reggie provides a proof by which Vera can verify that the output was\\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\\n  * @dev the output is computationally indistinguishable to her from a uniform\\n  * @dev random sample from the output space.\\n\\n  * @dev The purpose of this contract is to perform that verification.\\n  * ****************************************************************************\\n  * @dev DESIGN NOTES\\n\\n  * @dev The VRF algorithm verified here satisfies the full unqiqueness, full\\n  * @dev collision resistance, and full pseudorandomness security properties.\\n  * @dev See \\\"SECURITY PROPERTIES\\\" below, and\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\\n\\n  * @dev An elliptic curve point is generally represented in the solidity code\\n  * @dev as a uint256[2], corresponding to its affine coordinates in\\n  * @dev GF(FIELD_SIZE).\\n\\n  * @dev For the sake of efficiency, this implementation deviates from the spec\\n  * @dev in some minor ways:\\n\\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\\n\\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\\n\\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\\n  * @dev   nonce updated until a valid x-ordinate is found.\\n\\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\\n  * @dev   in the hash message, as recommended in step 5.B of the draft\\n  * @dev   standard. They are unnecessary here because no variation in the\\n  * @dev   cipher suite is allowed.\\n\\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\\n  * @dev   points, not the compressed points as recommended in step 3.\\n\\n  * @dev - In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.\\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\\n  * @dev   generator point, see steps 5 and 7 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\\n  * @dev   keccak hash of the original u. This is because we only verify the\\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\\n  * ****************************************************************************\\n  * @dev   SECURITY PROPERTIES\\n\\n  * @dev Here are the security properties for this VRF:\\n\\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\\n  * @dev   the sense that the proof will pass verifyVRFProof.\\n\\n  * @dev Full collision resistance: It's cryptographically infeasible to find\\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\\n\\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\\n  * @dev   derived from a given seed, the outputs are computationally\\n  * @dev   indistinguishable from randomness.\\n\\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\\n  * @dev for these properties.\\n\\n  * @dev For secp256k1, the key validation described in section\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\\n  * @dev representation of the public key used here (affine x- and y-ordinates\\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\\n  * @dev the point at infinity.\\n  * ****************************************************************************\\n  * @dev OTHER SECURITY CONSIDERATIONS\\n  *\\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\\n  * @dev However, under the Random Oracle Model the probability of choosing a\\n  * @dev point which forces n extra rounds in hashToCurve is 2\\u207b\\u207f. The base cost\\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\\n  * @dev try, in expectation, about 2\\u00b9\\u00b2\\u2078 seeds, which is infeasible for any\\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\\n\\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\\n  * @dev this means it is infeasible for an adversary to prevent correct\\n  * @dev operation of this contract by choosing an adverse seed.\\n\\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\\n  * @dev hashToCurve.)\\n\\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\\n  * @dev See notes in hashToCurve docstring.\\n*/\\ncontract VRF {\\n\\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\\n  uint256 constant private GROUP_ORDER = // Number of points in Secp256k1\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  // Prime characteristic of the galois field over which Secp256k1 is defined\\n  uint256 constant private FIELD_SIZE =\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n  uint256 constant private WORD_LENGTH_BYTES = 0x20;\\n\\n  // (base^exponent) % FIELD_SIZE\\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\\n  function bigModExp(uint256 base, uint256 exponent)\\n    internal view returns (uint256 exponentiation) {\\n      uint256 callResult;\\n      uint256[6] memory bigModExpContractInputs;\\n      bigModExpContractInputs[0] = WORD_LENGTH_BYTES;  // Length of base\\n      bigModExpContractInputs[1] = WORD_LENGTH_BYTES;  // Length of exponent\\n      bigModExpContractInputs[2] = WORD_LENGTH_BYTES;  // Length of modulus\\n      bigModExpContractInputs[3] = base;\\n      bigModExpContractInputs[4] = exponent;\\n      bigModExpContractInputs[5] = FIELD_SIZE;\\n      uint256[1] memory output;\\n      assembly { // solhint-disable-line no-inline-assembly\\n      callResult := staticcall(\\n        not(0),                   // Gas cost: no limit\\n        0x05,                     // Bigmodexp contract address\\n        bigModExpContractInputs,\\n        0xc0,                     // Length of input segment: 6*0x20-bytes\\n        output,\\n        0x20                      // Length of output segment\\n      )\\n      }\\n      if (callResult == 0) {revert(\\\"bigModExp failure!\\\");}\\n      return output[0];\\n    }\\n\\n  // Let q=FIELD_SIZE. q % 4 = 3, \\u2234 x\\u2261r^2 mod q \\u21d2 x^SQRT_POWER\\u2261\\u00b1r mod q.  See\\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\\n  uint256 constant private SQRT_POWER = (FIELD_SIZE + 1) >> 2;\\n\\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\\n  function squareRoot(uint256 x) internal view returns (uint256) {\\n    return bigModExp(x, SQRT_POWER);\\n  }\\n\\n  // The value of y^2 given that (x,y) is on secp256k1.\\n  function ySquared(uint256 x) internal pure returns (uint256) {\\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\\n    return addmod(xCubed, 7, FIELD_SIZE);\\n  }\\n\\n  // True iff p is on secp256k1\\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\\n  }\\n\\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\\n    x_ = uint256(keccak256(b));\\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\\n    // string_to_point in the IETF draft\\n    while (x_ >= FIELD_SIZE) {\\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\\n    }\\n  }\\n\\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\\n  // is always even, due to\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  // step 5.C, which references arbitrary_string_to_point, defined in\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\\n  // returning the point with given x ordinate, and even y ordinate.\\n  function newCandidateSecp256k1Point(bytes memory b)\\n    internal view returns (uint256[2] memory p) {\\n      p[0] = fieldHash(b);\\n      p[1] = squareRoot(ySquared(p[0]));\\n      if (p[1] % 2 == 1) {\\n        p[1] = FIELD_SIZE - p[1];\\n      }\\n    }\\n\\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\\n  // vrf.go/hashToCurveHashPrefix\\n  uint256 constant HASH_TO_CURVE_HASH_PREFIX = 1;\\n\\n  // Cryptographic hash function onto the curve.\\n  //\\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\\n  // DESIGN NOTES above for slight differences.)\\n  //\\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\\n  // \\\"Construction of Rational Points on Elliptic Curves over Finite Fields\\\"\\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\\n  // and suggested by\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\\n  //\\n  // This would greatly simplify the analysis in \\\"OTHER SECURITY CONSIDERATIONS\\\"\\n  // https://www.pivotaltracker.com/story/show/171120900\\n  function hashToCurve(uint256[2] memory pk, uint256 input)\\n    internal view returns (uint256[2] memory rv) {\\n      rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX,\\n                                                       pk, input));\\n      while (!isOnCurve(rv)) {\\n        rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\\n      }\\n    }\\n\\n  /** *********************************************************************\\n   * @notice Check that product==scalar*multiplicand\\n   *\\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\\n   *\\n   * @param multiplicand: secp256k1 point\\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\\n   * @param product: secp256k1 expected to be multiplier * multiplicand\\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\\n   */\\n  function ecmulVerify(uint256[2] memory multiplicand, uint256 scalar,\\n    uint256[2] memory product) internal pure returns(bool verifies)\\n  {\\n    require(scalar != 0); // Rules out an ecrecover failure case\\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\\n    // (x\\u207b\\u00b9 mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\\n    // Explicit conversion to address takes bottom 160 bits\\n    address expected = address(uint256(keccak256(abi.encodePacked(product))));\\n    return (actual == expected);\\n  }\\n\\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveSub(uint256 x1, uint256 z1, uint256 x2, uint256 z2)\\n    internal pure returns(uint256 x3, uint256 z3) {\\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n\\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveMul(uint256 x1, uint256 z1, uint256 x2, uint256 z2)\\n    internal pure returns(uint256 x3, uint256 z3) {\\n      (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n\\n  /** **************************************************************************\\n      @notice Computes elliptic-curve sum, in projective co-ordinates\\n\\n      @dev Using projective coordinates avoids costly divisions\\n\\n      @dev To use this with p and q in affine coordinates, call\\n      @dev projectiveECAdd(px, py, qx, qy). This will return\\n      @dev the addition of (px, py, 1) and (qx, qy, 1), in the\\n      @dev secp256k1 group.\\n\\n      @dev This can be used to calculate the z which is the inverse to zInv\\n      @dev in isValidVRFOutput. But consider using a faster\\n      @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\\n\\n      @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\\n           coordinates of secp256k1 points. That is safe in this contract,\\n           because this method is only used by linearCombination, which checks\\n           points are on the curve via ecrecover.\\n      **************************************************************************\\n      @param px The first affine coordinate of the first summand\\n      @param py The second affine coordinate of the first summand\\n      @param qx The first affine coordinate of the second summand\\n      @param qy The second affine coordinate of the second summand\\n\\n      (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\\n      **************************************************************************\\n      Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\\n      on secp256k1, in P\\u00b2(\\ud835\\udd3d\\u2099)\\n      @return sx \\n      @return sy\\n      @return sz\\n  */\\n  function projectiveECAdd(uint256 px, uint256 py, uint256 qx, uint256 qy)\\n    internal pure returns(uint256 sx, uint256 sy, uint256 sz) {\\n      // See \\\"Group law for E/K : y^2 = x^3 + ax + b\\\", in section 3.1.2, p. 80,\\n      // \\\"Guide to Elliptic Curve Cryptography\\\" by Hankerson, Menezes and Vanstone\\n      // We take the equations there for (sx,sy), and homogenize them to\\n      // projective coordinates. That way, no inverses are required, here, and we\\n      // only need the one inverse in affineECAdd.\\n\\n      // We only need the \\\"point addition\\\" equations from Hankerson et al. Can\\n      // skip the \\\"point doubling\\\" equations because p1 == p2 is cryptographically\\n      // impossible, and require'd not to be the case in linearCombination.\\n\\n      // Add extra \\\"projective coordinate\\\" to the two points\\n      (uint256 z1, uint256 z2) = (1, 1);\\n\\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\\n\\n      uint256 dx; // Accumulates denominator from sx calculation\\n      // sx=((qy-py)/(qx-px))^2-px-qx\\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\\n\\n      uint256 dy; // Accumulates denominator from sy calculation\\n      // sy=((qy-py)/(qx-px))(px-sx)-py\\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\\n\\n      if (dx != dy) { // Cross-multiply to put everything over a common denominator\\n        sx = mulmod(sx, dy, FIELD_SIZE);\\n        sy = mulmod(sy, dx, FIELD_SIZE);\\n        sz = mulmod(dx, dy, FIELD_SIZE);\\n      } else { // Already over a common denominator, use that for z ordinate\\n        sz = dx;\\n      }\\n    }\\n\\n  // p1+p2, as affine points on secp256k1.\\n  //\\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\\n  // It is computed off-chain to save gas.\\n  //\\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\\n  // point doubling.\\n  function affineECAdd(\\n    uint256[2] memory p1, uint256[2] memory p2,\\n    uint256 invZ) internal pure returns (uint256[2] memory) {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \\\"invZ must be inverse of z\\\");\\n    // Clear the z ordinate of the projective representation by dividing through\\n    // by it, to obtain the affine representation\\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\\n  }\\n\\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\\n  // cryptographically high probability.)\\n  function verifyLinearCombinationWithGenerator(\\n    uint256 c, uint256[2] memory p, uint256 s, address lcWitness)\\n    internal pure returns (bool) {\\n      // Rule out ecrecover failure modes which return address 0.\\n      require(lcWitness != address(0), \\\"bad witness\\\");\\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n      // The point corresponding to the address returned by\\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\\n      // (p[0]\\u207b\\u00b9 mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\\n      // See https://crypto.stackexchange.com/a/18106\\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\\n      return computed == lcWitness;\\n    }\\n\\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\\n  // requires cp1Witness != sp2Witness (which is fine for this application,\\n  // since it is cryptographically impossible for them to be equal. In the\\n  // (cryptographically impossible) case that a prover accidentally derives\\n  // a proof with equal c*p1 and s*p2, they should retry with a different\\n  // proof nonce.) Assumes that all points are on secp256k1\\n  // (which is checked in verifyVRFProof below.)\\n  function linearCombination(\\n    uint256 c, uint256[2] memory p1, uint256[2] memory cp1Witness,\\n    uint256 s, uint256[2] memory p2, uint256[2] memory sp2Witness,\\n    uint256 zInv)\\n    internal pure returns (uint256[2] memory) {\\n      require((cp1Witness[0] - sp2Witness[0]) % FIELD_SIZE != 0,\\n              \\\"points in sum must be distinct\\\");\\n      require(ecmulVerify(p1, c, cp1Witness), \\\"First multiplication check failed\\\");\\n      require(ecmulVerify(p2, s, sp2Witness), \\\"Second multiplication check failed\\\");\\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\\n    }\\n\\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\\n  uint256 constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\\n\\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  // The draft calls (in step 7, via the definition of string_to_int, in\\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\\n  // first hash without checking that it corresponds to a number less than the\\n  // group order, which will lead to a slight bias in the sample.\\n  //\\n  // TODO(alx): We could save a bit of gas by following the standard here and\\n  // using the compressed representation of the points, if we collated the y\\n  // parities into a single bytes32.\\n  // https://www.pivotaltracker.com/story/show/171120588\\n  function scalarFromCurvePoints(\\n    uint256[2] memory hash, uint256[2] memory pk, uint256[2] memory gamma,\\n    address uWitness, uint256[2] memory v)\\n    internal pure returns (uint256 s) {\\n      return uint256(\\n        keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX,\\n                                   hash, pk, gamma, v, uWitness)));\\n    }\\n\\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\\n  // and seed. zInv must be the inverse of the third ordinate from\\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\\n  // section 5.3 of the IETF draft.\\n  //\\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\\n  // (which I could make a uint256 without using any extra space.) Would save\\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\\n  function verifyVRFProof(\\n    uint256[2] memory pk, uint256[2] memory gamma, uint256 c, uint256 s,\\n    uint256 seed, address uWitness, uint256[2] memory cGammaWitness,\\n    uint256[2] memory sHashWitness, uint256 zInv)\\n    internal view {\\n      require(isOnCurve(pk), \\\"public key is not on curve\\\");\\n      require(isOnCurve(gamma), \\\"gamma is not on curve\\\");\\n      require(isOnCurve(cGammaWitness), \\\"cGammaWitness is not on curve\\\");\\n      require(isOnCurve(sHashWitness), \\\"sHashWitness is not on curve\\\");\\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\\n      // we use the address of u instead of u itself. Also, here we add the\\n      // terms instead of taking the difference, and in the proof consruction in\\n      // vrf.GenerateProof, we correspondingly take the difference instead of\\n      // taking the sum as they do in step 7 of section 5.1.)\\n      require(\\n        verifyLinearCombinationWithGenerator(c, pk, s, uWitness),\\n        \\\"addr(c*pk+s*g)\\u2260_uWitness\\\"\\n      );\\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\\n      uint256[2] memory hash = hashToCurve(pk, seed);\\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\\n      uint256[2] memory v = linearCombination(\\n        c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\\n      // Steps 7. and 8. of IETF draft section 5.3\\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\\n      require(c == derivedC, \\\"invalid proof\\\");\\n    }\\n\\n  // Domain-separation tag for the hash used as the final VRF output.\\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\\n  uint256 constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\\n\\n  // Length of proof marshaled to bytes array. Shows layout of proof\\n  uint public constant PROOF_LENGTH = 64 + // PublicKey (uncompressed format.)\\n    64 + // Gamma\\n    32 + // C\\n    32 + // S\\n    32 + // Seed\\n    0 + // Dummy entry: The following elements are included for gas efficiency:\\n    32 + // uWitness (gets padded to 256 bits, even though it's only 160)\\n    64 + // cGammaWitness\\n    64 + // sHashWitness\\n    32; // zInv  (Leave Output out, because that can be efficiently calculated)\\n\\n  /* ***************************************************************************\\n   * @notice Returns proof's output, if proof is valid. Otherwise reverts\\n\\n   * @param proof A binary-encoded proof, as output by vrf.Proof.MarshalForSolidityVerifier\\n   *\\n   * Throws if proof is invalid, otherwise:\\n   * @return output i.e., the random output implied by the proof\\n   * ***************************************************************************\\n   * @dev See the calculation of PROOF_LENGTH for the binary layout of proof.\\n   */\\n  function randomValueFromVRFProof(bytes memory proof)\\n    internal view returns (uint256 output) {\\n      require(proof.length == PROOF_LENGTH, \\\"wrong proof length\\\");\\n\\n      uint256[2] memory pk; // parse proof contents into these variables\\n      uint256[2] memory gamma;\\n      // c, s and seed combined (prevents \\\"stack too deep\\\" compilation error)\\n      uint256[3] memory cSSeed;\\n      address uWitness;\\n      uint256[2] memory cGammaWitness;\\n      uint256[2] memory sHashWitness;\\n      uint256 zInv;\\n      (pk, gamma, cSSeed, uWitness, cGammaWitness, sHashWitness, zInv) = abi.decode(\\n        proof, (uint256[2], uint256[2], uint256[3], address, uint256[2],\\n                uint256[2], uint256));\\n      verifyVRFProof(\\n        pk,\\n        gamma,\\n        cSSeed[0], // c\\n        cSSeed[1], // s\\n        cSSeed[2], // seed\\n        uWitness,\\n        cGammaWitness,\\n        sHashWitness,\\n        zInv\\n      );\\n      output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, gamma)));\\n    }\\n}\\n\",\"keccak256\":\"0xd2cb3cda280d2a409c9573625a8e782ade8cc4546a4cca8b532497ca6a356993\"},\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  using SafeMathChainlink for uint256;\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n    internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee)\\n    internal returns (bytes32 requestId)\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash].add(1);\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) public {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x6023d0e1100e66888001da1820d24c5e3713869bfe28e56200ce952979de3205\"},\"@chainlink/contracts/src/v0.6/VRFCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/BlockHashStoreInterface.sol\\\";\\n\\nimport \\\"./vendor/Ownable.sol\\\";\\n\\nimport \\\"./VRF.sol\\\";\\nimport \\\"./VRFRequestIDBase.sol\\\";\\nimport \\\"./VRFConsumerBase.sol\\\";\\n\\n/**\\n * @title VRFCoordinator coordinates on-chain verifiable-randomness requests\\n * @title with off-chain responses\\n */\\ncontract VRFCoordinator is VRF, VRFRequestIDBase, Ownable {\\n\\n  using SafeMathChainlink for uint256;\\n\\n  LinkTokenInterface internal LINK;\\n  BlockHashStoreInterface internal blockHashStore;\\n\\n  constructor(address _link, address _blockHashStore) public {\\n    LINK = LinkTokenInterface(_link);\\n    blockHashStore = BlockHashStoreInterface(_blockHashStore);\\n  }\\n\\n  struct Callback { // Tracks an ongoing request\\n    address callbackContract; // Requesting contract, which will receive response\\n    // Amount of LINK paid at request time. Total LINK = 1e9 * 1e18 < 2^96, so\\n    // this representation is adequate, and saves a word of storage when this\\n    // field follows the 160-bit callbackContract address.\\n    uint96 randomnessFee;\\n    // Commitment to seed passed to oracle by this contract, and the number of\\n    // the block in which the request appeared. This is the keccak256 of the\\n    // concatenation of those values. Storing this commitment saves a word of\\n    // storage.\\n    bytes32 seedAndBlockNum;\\n  }\\n\\n  struct ServiceAgreement { // Tracks oracle commitments to VRF service\\n    address vRFOracle; // Oracle committing to respond with VRF service\\n    uint96 fee; // Minimum payment for oracle response. Total LINK=1e9*1e18<2^96\\n    bytes32 jobID; // ID of corresponding chainlink job in oracle's DB\\n  }\\n\\n  mapping(bytes32 /* (provingKey, seed) */ => Callback) public callbacks;\\n  mapping(bytes32 /* provingKey */ => ServiceAgreement)\\n    public serviceAgreements;\\n  mapping(address /* oracle */ => uint256 /* LINK balance */)\\n    public withdrawableTokens;\\n  mapping(bytes32 /* provingKey */ => mapping(address /* consumer */ => uint256))\\n    private nonces;\\n\\n  // The oracle only needs the jobID to look up the VRF, but specifying public\\n  // key as well prevents a malicious oracle from inducing VRF outputs from\\n  // another oracle by reusing the jobID.\\n  event RandomnessRequest(\\n    bytes32 keyHash,\\n    uint256 seed,\\n    bytes32 indexed jobID,\\n    address sender,\\n    uint256 fee,\\n    bytes32 requestID);\\n\\n  event NewServiceAgreement(bytes32 keyHash, uint256 fee);\\n\\n  event RandomnessRequestFulfilled(bytes32 requestId, uint256 output);\\n\\n  /**\\n   * @notice Commits calling address to serve randomness\\n   * @param _fee minimum LINK payment required to serve randomness\\n   * @param _oracle the address of the Chainlink node with the proving key and job\\n   * @param _publicProvingKey public key used to prove randomness\\n   * @param _jobID ID of the corresponding chainlink job in the oracle's db\\n   */\\n  function registerProvingKey(\\n    uint256 _fee, address _oracle, uint256[2] calldata _publicProvingKey, bytes32 _jobID\\n  )\\n    external\\n    onlyOwner()\\n  {\\n    bytes32 keyHash = hashOfKey(_publicProvingKey);\\n    address oldVRFOracle = serviceAgreements[keyHash].vRFOracle;\\n    require(oldVRFOracle == address(0), \\\"please register a new key\\\");\\n    require(_oracle != address(0), \\\"_oracle must not be 0x0\\\");\\n    serviceAgreements[keyHash].vRFOracle = _oracle;\\n    serviceAgreements[keyHash].jobID = _jobID;\\n    // Yes, this revert message doesn't fit in a word\\n    require(_fee <= 1e9 ether,\\n      \\\"you can't charge more than all the LINK in the world, greedy\\\");\\n    serviceAgreements[keyHash].fee = uint96(_fee);\\n    emit NewServiceAgreement(keyHash, _fee);\\n  }\\n\\n  /**\\n   * @notice Called by LINK.transferAndCall, on successful LINK transfer\\n   *\\n   * @dev To invoke this, use the requestRandomness method in VRFConsumerBase.\\n   *\\n   * @dev The VRFCoordinator will call back to the calling contract when the\\n   * @dev oracle responds, on the method fulfillRandomness. See\\n   * @dev VRFConsumerBase.fulfilRandomness for its signature. Your consuming\\n   * @dev contract should inherit from VRFConsumerBase, and implement\\n   * @dev fulfilRandomness.\\n   *\\n   * @param _sender address: who sent the LINK (must be a contract)\\n   * @param _fee amount of LINK sent\\n   * @param _data abi-encoded call to randomnessRequest\\n   */\\n  function onTokenTransfer(address _sender, uint256 _fee, bytes memory _data)\\n    public\\n    onlyLINK\\n  {\\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\\n    randomnessRequest(keyHash, seed, _fee, _sender);\\n  }\\n\\n  /**\\n   * @notice creates the chainlink request for randomness\\n   *\\n   * @param _keyHash ID of the VRF public key against which to generate output\\n   * @param _consumerSeed Input to the VRF, from which randomness is generated\\n   * @param _feePaid Amount of LINK sent with request. Must exceed fee for key\\n   * @param _sender Requesting contract; to be called back with VRF output\\n   *\\n   * @dev _consumerSeed is mixed with key hash, sender address and nonce to\\n   * @dev obtain preSeed, which is passed to VRF oracle, which mixes it with the\\n   * @dev hash of the block containing this request, to compute the final seed.\\n   *\\n   * @dev The requestId used to store the request data is constructed from the\\n   * @dev preSeed and keyHash.\\n   */\\n  function randomnessRequest(\\n    bytes32 _keyHash,\\n    uint256 _consumerSeed,\\n    uint256 _feePaid,\\n    address _sender\\n  )\\n    internal\\n    sufficientLINK(_feePaid, _keyHash)\\n  {\\n    uint256 nonce = nonces[_keyHash][_sender];\\n    uint256 preSeed = makeVRFInputSeed(_keyHash, _consumerSeed, _sender, nonce);\\n    bytes32 requestId = makeRequestId(_keyHash, preSeed);\\n    // Cryptographically guaranteed by preSeed including an increasing nonce\\n    assert(callbacks[requestId].callbackContract == address(0));\\n    callbacks[requestId].callbackContract = _sender;\\n    assert(_feePaid < 1e27); // Total LINK fits in uint96\\n    callbacks[requestId].randomnessFee = uint96(_feePaid);\\n    callbacks[requestId].seedAndBlockNum = keccak256(abi.encodePacked(\\n      preSeed, block.number));\\n    emit RandomnessRequest(_keyHash, preSeed, serviceAgreements[_keyHash].jobID,\\n      _sender, _feePaid, requestId);\\n    nonces[_keyHash][_sender] = nonces[_keyHash][_sender].add(1);\\n  }\\n\\n  // Offsets into fulfillRandomnessRequest's _proof of various values\\n  //\\n  // Public key. Skips byte array's length prefix.\\n  uint256 public constant PUBLIC_KEY_OFFSET = 0x20;\\n  // Seed is 7th word in proof, plus word for length, (6+1)*0x20=0xe0\\n  uint256 public constant PRESEED_OFFSET = 0xe0;\\n\\n  /**\\n   * @notice Called by the chainlink node to fulfill requests\\n   *\\n   * @param _proof the proof of randomness. Actual random output built from this\\n   *\\n   * @dev The structure of _proof corresponds to vrf.MarshaledOnChainResponse,\\n   * @dev in the node source code. I.e., it is a vrf.MarshaledProof with the\\n   * @dev seed replaced by the preSeed, followed by the hash of the requesting\\n   * @dev block.\\n   */\\n  function fulfillRandomnessRequest(bytes memory _proof) public {\\n    (bytes32 currentKeyHash, Callback memory callback, bytes32 requestId,\\n     uint256 randomness) = getRandomnessFromProof(_proof);\\n\\n    // Pay oracle\\n    address oadd = serviceAgreements[currentKeyHash].vRFOracle;\\n    withdrawableTokens[oadd] = withdrawableTokens[oadd].add(\\n      callback.randomnessFee);\\n\\n    // Forget request. Must precede callback (prevents reentrancy)\\n    delete callbacks[requestId];\\n    callBackWithRandomness(requestId, randomness, callback.callbackContract);\\n\\n    emit RandomnessRequestFulfilled(requestId, randomness);\\n  }\\n\\n  function callBackWithRandomness(bytes32 requestId, uint256 randomness,\\n    address consumerContract) internal {\\n    // Dummy variable; allows access to method selector in next line. See\\n    // https://github.com/ethereum/solidity/issues/3506#issuecomment-553727797\\n    VRFConsumerBase v;\\n    bytes memory resp = abi.encodeWithSelector(\\n      v.rawFulfillRandomness.selector, requestId, randomness);\\n    // The bound b here comes from https://eips.ethereum.org/EIPS/eip-150. The\\n    // actual gas available to the consuming contract will be b-floor(b/64).\\n    // This is chosen to leave the consuming contract ~200k gas, after the cost\\n    // of the call itself.\\n    uint256 b = 206000;\\n    require(gasleft() >= b, \\\"not enough gas for consumer\\\");\\n    // A low-level call is necessary, here, because we don't want the consuming\\n    // contract to be able to revert this execution, and thus deny the oracle\\n    // payment for a valid randomness response. This also necessitates the above\\n    // check on the gasleft, as otherwise there would be no indication if the\\n    // callback method ran out of gas.\\n    //\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success,) = consumerContract.call(resp);\\n    // Avoid unused-local-variable warning. (success is only present to prevent\\n    // a warning that the return value of consumerContract.call is unused.)\\n    (success);\\n  }\\n\\n  function getRandomnessFromProof(bytes memory _proof)\\n    internal view returns (bytes32 currentKeyHash, Callback memory callback,\\n      bytes32 requestId, uint256 randomness) {\\n    // blockNum follows proof, which follows length word (only direct-number\\n    // constants are allowed in assembly, so have to compute this in code)\\n    uint256 BLOCKNUM_OFFSET = 0x20 + PROOF_LENGTH;\\n    // _proof.length skips the initial length word, so not including the\\n    // blocknum in this length check balances out.\\n    require(_proof.length == BLOCKNUM_OFFSET, \\\"wrong proof length\\\");\\n    uint256[2] memory publicKey;\\n    uint256 preSeed;\\n    uint256 blockNum;\\n    assembly { // solhint-disable-line no-inline-assembly\\n      publicKey := add(_proof, PUBLIC_KEY_OFFSET)\\n      preSeed := mload(add(_proof, PRESEED_OFFSET))\\n      blockNum := mload(add(_proof, BLOCKNUM_OFFSET))\\n    }\\n    currentKeyHash = hashOfKey(publicKey);\\n    requestId = makeRequestId(currentKeyHash, preSeed);\\n    callback = callbacks[requestId];\\n    require(callback.callbackContract != address(0), \\\"no corresponding request\\\");\\n    require(callback.seedAndBlockNum == keccak256(abi.encodePacked(preSeed,\\n      blockNum)), \\\"wrong preSeed or block num\\\");\\n\\n    bytes32 blockHash = blockhash(blockNum);\\n    if (blockHash == bytes32(0)) {\\n      blockHash = blockHashStore.getBlockhash(blockNum);\\n      require(blockHash != bytes32(0), \\\"please prove blockhash\\\");\\n    }\\n    // The seed actually used by the VRF machinery, mixing in the blockhash\\n    uint256 actualSeed = uint256(keccak256(abi.encodePacked(preSeed, blockHash)));\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly { // Construct the actual proof from the remains of _proof\\n      mstore(add(_proof, PRESEED_OFFSET), actualSeed)\\n      mstore(_proof, PROOF_LENGTH)\\n    }\\n    randomness = VRF.randomValueFromVRFProof(_proof); // Reverts on failure\\n  }\\n\\n  /**\\n   * @dev Allows the oracle operator to withdraw their LINK\\n   * @param _recipient is the address the funds will be sent to\\n   * @param _amount is the amount of LINK transferred from the Coordinator contract\\n   */\\n  function withdraw(address _recipient, uint256 _amount)\\n    external\\n    hasAvailableFunds(_amount)\\n  {\\n    withdrawableTokens[msg.sender] = withdrawableTokens[msg.sender].sub(_amount);\\n    assert(LINK.transfer(_recipient, _amount));\\n  }\\n\\n  /**\\n   * @notice Returns the serviceAgreements key associated with this public key\\n   * @param _publicKey the key to return the address for\\n   */\\n  function hashOfKey(uint256[2] memory _publicKey) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_publicKey));\\n  }\\n\\n  /**\\n   * @dev Reverts if amount is not at least what was agreed upon in the service agreement\\n   * @param _feePaid The payment for the request\\n   * @param _keyHash The key which the request is for\\n   */\\n  modifier sufficientLINK(uint256 _feePaid, bytes32 _keyHash) {\\n    require(_feePaid >= serviceAgreements[_keyHash].fee, \\\"Below agreed payment\\\");\\n    _;\\n  }\\n\\n/**\\n   * @dev Reverts if not sent from the LINK token\\n   */\\n  modifier onlyLINK() {\\n    require(msg.sender == address(LINK), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if amount requested is greater than withdrawable balance\\n   * @param _amount The given amount to compare to `withdrawableTokens`\\n   */\\n  modifier hasAvailableFunds(uint256 _amount) {\\n    require(withdrawableTokens[msg.sender] >= _amount, \\\"can't withdraw more than balance\\\");\\n    _;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xb55fb9bf1b5cb3af9e5a0e9c469f4ec0d62b70a78f49f7c1283dc52d527324f1\"},\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x0c3bd40c63dac8398a979b1228c8ecb1c269c157dd16f2dce2086d2270b65b22\"},\"@chainlink/contracts/src/v0.6/interfaces/BlockHashStoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\ninterface BlockHashStoreInterface {\\n  function getBlockhash(uint256 number) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x582f4c40385ff654cd1e622977642dc14bacc6b6151252bc99d247530616d2de\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\"},\"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n *\\n * This contract has been modified to remove the revokeOwnership function\\n */\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x20a325da437d524570c833519481749e6e33018fe899dfdad66e59e1f60f6192\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2115,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1289,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"LINK","offset":0,"slot":"1","type":"t_contract(LinkTokenInterface)2110"},{"astId":1291,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"blockHashStore","offset":0,"slot":"2","type":"t_contract(BlockHashStoreInterface)2015"},{"astId":1329,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"callbacks","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_struct(Callback)1318_storage)"},{"astId":1333,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"serviceAgreements","offset":0,"slot":"4","type":"t_mapping(t_bytes32,t_struct(ServiceAgreement)1325_storage)"},{"astId":1337,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"withdrawableTokens","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":1343,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"nonces","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(BlockHashStoreInterface)2015":{"encoding":"inplace","label":"contract BlockHashStoreInterface","numberOfBytes":"20"},"t_contract(LinkTokenInterface)2110":{"encoding":"inplace","label":"contract LinkTokenInterface","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_bytes32,t_struct(Callback)1318_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct VRFCoordinator.Callback)","numberOfBytes":"32","value":"t_struct(Callback)1318_storage"},"t_mapping(t_bytes32,t_struct(ServiceAgreement)1325_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct VRFCoordinator.ServiceAgreement)","numberOfBytes":"32","value":"t_struct(ServiceAgreement)1325_storage"},"t_struct(Callback)1318_storage":{"encoding":"inplace","label":"struct VRFCoordinator.Callback","members":[{"astId":1313,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"callbackContract","offset":0,"slot":"0","type":"t_address"},{"astId":1315,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"randomnessFee","offset":20,"slot":"0","type":"t_uint96"},{"astId":1317,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"seedAndBlockNum","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(ServiceAgreement)1325_storage":{"encoding":"inplace","label":"struct VRFCoordinator.ServiceAgreement","members":[{"astId":1320,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"vRFOracle","offset":0,"slot":"0","type":"t_address"},{"astId":1322,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"fee","offset":20,"slot":"0","type":"t_uint96"},{"astId":1324,"contract":"@chainlink/contracts/src/v0.6/VRFCoordinator.sol:VRFCoordinator","label":"jobID","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"methods":{"fulfillRandomnessRequest(bytes)":{"notice":"Called by the chainlink node to fulfill requests"},"hashOfKey(uint256[2])":{"notice":"Returns the serviceAgreements key associated with this public key"},"onTokenTransfer(address,uint256,bytes)":{"notice":"Called by LINK.transferAndCall, on successful LINK transfer"},"registerProvingKey(uint256,address,uint256[2],bytes32)":{"notice":"Commits calling address to serve randomness"}}}}},"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol":{"VRFRequestIDBase":{"abi":[],"devdoc":{"methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220640170aee05a9ae81d05d933b5e21b5d86b1554f45325660d1836bc5f8dc297364736f6c63430006060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x170AEE05A SWAP11 0xE8 SAR SDIV 0xD9 CALLER 0xB5 0xE2 SHL 0x5D DUP7 0xB1 SSTORE 0x4F GASLIMIT ORIGIN JUMP PUSH1 0xD1 DUP4 PUSH12 0xC5F8DC297364736F6C634300 MOD MOD STOP CALLER ","sourceMap":"57:1524:3:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;57:1524:3;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220640170aee05a9ae81d05d933b5e21b5d86b1554f45325660d1836bc5f8dc297364736f6c63430006060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x170AEE05A SWAP11 0xE8 SAR SDIV 0xD9 CALLER 0xB5 0xE2 SHL 0x5D DUP7 0xB1 SSTORE 0x4F GASLIMIT ORIGIN JUMP PUSH1 0xD1 DUP4 PUSH12 0xC5F8DC297364736F6C634300 MOD MOD STOP CALLER ","sourceMap":"57:1524:3:-:0;;;12:1:-1;9;2:12"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"makeRequestId(bytes32,uint256)":"infinite","makeVRFInputSeed(bytes32,uint256,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":\"VRFRequestIDBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x0c3bd40c63dac8398a979b1228c8ecb1c269c157dd16f2dce2086d2270b65b22\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}},"@chainlink/contracts/src/v0.6/interfaces/BlockHashStoreInterface.sol":{"BlockHashStoreInterface":{"abi":[{"inputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"name":"getBlockhash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getBlockhash(uint256)":"e9413d38"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getBlockhash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/interfaces/BlockHashStoreInterface.sol\":\"BlockHashStoreInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/BlockHashStoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\ninterface BlockHashStoreInterface {\\n  function getBlockhash(uint256 number) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x582f4c40385ff654cd1e622977642dc14bacc6b6151252bc99d247530616d2de\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}},"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol":{"LinkTokenInterface":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"decimalPlaces","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"increaseApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalTokensIssued","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseApproval(address,uint256)":"66188463","increaseApproval(address,uint256)":"d73dd623","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":\"LinkTokenInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}},"@chainlink/contracts/src/v0.6/vendor/Ownable.sol":{"Ownable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be aplied to your functions to restrict their use to the owner. * This contract has been modified to remove the revokeOwnership function","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"isOwner()":{"details":"Returns true if the caller is the current owner."},"owner()":{"details":"Returns the address of the current owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isOwner()":"8f32d59b","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be aplied to your functions to restrict their use to the owner. * This contract has been modified to remove the revokeOwnership function\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n *\\n * This contract has been modified to remove the revokeOwnership function\\n */\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x20a325da437d524570c833519481749e6e33018fe899dfdad66e59e1f60f6192\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2115,"contract":"@chainlink/contracts/src/v0.6/vendor/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"methods":{}}}},"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol":{"SafeMathChainlink":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cb6687dc31a0c922bcbb9a64659faee080fa5bad301d3c315cdeedb5f3c33dad64736f6c63430006060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB PUSH7 0x87DC31A0C922BC 0xBB SWAP11 PUSH5 0x659FAEE080 STATICCALL JUMPDEST 0xAD ADDRESS SAR EXTCODECOPY BALANCE 0x5C 0xDE 0xED 0xB5 RETURN 0xC3 RETURNDATASIZE 0xAD PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ","sourceMap":"621:2783:7:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cb6687dc31a0c922bcbb9a64659faee080fa5bad301d3c315cdeedb5f3c33dad64736f6c63430006060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB PUSH7 0x87DC31A0C922BC 0xBB SWAP11 PUSH5 0x659FAEE080 STATICCALL JUMPDEST 0xAD ADDRESS SAR EXTCODECOPY BALANCE 0x5C 0xDE 0xED 0xB5 RETURN 0xC3 RETURNDATASIZE 0xAD PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ","sourceMap":"621:2783:7:-:0;;;;;;12:1:-1;9;2:12"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","mod(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":\"SafeMathChainlink\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}}}}}